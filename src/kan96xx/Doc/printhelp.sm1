/printOnlineHelp {
 [/keys /i] pushVariables
 [
  (\documentclass{article}) message
  (\title{{\bf kan/sm1 operators reference}}) message
  (\author{ } \date{) messagen
  [(Version)] system_variable messagen
  ( }) message
  (\begin{document}) message
  (\maketitle) message
  (\section{Primitive Operators}) message
  [(keywords)] extension  /keys set
  0 1 keys length 1 sub {
    /i set
    (\subsection{ ) messagen keys i get removeIllegalChars messagen ( } ) message
    ({\footnotesize \begin{verbatim}) message
    keys i get usage 
    ( ) message
    (\end{verbatim} }) message ( ) message ( ) message
  } for
  (\newpage) message (  ) message

  (\section{Macro Operators}) message
  @.usages { 0 get } map shell /keys set
  0 1 keys length 1 sub{
    /i set
    (\subsection{  ) messagen keys i get removeIllegalChars messagen ( } ) message
    ({\footnotesize \begin{verbatim}) message
    keys i get usage 
    ( ) message
    (\end{verbatim} }) message ( ) message ( ) message
  } for


  (\section{Macros in libraries}) message
  printlibhelp

  (\end{document}) message
 ] pop
 popVariables
} def

/removeIllegalChars {
  /arg1 set
  [/in-removeIllegalChars /ss /i] pushVariables
  [
     /ss arg1 def
     ss (array) dc /ss set
     0 1 ss length 1 sub {
       /i set
       ss i get 95 eq %% _ 
       {
         ss i [92 95] put %% \_
       }{ } ifelse
     } for
     ss flatten /ss set
     ss {(string) dc}map cat /arg1 set
  ] pop
  popVariables
  arg1
} def

/printlibhelp {
  [/in-printlibhelp /keys /i] pushVariables
  [
   (The macros described in this section can be used by loading) message
   (library files by the command  $cohom.sm1$ run) message
   (\verb+ ox_asir + functions require open asir module.) message
   (  ) message
   (\noindent ) messagen
   [(parse) (var.sm1) pushfile] extension ( ) message 
   (\noindent ) messagen
   [(parse) (bfunction.sm1) pushfile] extension ( ) message 
   (\noindent ) messagen
   [(parse) (hol.sm1) pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (gkz.sm1) pushfile] extension ( ) message
   (\noindent ) messagen
   [(parse) (appell.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (resol0.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (complex.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (ecart.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   /BFmessage 0 def
   [(parse) (restall.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (restall_s.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (ox.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (oxasir.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (r-interface.sm1)pushfile] extension ( ) message
   (\noindent ) messagen   
   [(parse) (intw.sm1)pushfile] extension ( ) message

%%        Offverbose must be the smallest
  /keys [(Offverbose) (ann-t-f) (appell1)  (bfunction) (rank) 
         (rrank) (characteristic)  (ch)
         (gkz) (appell4) (gb) (pgb) (syz) (resol0) (resol1) 
         (genericAnn) (annfs) (deRham) (restriction)
         (integration) (Onverbose) (genericAnnWithL)
         (asir) (primadec) (fctr) (asirconnectr) 
         (loadAsirFile) (reduceByAsir) (ptozp_subst)
         (integral-k1)  (wbf)  (intwbf) (tensor0) (wTensor0)
         (intwbfRoots) (wbfRoots)
         (wIntegration0) (wRestriction0) (bf-111) (wdeRham0) (restall_s) 
         (intersection)
         (saturation)
         (res-div) (res-solv) (res-dual) (res-kernel-image) (ox) (oxconnect)
         (ox_launch) (ox_launch_nox)
         (debugMode) (db.where) (db.restore) (db.clear) (db.clear.es) 
         (db.where.es) (localVariables) (restoreVariables) (db.clear.ds)
         (db.clear.es)
        ]
  def
  keys shell /keys set
  0 1 keys length 1 sub{
    /i set
    (\subsection{ ) messagen keys i get removeIllegalChars messagen (} ) message
    ({\footnotesize \begin{verbatim}) message
    keys i get usage 
    ( ) message
    (\end{verbatim} }) message ( ) message ( ) message
  } for
  ] pop 
%%  popVariables %% I do not know the reason, but the stack seems to be broken.
} def  

%% sm1 -q -s "[(parse) (printhelp.sm1) pushfile] extension printOnlineHelp quit"
