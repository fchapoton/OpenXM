/* $OpenXM: OpenXM/src/asir-contrib/packages/src/longname,v 1.2 2000/02/28 10:47:47 takayama Exp $ */
/*&C-texi

*/
/*&eg-texi 
@node LONGNAME,,, Top
@chapter LONGNAME
@menu
* longname::
@end menu
@node longname,,, LONGNAME Functions
@subsection @code{longname}
@findex longname
@table @t
@item longname
::     Asir/OpenXM supports 
   function names in the long function name format partly following OpenMath
   Content Dictionaries. 
@end table

*/

/*&jp-texi 
@node LONGNAME,,, Top
@chapter LONGNAME
@menu
* longname::
@end menu
@node longname,,, LONGNAME 函数
@subsection @code{longname}
@findex longname
@table @t
@item longname
::   Asir/OpenXM (OpenXM 対応の asir) は
    OpenMath の Content Dictionaries に部分的に対応した,
   以下の函数名をサポートする.
@end table
 */

/*&C-texi

@example
Basic_Pi = @@pi $
Basic_true = 1$
Basic_false = 0$
Basic_e = @@e$
def basic_plus(A,B) @{ return(A+B); @}
def basic_times(A,B) @{ return(A*B); @}
def basic_minus(A,B) @{ return(A-B); @}
def basic_over(A,B) @{ return(A/B); @}
def basic_power(A,B) @{ return(A^B); @}
def basic_and(A,B)   @{ return(A && B); @}
def basic_or(A,B)    @{ return(A || B); @}
def basic_not(A)   @{ return(! A); @}
def basic_IntegerQuotient(A,B) @{ return(idiv(A,B)); @}
def basic_IntegerRemainder(A,B) @{ return(irem(A,B)); @}
def basic_IntegerGcd(A,B)  @{ return(igcd(A,B)); @}

def poly_factor(A) @{ return(fctr(A)); @}
@end example
*/

/* Double check the names */
Basic_Pi = @pi $
Basic_true = 1$
Basic_false = 0$
Basic_e = @e$
def basic_plus(A,B) { return(A+B); }
def basic_times(A,B) { return(A*B); }
def basic_minus(A,B) { return(A-B); }
def basic_over(A,B) { return(A/B); }
def basic_power(A,B) { return(A^B); }
def basic_and(A,B)   { return(A && B); }
def basic_or(A,B)    { return(A || B); }
def basic_not(A)   { return(! A); }
def basic_IntegerQuotient(A,B) { return(idiv(A,B)); }
def basic_IntegerRemainder(A,B) { return(irem(A,B)); }
def basic_IntegerGcd(A,B)  { return(igcd(A,B)); }


def poly_factor(A) { return(fctr(A)); }

/*&eg-texi

It is convinient to have function names without Basic_ etc.
*/
/*&jp-texi

Basic_ などがつかないつぎのような函数名も登録してある.

*/

/*&C-texi

@example
factor, cancel, numerator, denominator
@end example
*/

def factor(F) { return(poly_factor(F)); }
def cancel(F)  { return(red(F)); }
def numerator(F) { return(nm(F)); }
def denominator(F) { return(dn(F)); }


/*&C-texi

*/
end$
