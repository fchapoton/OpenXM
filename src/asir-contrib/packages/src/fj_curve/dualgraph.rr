/* $OpenXM$ */
/* 一変数多項式 P の根を一つだけ求める */
def a_root(P)
{
	X=var(P);AL=[];L=[];
	/* 代数的数を含んでいなければ fctr で因数分解 */
	if(alg_poly(P)==0) F=cdr(fctr(P));
	else{
/* Asir95用
		AL=alglist(P);
*/		AL=poly2al(P);
		F=af(P,AL);
	}
	if(car(F)==[1,1]) F=cdr(F);
	while(F!=[]){
		L=cons(F[0][0],L);
		F=cdr(F);
	}
	L1=car(reverse(sort_by_deg(L)));
	if(deg(L1,X)==1) return [L1];
	else{
		NA=newalg(L1);
		return [X-NA];
	}
}
/* roots ver.3 (algfact ver.4)  need: gr,sp */
/* 一変数多項式の因数分解(係数に代数的数をもつ場合に対応済み) */
/* 代数的数をもつときは先に無平方分解をする */
def roots(P)
{
	X=var(P);AL=[];L=[];
	/* 代数的数を含んでいなければ fctr で因数分解 */
	if(alg_poly(P)==0){
		F=cdr(fctr(P));
	}
	else{
/* Asir95用 (Asir2000は asq の使い方が異なるので注意！！！)
		AL=alglist(P);
		SP=asq(P,AL);F=[];
*/		AL=poly2al(P);
		SP=asq(P);F=[];
		while(SP!=[]){
			F=append(af(car(car(SP)),AL),F);
			SP=cdr(SP);
		}
	}
	if(car(F)==[1,1]) F=cdr(F);
	while(F!=[]){
		L=cons(F[0][0],L);
		F=cdr(F);
	}
	/* ADL = []; */
	while ( 1 ) {
		L=sort_by_deg(L);
		for(T=L;T!=[];T=cdr(T))
		/*for ( T = L, H = []; T != []; H = cons(car(T),H), T = cdr(T) )*/
			if ( deg(car(T),X) > 1 )
				break;
		if ( T == [] ) {
			/* return [L,ADL]; */
			return sort_alg(L);
		} else {
			A = newalg(car(T));
			R = pdiva(car(T),X-A);
/******************************************/
			AL = poly2al(R);
/******************************************/
			if(deg(R,X)==1) L=append([X-A,R],cdr(T));
			else{
				AF=af(R,AL);RL=[];
				if(car(AF)==[1,1]) AF=cdr(AF);
				while(AF!=[]){
					RL=cons(AF[0][0],RL);
					AF=cdr(AF);
				}
				L=append(cons(X-A,RL),cdr(T));
			}
			/* ADL = cons([A,defpoly(A)],ADL); */
			/* L = aflist(append(H,append([X-A,R],cdr(T))),AL); */
		}
	}
}
/* roots ver.2 (algfact ver.4)  need: gr,sp */
/* 多項式の因数分解(係数に代数的数をもつ場合に対応済み) */
#if 0
def roots(P)
{
	X=var(P);AL=[];L=[];
	/* 代数的数を含んでいなければ fctr で因数分解 */
	if(alg_poly(P)==0) F=cdr(fctr(P));
	else{
		AL=alglist(P);
		F=af(P,AL);
	}
	if(car(F)==[1,1]) F=cdr(F);
	while(F!=[]){
		L=cons(F[0][0],L);
		F=cdr(F);
	}
	/* ADL = []; */
	while ( 1 ) {
		L=sort_by_deg(L);
		for(T=L;T!=[];T=cdr(T))
		/*for ( T = L, H = []; T != []; H = cons(car(T),H), T = cdr(T) )*/
			if ( deg(car(T),X) > 1 )
				break;
		if ( T == [] ) {
			/* return [L,ADL]; */
			return sort_alg(L);
		} else {
			A = newalg(car(T));
			R = pdiva(car(T),X-A);
			AL = cons(A,AL);
			if(deg(R,X)==1) L=append([X-A,R],cdr(T));
			else{
				AF=af(R,AL);RL=[];
				if(car(AF)==[1,1]) AF=cdr(AF);
				while(AF!=[]){
					RL=cons(AF[0][0],RL);
					AF=cdr(AF);
				}
				L=append(cons(X-A,RL),cdr(T));
			}
			/* ADL = cons([A,defpoly(A)],ADL); */
			/* L = aflist(append(H,append([X-A,R],cdr(T))),AL); */
		}
	}
}
#endif
/* 多項式Pの係数が代数的数なら1,そうでなければ0を返す */
/* 変数が１変数のときのみOK */
def alg_poly(P)
{
	V=var(P);N=deg(P,V);
	for(D=0;D<=N;D++){
		if(ntype(coef(P,D))==2) break;
	}
	if(D==N+1) return(0);
	else return(1);
}
/* 多項式の係数に使われている代数的数のリスト */
def alglist(P)
{
	return(sort_alg(getalgp(P)));
}
/* 代数的数の番号を求める */
def algnum(P)
{
	for(I=0;P!=alg(I);I++);
	return(I);
}
/* 多項式に現れる代数的数の番号の最大のものを求め、
   その番号までの代数的数をリストにする */
/* poly2al(alg(2)*x^2+alg(3))→[(#3),(#2),(#1),(#0)] */
def poly2al(P)
{
	R=[];
	L=alglist(P);M=algnum(car(L));
	for(I=0;I<=M;I++)
		R=cons(alg(I),R);
	return R;
}
/* 現時点で定義されている代数的数のリスト */
def allalg()
{
	N=[];
	for(I=0;algv(I)!=0;I++)	N=cons(alg(I),N);
	return(N);
}

/* max:数リストの要素のうち最大のものを求める */
def max(L)
{
	Max=car(L);L1=cdr(L);
	while(L1!=[]){
		if(Max<car(L1)) Max=car(L1);
		L1=cdr(L1);
	}
	return(Max);
}
/* max2:座標リストの要素のうち x の値が最大のもの */
def max2(L)
{
	Max=car(L);L1=cdr(L);
	while(L1!=[]){
		if(Max[0]<car(L1)[0]) Max=car(L1);
		L1=cdr(L1);
	}
	return(Max);
}
/* sort */
def sort(L)
{
	R=[];
	while(L!=[]){
		M=max(L);
		R=cons(M,R);
		L=omit_element(L,M);
	}
	return(R);
}
/* sort2:座標のリストの x に関するソート */
def sort2(L)
{
	R=[];
	while(L!=[]){
		M=max2(L);
		R=cons(M,R);
		L=omit_element(L,M);
	}
	return(R);
}
/* 多項式のリスト表示 */
def p2l(P)
{
	L=[];
	V=var(P);
	D=deg(P,V);
	while(D!=-1){
		C=coef(P,D);
		if(C!=0) L=cons([C,D],L);
		D=D-1;
	}
	return(L);
}
def poly2list(P)
{
	L=[];V=vars(P)[1];
	R=p2l(P);
	while(R!=[]){
		PY=R[0][0];/* polynomial of y */
		DX=R[0][1];/* degree of x */
		D=deg(PY,V);
		while(D!=-1){
			C=coef(PY,D);
			if(C!=0) L=cons([C,[DX,D]],L);
			D=D-1;
		}
		R=cdr(R);
	}
	return(L);
}
/* Newton Polygonを求めるための前処理 */
/* 明らかに無駄な点を除去する */
def pre_np(P)
{
	VL=vars(P);
	if(length(VL)>=2){
		L=[];V=VL[1];
		R=p2l(P);
		PY1=R[0][0];/* polynomial of y */
		DY1=mindeg(PY1,V);/* mindeg of poly of y */
		DX=R[0][1];/* degree of x */
		C=coef(PY1,DY1);
		L=cons([C,[DX,DY1]],L);
		R=cdr(R);
		while(R!=[]){
			DY1=L[0][1][1];/* 一つ前の点のy座標 */
			PY=R[0][0];/* polynomial of y */
			DY=mindeg(PY,V);/* mindeg of poly of y */
			if(DY1>DY){
				DX=R[0][1];/* degree of x */
				C=coef(PY,DY);
				L=cons([C,[DX,DY]],L);
			}
			R=cdr(R);
		}
		return(L);
	}
	else{/* 一変数の時 */
		if(car(VL)==x){
			D=mindeg(P,x);
			return([[coef(P,D,x),[D,0]]]);
		}
		else{
			D=mindeg(P,y);
			return([[coef(P,D,y),[0,D]]]);
		}
	}
}
/* 多項式からNewton Polygonの最初の一辺を求める */
def segment(L)
{
	/* L=reverse(pre_np(F));*/
	R=[];
	P1=L[0];P2=L[1];L=cdr(cdr(L));S=[P1];
	if(L!=[]){
		while(L!=[]){
			P=car(L);
			V=subst((P1[1][1]-P2[1][1])*(x-P1[1][0])-(P1[1][0]-P2[1][0])*(y-P1[1][1]),x,P[1][0],y,P[1][1]);
			if(V==0){S=cons(P2,S);P2=P;}
			else if(V<0) P2=P;
			L=cdr(L);
		}
	}
	return(reverse(cons(P2,S)));
}
/* Newton polygon */
def n_polygon(F)
{
	L=reverse(pre_np(F));R=[];
	while(length(L)!=1){
		S=segment(L);
		P=car(reverse(S));
		R=cons(S,R);
		while(car(L)!=P){
			L=cdr(L);
		}
	}
	if(R!=[]) return(reverse(R));
	else return([L]);
}
/***** list functions *****/
/* リストLから第M成分から第N成分までを抜き出しリストにする */
def m_list_n(L,M,N)
{
	for(I=1;I<M;I++){
		L=cdr(L);N=N-1;
	}
	R=[];
	for(J=0;J<N;J++){
		R=cons(car(L),R);
		L=cdr(L);if(L==[]) break;
	}
	return reverse(R);
}
/* リストLから最初の第N成分まで抜き出しリスト化 */
def n_list(L,N)
{
	R=[];
	for(I=0;I<N;I++){
		R=cons(car(L),R);
		L=cdr(L);if(L==[]) break;
	}
	return reverse(R);
}
/* リストLから第N成分から最後までをリスト化 */
def list_n(L,N)
{
	for(I=1;I<N;I++) L=cdr(L);
	return L;
}
/* リストL中のカッコをすべてはずす */
def non_multi_list(L)
{
	H=L;
	while(1){
		H=[];
		while(L!=[]){
			if(type(car(L))==4) break;
			H=cons(car(L),H);
			L=cdr(L);
		}
		if(L==[]) return reverse(H);
		else{
			T=car(L);
			while(T!=[]){
				H=cons(car(T),H);
				T=cdr(T);
			}
			L=append(reverse(H),cdr(L));
		}
	}
}
/************Brieskornのアルゴリズム用*************************************/
/* p_p_aux で得られたリストLから番号付きPuiseux pairを生成 */
/* [f,[[2,3],f11,f12],[[3,5],f21]] --> [[[1,1],[2,3]],[[2,1],[2,3]],[[1,2],[3,5]]] */
/* [f,0] --> [] */
def simp_pp(L)
{
	if(car(cdr(L))==0) return([]);
	else{
		L=cdr(L);N=length(L);R=[];
		for(J=1;J<=N;J++){
			T=length(cdr(car(L)));
			for(I=1;I<=T;I++)
				R=cons([[I,J],car(car(L))],R);
			L=cdr(L);
		}
		return(reverse(R));
	}
}
/* Puiseux Pair :各分枝ごとのPuiseux pairsを求める*/
def p_pair_br(F)
{
	/* 初期処理 */
	/*F=non_multi_fctr(F);*/
	L=p_p_aux(F);
	R=simp_pp(L);
/*print(L);*/
	while(1){
		C=check(L);
		if(C==1){/* 終了処理 */
			PL=[];
			while(R!=[]){
				PL=cons(cdr(car(R)),PL);
				R=cdr(R);
			}
			return(reverse(PL));
		}
		else{/* 終了判定に引っかかった多項式に対して次のP-pairを求める */
			N=car(C);/* list No. */
			R1=[];
			do{
				A=car(R);R=cdr(R);
				R1=cons(A,R1);
			}while(car(A)!=N);
			X=car(car(R1));/* 追加されるPuiseux pairの番号*/
			Y=reverse(cdr(car(R1)));/* 追加されるPuiseux pairs */
			R1=reverse(cdr(R1));/* 結果のリストの左側 */
			F=car(cdr(C));
			F=p_p_aux(F);
			T=simp_pp(F);
			if(T!=[]){
				R2=[];/* 変更される部分 */
				while(T!=[]){
					T1=car(T);
					R2=cons(cons(append(car(T1),X),reverse(cons(car(cdr(T1)),Y))),R2);
					T=cdr(T);
				}
				R=append(append(R1,reverse(R2)),R);
			}
			else R=append(append(R1,[cons(X,reverse(Y))]),R);
			/* L中の旧Fを新Fに置換 */
			L=exchange(L,car(C),F);
/*print(L);*/
		}
	}
}
/*************************************************/
/* Puiseux Pair */
def p_pair(F)
{
	/* 初期処理 */
	/*F=non_multi_fctr(F);*/
	L=p_p_aux(F);
/*print(L);*/
	while(1){
		C=check(L);
		if(C==1) return(L);
		else{/* 終了判定にかかった多項式に対して次のP-pairを求める */
			F=car(cdr(C));
			F=p_p_aux(F);
			/* L中の旧Fを新Fに置換 */
			L=exchange(L,car(C),F);
/*print(L);*/
		}
	}
}
def p_p_aux(F)
{
	L=[F];F0=F;
	N=n_polygon(F);
/*print(N);*/
	if(length(N)==1){
		S=car(N);
		if(length(S)==1) return([F,0]);
		else if(S[0][1][1]==1) return([F,0]);
	}
/* Newton Polygonの表示 */
print(simple_np(N));
	while(N!=[]){
		S=car(N);N=cdr(N);PP=[];
		A=S[1][1][0]-S[0][1][0];
		B=S[0][1][1]-S[1][1][1];
		M=A/B;/* -1/(傾き) */
		P0=nm(M);Q0=dn(M);/* Puiseux Pair */
		PP=cons([P0,Q0],PP);
/* print(PP); */
		/* 次のP-pairを生成する多項式を求める */
		/* S を壊す前に，P_0*Beta_0+Q_0*Alpha_0 を求めておく */
		D=P0*S[0][1][1]+Q0*S[0][1][0];
		/* 余分なx,yのベキ */
		EX=car(S)[1][0];EY=car(reverse(S))[1][1];
		PS=0;
		while(S!=[]){
			PS=PS+S[0][0]*t^((S[0][1][1]-EY)/Q0);
			S=cdr(S);
		}
/* print("Degree:",0);
   print(deg(PS,t)); */
/* print(PS); */
		RT=roots(PS);QH=[];
/* print(RT); */
		while(RT!=[]){
			RT0=simpalg(coef(car(RT),0,t)/coef(car(RT),1,t));
			QH=cons(t^Q0+RT0,QH);
			RT=cdr(RT);
		}
/* print(QH); */
		/* QHの各成分をtについて解く（拡大体上で解く） */
		while(QH!=[]){
			R=a_root(car(QH));
/* print(R); */
			/* Fにx=x^P[0][1],y=x^P[0][0]*(car(R)+y) を代入 */
			R0=-1*coef(car(R),0,t)/coef(car(R),1,t);
/* print(F0); */
			/* 代数的数を含む多項式の係数を有理数倍(代数的数倍?)して係数を簡略化 */
			T = simpcoef(F0); /* ptozpの代数的数版 */
			/* C = sdiv(F0,T); */
			F1=subst(T,x,x^Q0,y,x^P0*(R0+y));
			F1=simpalg(F1);
			F1=sdiv(F1,x^D);
			/* F1 *= C; */
			PP=cons(F1,PP);
			QH=cdr(QH);
		}
		L=cons(reverse(PP),L);
	}
	return reverse(L);
}
/* n_polygonの結果の簡略化 */
def simple_np(N)
{
	N1=car(N);
	R=[car(reverse(N1))[1],car(N1)[1]];
	N=cdr(N);
	while(N!=[]){
		N1=car(N);
		R=cons(car(reverse(N1))[1],R);
		N=cdr(N);
	}
	return(reverse(R));
}
/* 終了判定 Yes->1, No->breakしたときのlist No. & poly*/
/* check([f,[[2,3],[f11,0],[f12,[[4,3],[f1211,0],f1212],[[3,2],f1221]]],
            [[5,2],f21,f22,f23]]);->[[2,1,2,1],f1212] */
def check(L)
{
	L=cdr(L);L=list_num(L,[]);
	while(L!=[]){
		L0=car(L);L1=car(cdr(L0));Num=car(L0);
		if(type(L1)==2) break;
		else if(L1==0){/* 終了条件(ver.1ならL1[1]==0) */
			L=cdr(L);
		}
		else{
			L=append(list_num(cdr(L1),Num),cdr(L));
		}
	}
	if(L==[]) return(1);
	else return(L0);
}
/* 入れ子listの元の番号付け Num:previous Num list */
def list_num(L,Num)
{
	R=[];N=1;
	while(L!=[]){
		R=cons([cons(N,Num),car(L)],R);
		L=cdr(L);N=N+1;
	}
	return(reverse(R));
}
/* リストLの第N成分をFで置換 */
def change(L,N,F)
{
	L1=[];
	for(I=0;I<N;I++){
		L1=cons(car(L),L1);
		L=cdr(L);
	}
	return append(reverse(L1),cons(F,cdr(L)));
}
/* 入れ子リストLの第[i,j,k,...]成分をFで置換 */
def exchange(L,Numlist,F)
{
	while(Numlist!=[]){
		F=change(element(L,cdr(Numlist)),car(Numlist),F);
		Numlist=cdr(Numlist);
	}
	return F;
}
/* 入れ子リストLの第[k,j,i]成分L[i][j][k]を取り出す */
def element(L,N)
{
	N=reverse(N);
	while(N!=[]){
		L=L[car(N)];
		N=cdr(N);
	}
	return L;
}
/* pq-aq-bp=1 なる自然数 a(<p),b(<q) を求める */
def absol(P,Q) /* P,Q >1 */
{
	for(A=1;A<P;A++){
		B=(P*Q-A*Q-1)/P;
		if(dn(B)==1) return([A,B]);
	}
}
/* p/a の連分数展開 */
def confrac(A,B)
{
	L=[];
	while(irem(A,B)!=0){
		P=idiv(A,B);
		L=cons(P+1,L);
		T=A;
		A=B;B=B*(P+1)-T;
	}
	L=cons(A,L);
	return(L);
}
/* N個の2からなるリストの生成 */
def gene_2_list(N)
{
	L=[];
	for(I=0;I<N;I++) L=cons(2,L);
	return(L);
}
/* Puiseux Pair から dual graph を求める */
def lin_graph(PP)
{
	P=car(PP);Q=car(cdr(PP));
	if(P==1 && Q==1) return([[],1,[]]);
	if(P>1 && Q==1) return([gene_2_list(P-1),1,[]]);
	if(P==1 && Q>1) return([[],1,gene_2_list(Q-1)]);
	AB=absol(P,Q);
	A=car(AB);B=car(cdr(AB));
	DP=confrac(P,A);
	DQ=reverse(confrac(Q,B));
	return([DP,1,DQ]);
}
/* lin_graphの長さを求める */
def length_graph(G)
{
	L1=length(car(G));
	L2=length(car(reverse(G)));
	return(L1+1+L2);
}
/* グラフ[[a,b],1,[c,d,e]]のblow down */
def blowdown(G)
{
	L=car(G);R=car(reverse(G));
	if(L!=[]){
		L1=reverse(L);
		EL1=car(L1)-1;
		if(EL1!=1) L=reverse(cons(EL1,cdr(L1)));
		else L=reverse(cdr(L1));
	}
	if(R!=[]){
		ER=car(R)-1;
		if(ER!=1) R=cons(ER,cdr(R));
		else R=cdr(R);
	}
	return([L,1,R]);
}
/* 番号がついたグラフ[[[1,a],[2,b]],[3,1],[[4,c],[5,d],[6,e]]]のblowdown */
def num_blowdown(G)
{
	L=car(G);R=car(reverse(G));
	if(L!=[]){
		L1=reverse(L);C1=car(L1);
		EL1=C1[1]-1;
		if(EL1!=1) L=[reverse(cons([car(C1),EL1],cdr(L1)))];
		else L=[reverse(cdr(L1)),[car(C1),1]];
	}
	else L=[[]];
	if(R!=[]){
		C2=car(R);
		ER=C2[1]-1;
		if(ER!=1) R=[cons([car(C2),ER],cdr(R))];
		else R=[[car(C2),1],cdr(R)];
	}
	else R=[[]];
	return(append(L,R));
}
/* lin_graphに番号をつける */
def num_lin_graph(G)
{
	L=car(G);N=length(L);
	R=car(reverse(G));
	L=list_num_from(L,1);
	M=[N+1,1];
	R=list_num_from(R,N+2);
	return [L,M,R];
}
/* num_lin_graphの番号を消去 */
def del_num_lin_graph(G)
{
	L=car(G);R=car(reverse(G));
	return append([del_num_list(L)],cons(1,[del_num_list(R)]));
}
/* 番号付きリストの番号を消去 */
def del_num_list(L)
{
	R=[];
	while(L!=[]){
		R=cons(car(cdr(car(L))),R);
		L=cdr(L);
	}
	return reverse(R);
}
/* リストの番号付け（N：最初の番号）*/
def list_num_from(L,N)
{
	R=[];
	while(L!=[]){
		R=cons([N,car(L)],R);
		L=cdr(L);N=N+1;
	}
	return(reverse(R));
}
/* P_pairs (p,q),(p',q')から得られる2個の線形グラフの合成 */
/* ただし、N_polygonにおいて(p,q)に対応する辺は
　 (p',q')に対応する辺に、左からこの順で隣接しているとする */
/* ver.2 */
def compose(PP1,PP2)
{
	P1=car(PP1);Q1=car(cdr(PP1));
	P2=car(PP2);Q2=car(cdr(PP2));
	G1=lin_graph([P1,Q1]);G2=lin_graph([P2,Q2]);
	if(P1<Q1 && P2>Q2){
		H1=simple_lin_graph(G1);
/*print(H1);*/
		H2=simple_lin_graph(G2);
/*print(H2);*/
		E1=car(reverse(H1));
		E2=car(H2);
		E=E1+E2-1;
		T=append(reverse(cons(E,cdr(reverse(H1)))),cdr(H2));
	}
	else{
		return compose_graph(G1,G2);
	}
	/* 1 -> [1]に変換 */
	K=[];
	while(T!=[]){
		S=car(T);
		if(S==1) K=cons([1],K);
		else K=cons(S,K);
		T=cdr(T);
	}
	T=reverse(K);
	return T;
}
/* ２個のdual graphの合成 */
/* ver.2 */
def compose_graph(G1,G2) /* G1=[[5,2],1,[[3],2,2]] */
{
	U1=prop_graph(G1);/* U1=[5,2,[1],[3],2,2] */
	U2=prop_graph(G2);
	G1=omit_prop_trans(G1);/* G1=[[5,2],1,[3,2,2]] */
	G2=omit_prop_trans(G2);
	H1=simple_list(G1);/* H1=[5,2,1,3,2,2] */
	H2=simple_list(G2);
	F1=num_lin_graph(G1);L1=length_graph(G1);
	F2=num_lin_graph(G2);L2=length_graph(G2);
	L=L1-L2;
	/* F1とF2の長さを同じにする */
	if(L>0)	for(I=0;I<L;I++) F1=num_blowdown(F1);
	if(L<0)	for(I=0;I>L;I--) F2=num_blowdown(F2);
	/* 同じ dual graph になるまで blow down する */
	while(1){
		if(del_num_lin_graph(F1)==del_num_lin_graph(F2)) break;
		F1=num_blowdown(F1);
		F2=num_blowdown(F2);
	}
/*print(F1);print(F2);*/
	F1=simple_lin_graph(F1);
	F2=simple_lin_graph(F2);
	/* F2の最後の成分の番号LNを求める */
	LN=car(reverse(F2))[0];
	M1=0;M2=0;T=[];
		N1=F1[0][0];E1=F1[0][1];F1=cdr(F1);S1=H1[N1-1];T1=U1[N1-1];
		N2=F2[0][0];F2=cdr(F2);S2=H2[N2-1];T2=U2[N2-1];
			T=m_list_n(U1,M1+1,N1-1);
		/* 一致する頂点の自己交点数を計算し最後に追加 */
		if(S1==1 || S2==1 || S1!=T1 || S2!=T2) T=[append(T,[[S1+S2-E1]])];
		else T=[append(T,[S1+S2-E1])];
		M1=N1;M2=N2;
	while(F1!=[]){
		N1=F1[0][0];E1=F1[0][1];F1=cdr(F1);S1=H1[N1-1];T1=U1[N1-1];
		N2=F2[0][0];F2=cdr(F2);S2=H2[N2-1];T2=U2[N2-1];
		if(N2-M2>1){
			T=append(T,m_list_n(U2,M2+1,N2-1));
		}
		else{
			T=append(T,m_list_n(U1,M1+1,N1-1));
		}
		/* 一致する頂点の自己交点数を計算し最後に追加 */
		if(S1==1 || S2==1 || S1!=T1 || S2!=T2) T=append(T,[[S1+S2-E1]]);
		else T=append(T,[S1+S2-E1]);
		M1=N1;M2=N2;
	}
	T=append(T,list_n(U2,LN+1));
	/* 1 -> [1]に変換 */
	K=[];
	while(T!=[]){
		S=car(T);
		if(S==1) K=cons([1],K);
		else K=cons(S,K);
		T=cdr(T);
	}
	T=reverse(K);
	return T;
}
/* p-pairの合成（３つ以上の場合もOK） */
/* 7.24 02:00 */
def composition(L)
{
	if(length(L)==1) return prop_graph(lin_graph(car(L)));
	Flag=0;
	G1=lin_graph(car(L));
	G2=lin_graph(car(cdr(L)));
	R=compose_graph(G1,G2);
	if(non_multi_list(R)==non_multi_list(G1) || non_multi_list(R)==non_multi_list(G2)){
		G1=div_graph(append(car(R),cdr(R)));
		Flag=1;
	}
	L=cdr(L);
	while(length(L)>1){
		if(Flag!=1) G1=lin_graph(car(L));
		G2=lin_graph(car(cdr(L)));
		C=compose_graph(G1,G2);
		if(non_multi_list(C)==non_multi_list(G1) || non_multi_list(C)==non_multi_list(G2)){
			R=cons(car(R),cdr(C));
			G1=div_graph(append(car(C),cdr(C)));
			Flag=1;
		}
		else R=cons(append(car(R),cdr(car(C))),cdr(C));
		L=cdr(L);
	}
	return append(car(R),cdr(R));
}
/* lin_graphから一段目のかっこを取る */
/* [[4],1,[[2],2]] -> [4,1,[2],2] */
def simple_lin_graph(G)
{
	R=[];
	L1=G[0];L2=G[2];
	while(L1!=[]){
		R=cons(car(L1),R);
		L1=cdr(L1);
	}
	R=cons(G[1],R);
	while(L2!=[]){
		R=cons(car(L2),R);
		L2=cdr(L2);
	}
	return reverse(R);
}
/* [[4],1,[[2],2]] -> [4,[1],[2],2] */
def prop_graph(G)
{
	R=[];
	L1=G[0];L2=G[2];
	while(L1!=[]){
		R=cons(car(L1),R);
		L1=cdr(L1);
	}
	R=cons([G[1]],R);
	while(L2!=[]){
		R=cons(car(L2),R);
		L2=cdr(L2);
	}
	return reverse(R);
}
/* [4,[1],[2],2] -> [[4],1,[[2],2]] */
/* 1を中心に両側をリスト化 */
def div_graph(G)
{
	F=[];
	while(car(G)!=[1]){
		F=cons(car(G),F);
		G=cdr(G);
	}
	return(append([reverse(F)],cons(1,[cdr(G)])));
}
/* リスト中の（一段）カッコをはずす */
/* [5,2,[1,4],3,2,2] -> [5,2,1,4,3,2,2] */
def simple_list(L)
{
	R=[];
	while(L!=[]){
		T=car(L);
		if(type(T)==4){
			while(T!=[]){
				R=cons(car(T),R);
				T=cdr(T);
			}
		}
		else R=cons(car(L),R);
		L=cdr(L);
	}
	return reverse(R);
}
/* [[5,2],1,[[3],2,2]] -> [[5,2],1,[3,2,2]] */
def omit_prop_trans(L)
{
	return append([simple_list(L[0])],cons(1,[simple_list(L[2])]));
}
/* p_pair(F)から得られたリストから1段目の合成リストを作る */
/* ver.12.2 2:00 */
/* dual_aux(L,C): L=p_pair(P)で得られたリスト,C=前段にぶら下がるの分枝の数
   ---> [dual_graph,[各分枝に対応する未処理リスト],分枝の数] */
def dual_aux(L,C)
{
	L=cdr(L);
	if(car(L)==0) return(["*",[],C]);
	P=[];N=[];B=[];
	while(L!=[]){
		T=car(L);
		/* p-pairのリスト */
		P=cons(T[0],P);
		/* 未処理リストをリスト化 */
		B=append(B,cdr(T));
		/* dual graphで分岐する所の自己交点数Mを求める */
		T1=cdr(T);M=0;
		while(T1!=[]){
			if(T1[0][1]!=0){
				/* ぶら下がる枝が*でなければ1増える */
				M=M+1;
				/* さらにPuisuex Pair が (1,q) の時も1増える */
				if(T1[0][1][0][0]==1) M=M+1;
			}
			T1=cdr(T1);
		}
		/* [*の数,次の分枝の数]のリスト */
		N=cons([M,length(T)-1],N);
		L=cdr(L);
	}
	R=composition(reverse(P));
	B=list_num_from(B,C+1);
	N=reverse(N);
	/* dual graph の表示 */
	D=[];
	while(R!=[]){
		T=car(R);
		if(type(T)!=4) D=cons(T,D);
		else{
			D=cons(cons(T[0]+car(N)[0],gene_branch(car(N)[1],C)),D);
			C=C+car(N)[1];
			N=cdr(N);
		}
		R=cdr(R);
	}
	return [reverse(D),B,C];
}
/* 番号付きのN個の分枝の生成（番号はC+1から）*/
def gene_branch(N,C)
{
	R=[];
	for(I==0;I<N;I++){
		R=cons(rtostr(b)+rtostr(C+I+1),R);
	}
	return reverse(R);
}
/* generate of dual graph : main function */
/* 入力多項式Pは整数係数とする
   (最初の無平方分解による重複因子のチェックが煩雑になるため) */
/* ver.2000.5.6 */
def dual_graph(P)
{
	/* Step1 */
	/* 無平方分解で重複因子を除く */
	SQ=asq(P);P=1;SQ=cdr(SQ);
	while(SQ!=[]){
		if(SQ[0][0]!=x && SQ[0][0]!=y) P=P*SQ[0][0];
		SQ=cdr(SQ);
	}
print("*** Newton Polygon ***");
	L=p_pair(P);
print("***** Dual Graph *****");
	D=dual_aux(L,0);
	print(D[0]);
	M=D[2];
	L=D[1];
/*print(L);*/
	/* Step2 */
	while(L!=[]){
		D=dual_aux(car(L)[1],M);RL=cdr(L);
		H=rtostr("b")+rtostr(car(L)[0])+rtostr(":")+rtostr(D[0]);
		print(H);
		if(D[2]!=M){
			M=D[2];
			L=append(D[1],RL);
		}
		else L=RL;
/*print(L);*/
	}
	return(1);
}
end$;
