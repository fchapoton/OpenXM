/* -*- mode: C -*- */
/* $OpenXM$ */
/* beta-nbc-asir/igraph */

/* This program generates the incidence graph for a given arrangement.

   The data structure of incidence graphs of arrangements as follws:
   [ (A list of the intersections with rank $m$), 
     (A list of the intersections with rank $m-1$), 
     ...,
     (A list of the intersections with rank $1$) ],
   where $m$ is the rank of a given arrangement.
   An intersection with rank $k$ is expressed as the set of its supporting
   hyperplanes. 

   The data structure of arrangements as follows:
   [ (A list of linear forms), (A list of indefinite) ].

   Remark.
   This program run under the following assumption derived from 
   the Groebner bases package of ``Asir'':
   The variables which are not included the list of indeterminates
   have ``generic'' value.  

   For example, we assume that z is not equal to 0 with respect to the
   arrangement [ [s, t, s+t-z], [s,t] ].
 */

load("sets")$
load("gr")$

#define rankPart(X) ((X)[0])
#define setPart(X) ((X)[1])

#define hpPart(X) ((X)[0])
#define varPart(X) ((X)[1])

/* cf. List = [1,2,3,...] */
def igraph_static_xlateSet2HSet(Set, Hyperplanes) {
  HSet = [];
  Len = length(Set);
  for (I = 0; I < Len; I++) {
    HSet = cons(Hyperplanes[Set[I]-1], HSet);
  }
  return HSet;
}

/* This function use Groebner package. */
def igraph_static_getRankOfSet(Set, Arrangement) {
  Variables   = varPart(Arrangement);
  HSet = igraph_static_xlateSet2HSet(Set, hpPart(Arrangement));
  GBasis = gr(HSet, Variables, 0);
  if (length(GBasis) == 1 && dp_td(dp_ptod(car(GBasis), Variables)) == 0) {
    /* GBasis is near equal to [1] */
    return 0;
  }
  return length(GBasis);
}
def igraph_static_xlateSListsWithRank(SLists, Arrangement) {
  SListsWithRank = [];
  while((Set = car(SLists)) != []) {
    Rank = igraph_static_getRankOfSet(Set, Arrangement);
    if(Rank != 0) {
      SListsWithRank = cons([Rank,Set], SListsWithRank);
    }
    SLists = cdr(SLists);
  }
  return SListsWithRank;
}

def igraph_static_getIntersectionsList(Arrangement) {
  /* HSize is number of hyperplanes. */
  HSize = length(hpPart(Arrangement));
  RevASLists = reverse(sets_getAllSortedLists(HSize));
  X = [];
  while((SLists = car(RevASLists)) != []) {
    SListsWithRank = igraph_static_xlateSListsWithRank(SLists, Arrangement);
    if (SListsWithRank == []) {
      return X;
    }
    X = append(SListsWithRank, X);
    RevASLists = cdr(RevASLists);
  }
  return X;
}

/* generate an incidence graph */
def igraph_getIGraph(Arrangement) {
  MaxRank = length(varPart(Arrangement));
  RevIGraph = [];
  for (I = 0; I < MaxRank; I++) {
    RevIGraph = cons([], RevIGraph);
  }
  IList = igraph_static_getIntersectionsList(Arrangement);
  while((Int = car(IList)) != []) {
    R = rankPart(Int) -1 ;  
    X = RevIGraph[R];
    if (!sets_subset_of_subset_p(setPart(Int), X)) {
      RevIGraph = sets_listSetObject(RevIGraph, cons(setPart(Int), X), R);
    }
    IList = cdr(IList);
  }
  return reverse(RevIGraph);
}

end$
