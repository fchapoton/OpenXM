/* $OpenXM: OpenXM/src/asir-contrib/packages/src/taka_poly.rr,v 1.7 2001/08/21 11:27:16 takayama Exp $ */
#include "tags.h"

def taka_poly_solve_poly1(F,V) {
  if (type(F) == 3) { /* Rational */
    G = dn(F); 
    if (deg(G,V) != 0) {
      return quote(root_of(F));
    }
  }
  Ans = [ ] ;
  G = nm(F);
  F = fctr(G);
  N = length(F);
  for (I=0; I<N; I++) {
    if (deg(F[I][0],V) == 0) {
    }else if (deg(F[I][0],V) == 1) {
       Sol = red( -coef(F[I][0],0,V)/coef(F[I][0],1,V) );
       for (J=0; J<F[I][1]; J++) {
         Ans = append(Ans,[ Sol ]);
       }
    }else {
       /* Sol = quote(root_of( F[I][0] )); */
       Sol = F[I][0];
       for (J=0; J<F[I][1]; J++) {
         Ans = append(Ans,[ Sol ]);
       }
    }
  }
  return Ans;
}

def taka_poly_solve_linear(Z,X) {
  Size_Z = length(Z);
  Sol = [ ];
  F = [];
  for (I = 0; I < Size_Z; I++) {
    if (Z[I] != 0) {
      if (type(Z[I]) == 3) {
        F = append(F,[ nm(red(Z[I])) ]);
      }else{
        F = append(F, [Z[I]]);
      }
    }
  }

  if (F == []) {
    return Sol;
  }

  G = gr(F, reverse(X), 2);

  if (G[0] == 1 || G[0] == -1) {
    return [];
  }

  Sol = newvect(length(X));
  N = 0;
  for (I = 0; I < length(G); I++) {
    for (J = length(X) - 1; J >= 0; J--) {
      Nm = nm(G[I]); Dn = dn(G[I]);
      if (coef(Nm, 1, X[J]) != 0) {
        Sol[J] = [X[J], X[J] - Nm/coef(Nm, 1, X[J])];
        N++;
        break;
      }
    }
  }
  Sol2 = newvect(N);
  I = 0;
  for (J=0; J<size(Sol)[0]; J++) {
    if (Sol[J] == 0) {
    }else{
       Sol2[I] = Sol[J]; I++;
    }
  }
  return vtol(Sol2);
}

def taka_poly_factor(S) {
  if (type(S) == LIST || type(S) == MATRIX || type(S) == VECTOR) {
    return( map(taka_poly_factor,S) );
  }
  if (type(S) == RPOLYNOMIAL) {
     S1 = new_poly_factored_polynomial();
     S1->F = fctr(S);
     return S1;
  }
  if (type(S) == RATIONAL) {
     NN = nm(S); DD = dn(S);
     NN = taka_poly_factor(NN);
     DD = taka_poly_factor(DD);
     S = new_poly_factored_rational();
     S->Numerator = NN;
     S->Denominator = DD;
     return S;
  }
  /* It has not yet been implemented. */
  return S;
}

/* 
  printing method for POLY_FACTORED_FORM 
*/
def taka_poly_tex_form_poly_factored_polynomial(S) {
  return taka_tex_form_quote( quote_factored_form_to_quote(S));
}
def taka_poly_terminal_form_poly_factored_polynomial(S) {
  A="{";
  A += "F->";
  A += print_terminal_form(S->F);
  A += "}";
  return A;
}
def taka_poly_terminal_form_poly_factored_rational(S) {
  A="{";
  A += "Numerator->";
  A += print_terminal_form(S->Numerator);
  A += ", Denominator->";
  A += print_terminal_form(S->Denominator);
  A += "}";
  return A;
}
def taka_poly_input_form_poly_factored_polynomial(S) {
  A="new__poly_factored_polynomial(";
  A += print_input_form(S->F);
  A += ")";
  return A;
}
def taka_poly_input_form_poly_factored_rational(S) {
  A="new__poly_factored_rational(";
  A += print_input_form(S->Numerator);
  A += ",";
  A += print_input_form(S->Denominator);
  A += ")";
  return A;
}


/*
  taka_poly_elimination_ideal(I,V,VV|grobner_basis=yes);
*/
def taka_poly_elimination_ideal(I,V,VV) {
  Gb = getopt(grobner_basis);
  if (type(Gb) == -1) {
    Gb = 0;
  }else{
    Gb = 1;
  } 
  if (!Gb) {
     V2 = base_set_minus(V,VV);
     V2 = append(V2,VV);
     /* Computing a lexicographic GB. */
     I = gr(I,V2,2);
  }
  S = map(taka_poly_elimination_poly,I,V,VV);
  S = base_prune(0,S);
  return S;
}

def taka_poly_elimination_poly(F,V,VV) {
  U = vars(F);
  U = base_intersection(U,V);
  if (base_subsetq(U,VV)) {
     return F;
  }else{
     return 0;
  }
}

/*
  taka_poly_weight_vector(W,V) returns "order".
  cf. dp_ord().
  Example:
  taka_poly_weight_vector([1,0,0],[x,y,z]);
  taka_poly_weight_vector([[1,1,1],[1,-1,0]],[x,y,z]);
  taka_poly_weight_vector([x,1,y,1],[x,y,z]);
*/
def taka_poly_weight_vector(W,V) {
  if (type(W) == VECTOR || type(W) == MATRIX) {
     W = omatrix_mtol(W);
  }else if (type(W) == NUMBER || type(W) == 0) {
     return W;
  }    
  if (type(W[0]) == LIST) {
    return taka_poly_weight_vectors(W,V);
  }else{
    return taka_poly_weight_vector1(W,V);
  }
  error("Invalid argument for taka_poly_weight_vector");
}

def taka_poly_weight_vector1(W,V) {
  WW = taka_poly_weight_vector_parse(W,V);
  N = length(V);
  WW = newmat(N+1,N,[WW]);
  for (I=1; I<N+1; I++) {
    WW[I][N-I] = -1;
  }
  return WW;
}

def taka_poly_weight_vectors(W,V) {
  L = length(W);
  WW = [ ];
  for (I=0; I<L; I++) {
    WW = append(WW,[taka_poly_weight_vector_parse(W[I],V)]);
  }
  N = length(V);
  M = N+L;
  WW = newmat(M,N,WW);
  J = 1;
  for (I=L; I<M; I++) {
    WW[I][N-J] = -1; J++;
  }
  return WW;
}

/* w = [1,0,0,1], or [x,1,y,1] */
def taka_poly_weight_vector_parse(W,V) {
  N = length(V);
  M = length(W);
  Ans = newvect(N);
  Type = 0;
  for (I=0; I<M; I++) {
    if (type(W[I]) == STRING) {
      W[I] = eval_str(W[I]);
    }
    if (type(W[I]) == RPOLYNOMIAL) {
       Type = 1;
       K = base_position(W[I],V);
       if (K >=0 && K < N) {
          Ans[K] = W[I+1];
       }else{
         print("W=",0); print(W);
         print("V=",0); print(V);
         error("weight vector format error.");
       }
    }else if (!Type) {
       if (N != M) {
         error("weight vector format error.");
         print("W=",0); print(W);
         print("V=",0); print(V);
       }
       Ans[I] = W[I];
    }
  }
  return vtol(Ans);
}

Taka_poly_loaded = 1$
end$


