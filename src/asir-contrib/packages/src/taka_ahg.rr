/* $OpenXM: OpenXM/src/asir-contrib/packages/src/taka_ahg.rr,v 1.3 2003/12/11 01:52:53 takayama Exp $ */

module taka_ahg;

/* ------------ list of local functions ---------- */
localf b$
localf bb$
localf toPrimitive$
localf toPrimitive2$
localf gcd_L$

def gcd_L(L) {
  if (length(L) == 0) return(0);
  return igcd(L[0],gcd_L(cdr(L)));
}

def toPrimitive(A,F) {
/*  A set of points, F is a set of facets. */
  Nfacets = length(F);
  NewF = [ ];
  V=[]; Sign = 1;
  for (I=0; I<Nfacets; I++) {
    for (J=0; J<length(A); J++) {
      Ip = matrix_inner_product(A[J],F[I]);
      if ((Sign == -1) && (Ip > 0)) error("isPrimitive: broken facet data.");
      if (Ip < 0) { Sign = -1; }
      Ip = Sign*Ip;
      if (Ip != 0) V = cons(Ip,V);
    }
    if (length(V) == 0) G = 1; else G = gcd_L(V);
    if (G != 1) {
      FF=vtol(newvect(length(F[I]),F[I])/G);
    }else FF=F[I];
    NewF = cons(FF,NewF);
  }
  return reverse(NewF);
}

def toPrimitive2(A,F) {
/*  A : a point, F is a set of facets */
  Nfacets = length(F);
  V=[]; Sign = 1;
  for (I=0; I<Nfacets; I++) {
    Ip = matrix_inner_product(A,F[I]);
    if ((Sign == -1) && (Ip > 0)) error("isPrimitive2: broken facet data.");
    if (Ip < 0) { Sign = -1; }
    Ip = Sign*Ip;
    if (Ip != 0) V = cons(Ip,V);
  }
  NewF = [ ];
  if (length(V) == 0) G=1; else G = gcd_L(V);
  if (Sign < 0) G = -G;
  if (G != 1) {
    for (I=0; I<Nfacets; I++) {
      FF=vtol(newvect(length(F[I]),F[I])/G);
      NewF = cons(FF,NewF);
    }
  }else return(F);
  return reverse(NewF);
}

def b(A,Idx,V) {
  F = oxshell.facets(A);
  if (A != F[0]) error("b: points are sorted. Not implemented in this case.");
  F = F[1];

  P = A[Idx];

  Nfacets = length(F);
   
  /* to primitive */
  F = toPrimitive2(P,F);
  Bf = 1;
  for (I=0; I<Nfacets; I++) {
    H = matrix_inner_product(P,F[I]);
    if (H != 0) {
      B = matrix_inner_product(F[I],V);
      for (J=0; J<H; J++) {
        Bf = Bf*(B-J);  /* See Paper3/ip/ip2/hg.dvi [SST; compositio] */
      }
    }
  } 
  return(Bf);
}
/* bb is almost idential with b. A is transposed. */
def bb(A,Idx,V) {
  A = matrix_transpose(A);
  A = matrix_matrix_to_list(A);

  F = oxshell.facets(A);
  if (A != F[0]) error("bb: points are sorted. Not implemented in this case.");
  F = F[1];

  P = A[Idx];

  Nfacets = length(F);
   
  /* to primitive */
  F = toPrimitive2(P,F);
  Bf = 1;
  for (I=0; I<Nfacets; I++) {
    H = matrix_inner_product(P,F[I]);
    if (H != 0) {
      B = matrix_inner_product(F[I],V);
      for (J=0; J<H; J++) {
        Bf = Bf*(B-J);  /* See Paper3/ip/ip2/hg.dvi [SST; compositio] */
      }
    }
  } 
  return(Bf);
}

endmodule$

Loaded_taka_ahg=1$

def test() {
 A=[[1,0,0],[1,1,0],[1,0,1],[1,1,1],[1,2,0]];
 print("A="); print(A); 
 print("P=",0); print(0);
 print(fctr(taka_ahg.b(A,0,[s1,s2,s3])));

 print("P=",0); print(3);
 print(fctr(taka_ahg.b(A,3,[s1,s2,s3])));

 print("P=",0); print(4);
 print(fctr(taka_ahg.b(A,4,[s1,s2,s3])));

}

end$
