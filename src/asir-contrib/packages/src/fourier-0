/*  $OpenXM: OpenXM/src/asir-contrib/packages/src/fourier-0,v 1.1.1.1 1999/11/27 11:25:18 takayama Exp $  */
/* 
   Name: fourier-0
   Category: Education
   Subject: Signal Analysis. Digital Consine transformation.
   Main: asir.  Plugin: ox_sm1_gnuplot
   Documents: 
   See also: ~taka/this/Joho/fourier.c
*/
/*
   Sample Log:
      load("xm");
      gnuplot_start();
      load("./fourier-0");
      plotFourier_cos(2);  Displays graphs of the fourier transform of
                           cos(2*X) and the original cos(2*X).
      Change the value of NS. Then, you may get a better approximation.
      For example, compare NS=8 and NS=32.
      NS=8 is used in JPEG.
*/
if (ox_getenv("LANG") == "ja_JP.ujis") {
  print("使用例 1:")$
  print("load(\"xm\")$")$
  print("gnuplot_start()$")$
  print("plotFourier_cos(2)$ --- cos(2*X) の fourier 展開の近似と cos(2*X) を表示")$
/*  print("NS = 8 であるが, この値を変えると fourier 展開の係数の計算の数値積分をよりこまかい mesh でおこなう.")$ */
}else{
  print("Example 1:")$
  print("load(\"xm\")$")$
  print("gnuplot_start()$")$
  print("plotFourier_cos(2)$ --- cos(2*X) の fourier 展開の近似と cos(2*X) を表示")$
}$


#define USE_GNU_PLOT 
/*
     F(x) = \sum_{k=1}^\infty a_k cos(k x).
     \frac{\pi}{2} a_k = \int_{0}^\pi F(x) cos(k x) dx
     a_0 = \int_{0}^\pi F(x) dx

     fourier(N,F) computes a_N for the rational N.
     fourier_cos_kx(N,K) computes a_N for cos(K*X).
*/

#define NS  8  /* Number of segment. [0,@pi] is divided into NS segments. */

/* N : number, F : Rational */
/*                You cannot use sin and cos in F. */
def fourier(N,F) {
  Sum = 0;
  for (I=0; I<NS; I++) {
    Sum = Sum+eval(subst(F,x,@pi*I/NS))*eval(cos(@pi*I*N/NS))*eval(@pi/NS);
  }
  if (N != 0) return(Sum*2/eval(@pi));
  else return(Sum/eval(@pi));
}

def invFourier(X,Table) {
  N = length(Table);
  Sum = 0;
  for (I=0; I<N; I++) {
    Sum = Sum+eval(Table[I]*cos(I*X));
  }
  return(Sum);
}


def fourier_cos_kx(N,K) {
  Sum = 0;
  for (I=0; I<NS; I++) {
    Sum = Sum+eval(cos(K*@pi*I/NS))*eval(cos(@pi*I*N/NS))*eval(@pi/NS);
  }
  if (N != 0) return(Sum*2/eval(@pi));
  else return(Sum);
}

/* Fourier expansion of cos(K*X) */
def plotFourier_cos(K) {
#ifdef USE_GNU_PLOT
  gnuplot_plotDots(0,[ ],0);
#endif
  G = [ ];
  Fcoeff = map(fourier_cos_kx,[0,1,2,3,4,5,6,7,8],K);
  print("Fourier coefficients : [a_0, a_1, ..., a_9] ------------------")$
  print(Fcoeff)$
  for (I=0; I<NS; I++) {
     X = eval(I*@pi/NS);
     G = append(G,[ [X,invFourier(X,Fcoeff)]]);
  }
  print("Values of \sum a_k cos(k*X) : [[x,value at x], ...] ----------")$
  print(G);
#ifdef USE_GNU_PLOT
  gnuplot_plotDots(0,G,"lines");
  /*BUG: rtostr cannot convert bigfloat to a string.*/
#endif
  G2 = [ ];
  for (I=0; I<NS; I++) {
     X = eval(I*@pi/NS);
     G2 = append(G2,[ [X,eval(cos(K*X))]]);
  }
  print("Values of cos(P*X) : [[x,value at x], ...] ------------------")$
  print(G2);
#ifdef USE_GNU_PLOT
  gnuplot_plotDots(0,[ ],0);
  gnuplot_plotDots(0,G2,"lines"); 
#endif
  G3 = [ ];
  for (I=0; I<NS; I++) {
     G3 = append(G3,[G[I][1]-G2[I][1]]);
  }
  print("The difference of y values.   -------------------------------")$
  print(G3);
}


end$
