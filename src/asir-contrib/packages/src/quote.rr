/* $OpenXM: OpenXM/src/asir-contrib/packages/src/quote.rr,v 1.23 2021/03/11 06:14:57 takayama Exp $ */
#include "tags.h"

/* Functions for asir quote object. */

def quote_to_quote(S) {
  if (type(S) == QUOTE) return S;
  else if (type(S) == LIST || type(S) == VECTOR || type(X) == MATRIX) {
    S = map(quote_to_quote,S);
  }else {
    /* return eval_str("quote("+rtostr(S)+")"); */
    return objtoquote(S);
  }
}
/* Inverse of quote_to_obj */

def quote_new(S) {
  return( quote_to_quote(S) );
}


/* Tentative */
def quote_factor(S) {
  A = poly_factor(S);
  return quote_factored_form_to_quote(A);
}
/* Tentative code */
def quote_factored_form_to_quote(S) {
  if (type(S) == QUOTE) return S;
  if (type(S) == STRUCT)  {
    /* And we need to check it is struct poly_factored_... */
    if (struct_type(S) == struct_type("poly_factored_polynomial")) {
       return quote_factored_list_to_quote(S->F);
    }else if (struct_type(S) == struct_type("poly_factored_rational")) {
       return quote_factored_form_to_quote(S->Numerator)/
              quote_factored_form_to_quote(S->Denominator);
    }else{
      return quote_to_quote(S);
    }
  }
  return quote_to_quote(S);
}

/* S is assumed to be the return value of fctr */
def quote_factored_list_to_quote(S) {
  Ans = 0;
  N = length(S);
  if (N == 1 && S[0][0] == 1 && S[0][1] == 1) {
    return quote(1);
  }
  for (I=0; I<N; I++) {
    A = "quote(";
    T = S[I];
    if (T[1] == 1) {
      if (T[0] != 1) {
        A += "("+rtostr(T[0])+")";
      }
    }else{
      A += "("+rtostr(T[0])+")^"+rtostr(T[1]);
    }
    A += ")";
    /* print (A); */
    if (T[1] == 1 && T[0] == 1) {
    }else{
      if (type(Ans) == 0) {
         Ans = eval_str(A);
      }else{
         Ans = Ans * eval_str(A);
      }
    }
  }
  return Ans;
}

def quote_sort_polynomial(F,V,W) {
  if (type(F) != RPOLYNOMIAL) return quote_to_quote(F);
  return quote_sort_polynomial2(F,V,W,-1);
}

/*
   V : list of variables.
   W : weight vector or order number.
   TermN : number of max terms.
*/
def quote_sort_polynomial2(F,V,W,TermN) {
  if (type(F) == RATIONAL) {
    A = quote_sort_polynomial2(nm(F),V,W,TermN);
    B = quote_sort_polynomial2(dn(F),V,W,TermN);
    return(A/B);
  }
  if ((type(F) == LIST) || (type(F)==VECTOR) || (type(F)==MATRIX)) {
    return map(quote_sort_polynomial2,F,V,W,TermN);
  }
  if (type(F) == QUOTE) {
    qt_set_ord(V); qt_set_weight(taka_poly_weight_list2(V,W));
    return qt_normalize(F,1);
    /* Bug: Commutative rules have not been set. */
    /* Todo: TermN is ignored. */
  }
  if (type(F) == DPOLYNOMIAL) {
  } else if (type(F) == RPOLYNOMIAL) {
    dp_ord(taka_poly_weight_vector(W,V));
    F = dp_ptod(F,V);
  } else {
    return quote_to_quote(F);
  }

  if (F != 0) {
    Ans="";
  }else{
    Ans=quote(0); return Ans;
  }
  C = 0; TN = 0;
  while (F != 0) {
     G = dp_hm(F);
     F = dp_rest(F);
     TN++;

     HC = "("+rtostr(dp_hc(G))+")"; 
     HT = rtostr(dp_dtop(dp_ht(G),V));
     if (HT != 1) {
       if (HC == "(1)") {
         HC = quote_to_quote(HT);
       }else{
         HC = quote_to_quote(HC+"*"+HT);
       }
     }else{
       HC = quote_to_quote(HC);
     }
     if (C == 0) {
         Ans = HC;
     }else{
        Ans = Ans + HC;
     }
     if (C == 0) C = 1;

     /* Truncation */
     if (TermN > 0) {
       if ((TN >= TermN) && (F != 0)) {
         Ans += quote_to_quote(rtostr(uc())); break;
       } 
     }

  }
  return Ans;
}

def taka_quote_sort(F) {
  Opt = getopt();
  if (type(Opt) == -1) {
    V=vars(F);
    W=0;
    TermN = -1;
  }else {
    V=getopt(v); W=getopt(w); TermN=getopt(truncate);
    if (type(V) == -1) V=vars(F);
    if (type(W) == -1) W=0;
    if (type(TermN) == -1) TermN = -1;
  }
  return quote_sort_polynomial2(F,V,W,TermN);
}

def quote_terminal_form(S) {
  if (type(S) != QUOTE) return rtostr(S);
  T = quotetolist(S);
  return quote_input_form_quote_list(T);
}

def quote_input_form(S) {
  if (type(S) != QUOTE) return rtostr(S);
  T = quotetolist(S);
  return ("quote("+quote_input_form_quote_list(T)+")");  
}

def quote_input_form_quote_list(S) {
  if (S[0] == "u_op") {
     return quote_input_form_quote_list_u_op(cdr(S));
  }else if (S[0] == "b_op") {
     return quote_input_form_quote_list_b_op(cdr(S));
  }else if (S[0] == "t_op") {
     return quote_input_form_quote_list_t_op(cdr(S));
  }else if (S[0] == "list") {
     return quote_input_form_quote_list_list(cdr(S));
  }else if (S[0] == "internal") {
     return quote_input_form_quote_list_internal(cdr(S));
  }else if (S[0] == "variable") {
     return quote_input_form_quote_list_variable(cdr(S));
  }else if (S[0] == "function") {
    if (S[1] == "exponent_vector") {
      return quote_input_form_quote_list_exponent_vector(cdr(cdr(S)));
    }else{
      return quote_input_form_quote_list_function(cdr(S));
    }
  }else if (S[0] == "n_op") {
     return quote_input_form_quote_list_b_op(cdr(S));
  }else if (S[0] == "derivative") {
     R=sprintf("%a{%a}(%a)",S[1],quote_input_form_quote_list_args(cdr(S[3])),
	       quote_input_form_quote_list_args(cdr(S[2])));
     return R;
  }else {
     error("Unknown quote format.");
  }
}

def quote_operator_order(S) {
  if (S=="internal") return 30;
  if (S=="function") return 30;
  if (S=="derivative") return 30;
  if (S=="()") return 30;
  if (S=="^") return 20;
  if (S=="*") return 20;
  if (S=="/") return 20;
  if (S=="%") return 20;
  if (S=="+") return 10;
  if (S=="-") return 10;
  return -1;
}
def quote_weaker_op(S1,S2) { // S1 is weaker than S2, e.g., + is weaker than *
  Pos1=quote_operator_order(S1);
  Pos2=quote_operator_order(S2);
//  printf("[Pos1,Pos2]=%a\n",[Pos1,Pos2]);
  if ((Pos1 < 0) || (Pos2 < 0)) return 0;
  return (Pos1 <= Pos2);
}
def quote_weaker(S,L) {
//  printf("%a is weaker than %a?\n",S,L);
  if (L[0]=="b_op") {
    return quote_weaker_op(S,L[1]);  
  }else if (L[0]=="internal") {
    return 1;
  }else if (L[0]=="derivative") {
    return 1;
  }
  return 0;
}
def quote_input_form_quote_list_u_op(S) {
  A="";
  if (S[0] == "()") {
    A += "(";
    A += quote_input_form_quote_list(S[1]);
    A += ")";
  }else{
    A += S[0];
    if (quote_weaker(S[0],cdr(S))) {
      A += quote_input_form_quote_list(S[1]);
    }else{
      A += "(";
      A += quote_input_form_quote_list(S[1]);
      A += ")";
    }
  }
  return A;
}

def quote_is_internal_zero(S) {
  if (type(S) != LIST) return 0;
  if (length(S) != 2) return 0;
  if (S[0] == "internal" && S[1] == 0) return 1;
  else return 0;
}
def quote_input_form_quote_list_b_op(S) {
  A="";
  if (S[0] == "-") {
    T = cdr(S);
    N = length(T);
    for (I=0; I<N; I++) {
      if (I == 0 && quote_is_internal_zero(T[I])) {
         /* Do not print 0. */
      } else {
         A += quote_input_form_quote_list(T[I]);
      }
      if (I != N-1) A += S[0];
    }
  } else if ( S[0] == "^" ) {
    T = cdr(S);
    A += quote_input_form_quote_list(T[0]);
    Exp = T[1];
    if ( Exp[0] == "internal" ) {
      /* Exp must be a number or an indeterminate */
      A += "^"+quote_input_form_quote_list(Exp);
    } else {
      A += "^("+quote_input_form_quote_list(Exp)+")";
    }
  }else {
     T = cdr(S);
     N = length(T);
     for (I=0; I<N; I++) {
       if (quote_weaker(S[0],T[I])) { 
	 A += quote_input_form_quote_list(T[I]);
       }else{
	 A += "(";
	 A += quote_input_form_quote_list(T[I]);
         A += ")";
       }
       if (I != N-1) A += S[0];
     }
  }
  return A;
}

def quote_input_form_list_t_op(S) {
  NOT_YET ;
}

def quote_input_form_quote_list_exponent_vector(S) {
    T = S;
    A = " <<";
    N = length(T);
    for (I=0; I<N; I++) {
      A += quote_input_form_quote_list(T[I]);
      if (I != N-1) {
        A += ", ";
      }
    }
    A += ">>";
    return A;
}

def quote_input_form_quote_list_list(S) {
    T = S;
    A = " [ ";
    N = length(T);
    for (I=0; I<N; I++) {
      A += quote_input_form_quote_list(T[I]);
      if (I != N-1) {
        A += ", ";
      }
    }
    A += "]";
    return A;
}
def quote_input_form_quote_list_args(S) {
    T = S;
    A = "";
    N = length(T);
    for (I=0; I<N; I++) {
      A += quote_input_form_quote_list(T[I]);
      if (I != N-1) {
        A += ", ";
      }
    }
    return A;
}


def quote_input_form_quote_list_function(S) {
    A = "";
    A += S[0];
    A += "(";
    T = cdr(S);
    N = length(T);
    for (I=0; I<N; I++) {
      A += quote_input_form_quote_list(T[I]);
      if (I != N-1) {
        A += ", ";
      }
    }
    A += ")";
    return(A);
}

def quote_input_form_quote_list_internal(S) {
  return rtostr(car(S));
}

def quote_input_form_quote_list_variable(S) {
  if (type(S[0]) == STRING) return S[0];
  else return rtostr(S[0]);
}

/*  test data
   quote_input_form(quote(1+2));
   quote_input_form(quote(-1));
   quote_input_form(quote(x+1/2*y));
   quote_input_form(quote_to_quote(-(x-1/3*y)^3));
   quote_input_form(quote( (sin(x)+y)/(x-y) ));
   quote_input_form(quote([[1,2],[x-10,1/y]]));
   quote_input_form(quote(newmat(2,2,[[1,2],[1/x,exp(x)]])));
*/

/* Replace X by A in F.
   x must be indeterminate.
   A must be quotelist.
*/ 
def quote_replace(F,X,A) {
  NoBracket = 0;
  if (type(F) == QUOTE) {
    F = quotetolist(F);
  }
  if (type(A) != LIST) {
    A = quotetolist(A);
  }
  if (length(A) == 2) {
    if (A[0] == "internal") 
       NoBracket = 1;
  }
  B = quote_replace_(F,X,A,NoBracket);
  return eval_str("quote("+quote_input_form_quote_list(B)+")");
}

def quote_replace_(F,X,A,NoBracket) {
  P = car(F);
  Q = cdr(F);
  if (type(P) == STRING) {
    if (P == "internal" && type(Q[0]) == RPOLYNOMIAL) {
      if (Q[0] == X) {
        if (NoBracket) {
          return A;
        }else {
          return(["u_op","()",A]);
        }
      }
    }else if (P == "function" && type(Q[0]) == STRING && A[0] == "internal") {
      if (Q[0] == rtostr(X)) {
        return cons("function", cons(rtostr(A[1]), quote_replace_(cdr(Q),X,A,NoBracket)));
      }
    }
  }else if (type(P) == LIST) {
    if (P != []) {
      P = quote_replace_(P,X,A,NoBracket);
    }
  }
  if (Q != []) {
    return cons(P,quote_replace_(Q,X,A,NoBracket));
  }else{
    return cons(P,Q);
  }
}

def quote_replace_by_rule(S,Rule) {
  if(type(S) != QUOTE || type(Rule) != LIST) return S;
  N=length(Rule);
  for(I=0; I<N; I++) {
    if( type(Rule[I][1]) == QUOTE ) {
      S=quote_replace(S,Rule[I][0],Rule[I][1]);
    }
  }
  return S;
}

/* Test data.
 F=quote( (x+1)^3+3*x );
 A=quote(1/y);
 quote_replace(F,x,A);
*/

/* Inverse of quote_to_quote */
def quote_to_obj(Ob) {
  if (type(Ob) == QUOTE) return eval_quote(Ob);
  else if (type(Ob) == LIST) map(quote_to_obj,Ob);
  /* bug: the case of matrix, vect, struct */
  else return  Ob;
}


end$
