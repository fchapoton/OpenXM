/* $OpenXM: OpenXM/src/asir-contrib/packages/src/quote.rr,v 1.2 2001/08/21 08:03:01 takayama Exp $ */
#define NUMBER 1
#define RPOLYNOMIAL 2
#define RATIONAL 3
#define LIST 4
#define VECTOR 5
#define MATRIX 6
#define STRING 7
#define STRUCT 8
#define DPOLYNOMIAL   9
#define QUOTE 17

/* Functions for asir quote object. */

def quote_to_quote(S) {
  if (type(S) == QUOTE) return S;
  else {
    return eval_str("quote("+rtostr(S)+")");
  }
}


/* Tentative */
def quote_factor(S) {
  A = poly_factor(S);
  return quote_factored_form_to_quote(A);
}
/* Tentative code */
def quote_factored_form_to_quote(S) {
  if (type(S) == QUOTE) return S;
  if (type(S) == STRUCT)  {
    /* And we need to check it is struct poly_factored_... */
    if (S->Tag == "poly_factored_polynomial") {
       return quote_factored_list_to_quote(S->F);
    }else if (S->Tag == "poly_factored_rational") {
       return quote_factored_form_to_quote(S->Numerator)/
              quote_factored_form_to_quote(S->Denominator);
    }else{
      return quote_to_quote(S);
    }
  }
  return quote_to_quote(S);
}

/* S is assumed to be the return value of fctr */
def quote_factored_list_to_quote(S) {
  Ans = 0;
  N = length(S);
  if (N == 1 && S[0][0] == 1 && S[0][1] == 1) {
    return quote(1);
  }
  for (I=0; I<N; I++) {
    A = "quote(";
    T = S[I];
    if (T[1] == 1) {
      if (T[0] != 1) {
        A += "("+rtostr(T[0])+")";
      }
    }else{
      A += "("+rtostr(T[0])+")^"+rtostr(T[1]);
    }
    A += ")";
    /* print (A); */
    if (T[1] == 1 && T[0] == 1) {
    }else{
      if (type(Ans) == 0) {
         Ans = eval_str(A);
      }else{
         Ans = Ans * eval_str(A);
      }
    }
  }
  return Ans;
}

/*
   V : list of variables.
   W : weight vector or order number.
*/
def quote_sort_polynomial(F,V,W) {
  if (type(F) != RPOLYNOMIAL) return quote_to_quote(F);
  dp_ord(taka_poly_weight_vector(W,V));
  F = dp_ptod(F,V);
  if (F != 0) {
    Ans="";
  }else{
    Ans=quote(0); return Ans;
  }
  C = 0;
  while (F != 0) {
     G = dp_hm(F);
     F = dp_rest(F);

     HC = "("+rtostr(dp_hc(G))+")"; 
     HT = rtostr(dp_dtop(dp_ht(G),V));
     if (HT != 1) {
       HC = quote_to_quote(HC+"*"+HT);
     }else{
       HC = quote_to_quote(HC);
     }
     if (C == 0) {
         Ans = HC;
     }else{
        Ans = Ans + HC;
     }
     if (C == 0) C = 1;
  }
  return Ans;
}


end$
