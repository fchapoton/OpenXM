/*
  $OpenXM$
*/
/*
  contiguity が正しいか hg-poly で確認するプログラム.
  misc-2020/11/debug-tw-cohom/check2.rr より転載, 編集.
*/
import("mt_gkz.rr")$
import("tk_hgpoly.rr")$
import("ot_hgm_ahg.rr")$
import("ok_diff.rr")$
Xm_noX=1$

def hgpoly_res(A,B,L) {
  /* L は A で 111000***, 000111*** なる形の部分の個数 */
  B=matrix_matrix_to_list(B);
  /* hg poly の積分表示 (residue表示) に対応するため定数倍 */
  C = 1; for (I=0; I<L; I++) C = C*fac(B[I]);
  F=tk_hgpoly.hgpolyk(A,B)*C;  // degree(alpha)*hgpoly
  V=mt_gkz.index_vars(x,1,length(A[0])+1 | no_=1);
  return dp_dtop(F,V); // tk_hgpoly.hgpoly(A,B)[0];
}

// ff2(R,A,Beta,Ap,BF,C) で step-up の合成の定数が正しいか調べる.
def test2e() {
  A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]];
  if (mt_gkz.check_bf() == 0) {
    mt_gkz.set_check_bf([s_1*s_2-s_1*s_3+s_1^2,s_1*s_3,s_2^2+(-s_3+s_1)*s_2,s_3*s_2]);
  }
  BF=mt_gkz.check_bf();
  B=newvect(3,[5,4,7]);
  Ap=[[1,1,0,0],[0,0,1,1],[0,0,0,0]];
  Beta=[b1,b2,b3];
  R=[0,0,-1,0];
  F2=hgpoly_res(A,B,2);
  mt_gkz.ff(R,A,Ap,Beta); C=mt_gkz.check_c(); // step-up operators の表を作成.
  Fvec=mt_gkz.ff2(R,A,Beta,Ap,BF,C);
  print(mt_gkz.bb(R,A,Beta,Ap,BF));
  Fvec = base_replace(Fvec,assoc(Beta,vtol(B)));
  printf("Fvec=%a\n",Fvec);
  C_X=mt_gkz.index_vars(x,1,length(A)+1 | no_=1);
  R32d = odiff_act(Fvec,F2,C_X);
  printf("constant 1 is expected: %a\n", red(R32d/hgpoly_res(A,B+newvect(3,[0,1,0]),2)));
}

// ff1(R,A,Beta,Ap,BF,C) で step-down の定数が正しいか調べる.
def test2f() {
  A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]];
  if (mt_gkz.check_bf() == 0) {
    mt_gkz.set_check_bf([s_1*s_2-s_1*s_3+s_1^2,s_1*s_3,s_2^2+(-s_3+s_1)*s_2,s_3*s_2]);
  }
  BF=mt_gkz.check_bf();
  B=newvect(3,[6,4,8]);
  Ap=[[1,1,0,0],[0,0,1,1],[0,0,0,0]];
  Beta=[b1,b2,b3];
  R=[0,0,0,1];     // ここを変えたら最後も変更 --> OK.
  F2=hgpoly_res(A,B,2);
  Fvec=mt_gkz.ff1(R,A,Beta,Ap);
  print(mt_gkz.bp(R,A,Beta,Ap));
  Fvec = base_replace(Fvec,assoc(Beta,vtol(B)));
  printf("Fvec=%a\n",Fvec);
  C_X=mt_gkz.index_vars(x,1,length(A)+1 | no_=1);
  R32d = odiff_act(Fvec,F2,C_X);  // step down operator を作用して同じhg poly が出てくるか?
  printf("constant 1 is expected: %a\n", red(R32d/hgpoly_res(A,B-newvect(3,[0,1,1]),2)));  // R=[0,0,0,1] の場合.
}
//test2f();

// simple な Rvec で調べる.
def test2g() {
  A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]];
  if (mt_gkz.check_bf() == 0) {
    mt_gkz.set_check_bf([s_1*s_2-s_1*s_3+s_1^2,s_1*s_3,s_2^2+(-s_3+s_1)*s_2,s_3*s_2]);
  }
  BF=mt_gkz.check_bf();
  At=matrix_transpose(A);
//  B=newvect(3,[2,3,3]);
//  B=newvect(3,[5,4,7]);
  B=newvect(3,[6,4,8]);
  Ap=[[1,1,0,0],[0,0,1,1],[0,0,0,0]];
  Beta=[b1,b2,b3];
  Rvec=[[1,0,-1,0]];  Rvec0=Rvec[0];  // [1,0,-1,0] , or [1,-1,0,0]
  NewB = matrix_clone(B); // 書き換える可能性があればこれが必要
  for (I=0; I<length(Rvec0); I++) {
    NewB=NewB-Rvec0[I]*At[I];
  }
  printf("A=%a, Rvec0=%a\nB=%a, NewB=%a\n",A,Rvec0,B,NewB);
  F2=hgpoly_res(A,B,2);
  Fvec=mt_gkz.rvec_to_fvec(Rvec,A,Ap,Beta | shift=0)[0]; /* Rvec 方向の contiguity */
  Fvec = base_replace(Fvec,assoc(Beta,vtol(B)));
  C_X=mt_gkz.index_vars(x,1,length(A)+1 | no_=1);
  R32d = odiff_act(Fvec,F2,C_X);
  printf("constant 1 is expected: %a\n", red(R32d/hgpoly_res(A,NewB,2)));
}


// pfaff_eq が正しく動くかしらべる.
def test3() {
  P4=mt_gkz.pfaff_eq(A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]], Beta=[-gamma1,-gamma2,-c],
              Ap=[[1,1,0,0],[0,0,1,1],[0,0,0,0]],
              Rvec=[[1,0,0,0],[0,0,1,0]],DirX=[dx1,dx2,dx3,dx4]);
  P4b=mt_gkz.pfaff_eq(A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]], Beta=[-gamma1,-gamma2,-c],
              Ap=[[1,1,0,0],[0,0,1,1],[0,0,0,0]],
              Rvec=[[2,-1,-1,1],[0,0,1,0]],DirX=[dx1,dx2,dx3,dx4]);
  for (I=0; I<4; I++) {
    print(P4[I]-P4b[I]);
  }
}

// 2020.11.24
def act_dx(F,Dx) {  // Dx = dx1 or dx2 or dx3 ... only
  if (type(F)>=4) return(map(act_dx,F,Dx));
  X=eval_str(asciitostr(cdr(strtoascii(rtostr(Dx)))));
  return(diff(F,X));
}
def check_by_hgpoly(A,B,L,Rvec,DirX) 
"Ex. check_by_hgpoly(A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]],[5,4,7],2,Rvec=[[1,0,0,0],[1,-1,0,1]],[dx1,dx4]|xrule=[[x2,1],[x3,1]]);"
{
  if (type(getopt(xrule))>0) Xrule=getopt(xrule); else Xrule=[];
  if (type(getopt(shift))>0) Shift=getopt(shift); else Shift=getopt(shift);

  Ap=mt_gkz.make_Ap(A,L);
  printf("A=%a\nAp=%a\n",A,Ap);

  At = matrix_transpose(A);
  Bvec = matrix_list_to_matrix(B);
  Hpoly = newvect(length(Rvec));
  BB=newvect(length(Rvec));
  Beta=mt_gkz.index_vars(b,1,length(B) | no_=1);
  Hg=sm1.gkz([A,Beta]); HgV=Hg[1]; Hg=Hg[0];
  for (I=0; I<length(Rvec); I++) {
    BB[I] = Bvec;
    for (J=0; J<length(Rvec[I]); J++) {
      BB[I] -= Rvec[I][J]*At[J];
    }
    Hpoly[I]=hgpoly_res(A,BB[I],L);  
    if (Hpoly[I]==0) error("Beta value is not relevant. print BB[I]");
    /* check if it is correct */
    for (J=0; J<length(Hg); J++) {
      ZZ=odiff_act(base_replace(Hg[J],assoc(Beta,vtol(BB[I]))),Hpoly[I],HgV);
      if (ZZ != 0) error("hg poly is incorrect.");
    }
    Hpoly[I] = base_replace(Hpoly[I],Xrule);
    printf("Hpoly[%a]=%a\n",I,Hpoly[I]);
  }
  
  if (type(getopt(hgpoly))>0) return Hpoly;

  Pf=mt_gkz.pfaff_eq(A,Beta,Ap,Rvec,DirX | option_list=getopt());
  Pf=base_replace(Pf,assoc(Beta,B));

  printf("\n\n0 (vector) is expected:\n");

  Ans=[];
  for (I=0; I<length(DirX); I++) {
    Ans=cons(map(red,Pf[I]*Hpoly-act_dx(Hpoly,DirX[I])),Ans);
  }
  return reverse(Ans);
}

def check_LLC() {  
  Xrule=[[x1,1],[x2,1],[x3,1]];  // x4,x5 のみ変数
  Rvec=[[0,0,0,0,0],[-1,0,1,0,0],[-2,0,2,0,0],[-2,1,1,0,0]];
  A=[[1,1,1,1,1],[0,1,0,2,0],[0,0,1,0,2]];
  Shift=[2,0,0];
  return check_by_hgpoly(A,[15,9,9],1,Rvec,[dx4,dx5] | xrule=Xrule, shift=[2,0,0]);
} // 時間がかかるのでまだ試してない.

def check_0134() {
  A=[[1,1,1,1],[0,1,3,4]];
  Rvec=[[0,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,0,2]];
  Xrule=[[x2,1/5],[x3,1/3]];
  Shift=[1,0];
//  return check_by_hgpoly(A,[12,24],1,Rvec,[dx1,dx4] | xrule=Xrule, shift=Shift);
  return check_by_hgpoly(A,[12,24],1,Rvec,[dx1,dx4] | xrule=Xrule, b_ideal=1);
}
// Fails. どうやら hg poly に 0 が出てきて check がうまくいかず.
// MQ: pfaffian が異なる?

def check_0134compat() {
  A=[[1,1,1,1],[0,1,3,4]];
  Ap=mt_gkz.make_Ap(A,1);
  Rvec=[[0,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,0,2]];
  Xrule=[[x2,2],[x3,4]];
  Shift=[1,0];
  Pf=mt_gkz.pfaff_eq(A,[b1,b2],Ap,Rvec,[dx1,dx4] | shift=Shift,xrule=Xrule);
  Pf=base_replace(Pf,[[b1,1/2],[b2,1/3]]);
  return [Pf,mt_gkz.check_compatibility(Pf[0],Pf[1],x1,x4)];
} //OK


def check_0123() {
  A=[[1,1,1,1],[0,1,2,3]];
  Rvec=[[0,0,0,0],[0,0,0,1],[0,0,0,2]];
  Xrule=[[x2,2],[x3,4]];
  Shift=0;
  return check_by_hgpoly(A,[12,18],1,Rvec,[dx1,dx4] | xrule=Xrule, shift=Shift);
} //OK.

def check_f1() {
  A=[[1,1,1,0,0,0],[0,0,0,1,1,1],[0,1,0, 0,1,0], [0,0,1, 0,0,1]];
  Rvec=[[0,0,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,0,1]];
  Xrule=[[x1,1],[x2,2],[x3,3],[x4,4]];
  Shift=0;
  return check_by_hgpoly(A,[3,3,2,2],2,Rvec,[dx5,dx6] | xrule=Xrule, shift=Shift);
} // OK.

def check_by_yang(A,B,L,Rvec) 
"Ex. check_by_yang(A=[[1,1,0,0],[0,0,1,1],[0,1,0,1]],[1/5,1/4,1/7],2,Rvec=[[1,0,0,0],[1,-1,0,1]]|xrule=[[x2,1],[x3,1]]);"
{
  if (type(getopt(xrule))>0) Xrule=getopt(xrule); else Xrule=[];
  if (type(getopt(shift))>0) Shift=getopt(shift); else Shift=getopt(shift);

  Ap=mt_gkz.make_Ap(A,L);
  printf("A=%a\nAp=%a\n",A,Ap);
  Beta=mt_gkz.index_vars(b,1,length(B) | no_=1);
  Hg=sm1.gkz([A,Beta]); V=Hg[1]; 
  DirX=mt_gkz.dvar(V);

  Pf=mt_gkz.pfaff_eq(A,Beta,Ap,Rvec,DirX | option_list=getopt());
  Pf=base_replace(Pf,Brule=assoc(Beta,B));
  Base_p=Fvec=base_replace(mt_gkz.get_check_fvec(),Brule);

  Eq=base_replace(Hg[0],assoc(Beta,B));
  DV=mt_gkz.dvar(V);
  yang.define_ring(["partial",V]);
  yang.verbose();
  G=yang.buchberger(map(dp_ptod,Eq,DV));   /* does it OK? double check. */
  Base=map(dp_ptod,Base_p,DV);
  Pf2=yang.pfaffian(Base,G);
  Pf2=base_replace(Pf2,Xrule);
  Ans=[];
  for (I=0; I<length(Pf); I++) {
    Ans = cons(map(red,Pf[I]-Pf2[I]),Ans);
  }
  printf("zero matrices are expected:\n");
  return reverse(Ans);
}

def check_0134pf() {
  A=[[1,1,1,1],[0,1,3,4]];
  Rvec=[[0,0,0,0],[0,0,1,0],[0,0,0,1],[0,0,0,2]];
  Xrule=[[x2,1/5],[x3,1/3]];
  return check_by_yang(A,[1/7,1/11],1,Rvec | xrule=Xrule,b_ideal=1);
}
def check_0134pf2() {
  A=[[1,1,1,1],[0,1,3,4]];
  Rvec=[[0,0,0,0],[0,0,1,0],
        [-1,1,1,0],  // [0,0,0,1] の別表現.
        [0,0,0,2]];
  Xrule=[[x2,1/5],[x3,1/3]];
  return check_by_yang(A,[1/7,1/11],1,Rvec | xrule=Xrule,b_ideal=1);
} // 1時間ほどかかるが, 0 を戻す.

// 2020.11.27  from checkcheck.rr, test13, 3F2
def test13() {
  mt_gkz.clear_bf();
  DirX = dx1;
  Shift=0;

  Xrule=[[x2,-1],[x3,1],[x4,1],[x5,1],[x6,1]];  // x1 のみ変数
  Rvec=[[0,1,0,0,0,0],[0,0,0,0,1,0],[-1,1,0,1,0,0]];
  A=[[1,1,0,0,0,0],[0,0,1,1,0,0],[0,0,0,0,1,1],[1,0,0,1,0,0],[0,0,1,0,0,1]];
  Ap = [[1,1,0,0,0,0],[0,0,1,1,0,0],[0,0,0,0,1,1],[0,0,0,0,0,0],[0,0,0,0,0,0]];
  Beta = [b1,b2,b3,b4,b5];
  /* A*Rvec[0]^T, A*Rvec[1]^T, A*Rvec[2]^T が 
     q = (1,0,0,0,0), (0,0,1,0,0), (0,1,0,0,0) に対応.
     つまり cohomology の base は
     dt/(z1*t1-1), dt/(t2+t1), dt/(t2+t2)
     この basis についての Pfaffian の係数行列を test13() は戻す.
  */

  Cg = matrix_identity_matrix(length(Rvec));
  Fvec = mt_gkz.rvec_to_fvec(Rvec,A,Ap,Beta | shift=Shift, beta=Beta);
  NN = mt_gkz.fvec_to_conn_mat(Fvec,A,Beta,1);
  NN = base_replace(NN,Xrule);
  Std = NN[1]; NN=NN[0];
  NN4 = mt_gkz.fvec_to_conn_mat(Fvec,A,Beta,DirX)[0];
  NN4 = base_replace(NN4,Xrule);
  NN4 =  map(red,Cg*NN4*matrix_inverse(NN)*matrix_inverse(Cg));
  NNN4 = base_replace(NN4,[[b1,-b1],[b2,-b2],[b3,-b3],[b4,-b4],[b5,-b5]]);
  return [NN4,NNN4];
}

// 2020.11.28,  for Example 5.  2020.12.10 Rvec fixed
def test11(DirX) {
  Shift=0;
//  Rvec=[[0,0,0,0,0],[-1,0,1,0,0],[-1,0,0,0,1],[-2,1,1,0,0]];
  Rvec=[[0,0,0,0,0],[-1,1,0,0,0],[-1,0,0,1,0],[-2,1,1,0,0]];
  Cg = matrix_identity_matrix(4);
  A=[[1,1,1,1,1],[0,1,0,2,0],[0,0,1,0,2]];
  Ap = [[1,1,1,1,1],[0,0,0,0,0],[0,0,0,0,0]];
  if (type(getopt(beta))>0) Beta = getopt(beta);
  else Beta = [1/2,1/3,1/5];
  Shift=[2,0,0];  // (1,1,1) が hole
  Fvec = mt_gkz.rvec_to_fvec(Rvec,A,Ap,Beta | shift=Shift, beta=Beta);
  Xrule=[[x1,1],[x4,1],[x5,1]];
  NN = mt_gkz.fvec_to_conn_mat(Fvec,A,Beta,1);
  NN = base_replace(NN,Xrule);
  Std = NN[1]; NN=NN[0];
  NN4 = mt_gkz.fvec_to_conn_mat(Fvec,A,Beta,DirX)[0];
  NN4 = base_replace(NN4,Xrule);
  return map(red,Cg*NN4*matrix_inverse(NN)*matrix_inverse(Cg));
}
// LLC.rr よりコピー. for Example 5.
def test_LLC() {
  mt_gkz.clear_bf();
  shell("mkdir -p data");
  P=test11(dx2 | beta=[b1,b2,b3]);
  bsave(P,"data/LLC-dx2.ab");
  Q=test11(dx3 | beta=[b1,b2,b3]);
  bsave(Q,"data/LLC-dx3.ab");
  return mt_gkz.check_compatibility(P,Q,x2,x3);
}


end$

