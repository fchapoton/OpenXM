/* $OpenXM: OpenXM/src/asir-contrib/packages/src/gtt_ekn.rr,v 1.13 2019/06/04 00:25:56 takayama Exp $ */
import("names.rr")$
load("tk_nm_dn.rr")$
if ((type(version(2018)) == 4) && (length(version(2018)) < 3)) {
 igcdcntl(3)$ printf("igcdcntl is set to 3.\n")$
}else {;}
if (!module_definedp("gtt_ekn3")) {
printf("This package gtt_ekn.rr is obsoleted. Please use the new package gtt_ekn3.rr\n");
}else{;}$
#define USE_MODULE
//#define FOR_DEVELOPE
load("gtt_ekn/g_mat_fac.rr")$
load("gtt_ekn/ekn_eval.rr")$
load("gtt_ekn/mle.rr")$
load("gtt_ekn/ekn_hgm_0.rr")$
load("gtt_ekn/ekn_restriction_2.rr")$

#ifdef USE_MODULE
module gtt_ekn$
localf get_svalue$
localf gmvector$
localf gmvector_g_1$
localf nc$
localf lognc$
localf expectation$
localf setup$
localf report$
localf cmle$
localf set_debug_level$
localf assert1$
localf assert2$
localf prob1$
localf set_ARule$
localf set_XRule$
#else
extern Ekn_plist$
extern Ekn_IDL$
#endif

def get_svalue() {  // get values of static or extern variables.
  return([Ekn_plist,Ekn_IDL,Ekn_debug,Ekn_mesg,XRule,ARule,Verbose,Ekn_Rq]);
}

// Gauss Manin vector
def gmvector(Beta,Prob) {
  if ((base_memberq(0,Beta[0])) || (base_memberq(0,Beta[1]))){
    error("gmvector: Marginal sums must be positive integers.");}
  if (base_sum(Beta[0],0,0,length(Beta[0])-1) != base_sum(Beta[1],0,0,length(Beta[1])-1)){
    error("gmvector: The sums of Beta[0] and Beta[1] must be equal.");}
  return(ekn_cBasis_2(Beta,Prob|option_list=getopt()));
}
def gmvector_g_1(Beta,Prob) {
  if ((base_memberq(0,Beta[0])) || (base_memberq(0,Beta[1]))){
    error("gmvector: Marginal sums must be positive integers.");}
  if (base_sum(Beta[0],0,0,length(Beta[0])-1) != base_sum(Beta[1],0,0,length(Beta[1])-1)){
    error("gmvector: The sums of Beta[0] and Beta[1] must be equal.");}
  return(ekn_cBasis_g_1(Beta,Prob|option_list=getopt()));
}

// Normalizing constant and its derivatives
def nc(Beta,Prob) {
  R1=length(Beta[0]); 
  R2=length(Beta[1]);
  GM=gmvector(Beta,Prob|option_list=getopt());
  NC=ltopoly(GM[0][0],Beta,Prob);
  Fdiff=base_replace(basistoFdiff(GM,R1-1,R2-1|xrule=xRule_num(Prob,R1-1,R2-1)),marginaltoAlpha(Beta));
  NCdiff=newmat(R1,R2);
  for (I=0; I<R1; I++){
    for (J=0; J<R2; J++){
      NCdiff[I][J]=red(eulerZ([I,J],Beta,Prob,GM[0][0],Fdiff))/Prob[I][J];
    }
  }  
  return([NC,NCdiff]);
}

// log of normalizing constant and its derivatives
def lognc(Beta,Prob) {
  R1=length(Beta[0]); 
  R2=length(Beta[1]);
  GM=gmvector(Beta,Prob | option_list=getopt());
  NC=ltopoly(GM[0][0],Beta,Prob);
  Fdiff=base_replace(basistoFdiff(GM,R1-1,R2-1|xrule=xRule_num(Prob,R1-1,R2-1)),marginaltoAlpha(Beta));
  LNCdiff=newmat(R1,R2);
  for (I=0; I<R1; I++){
    for (J=0; J<R2; J++){
      LNCdiff[I][J]=red(eulerZ([I,J],Beta,Prob,GM[0][0],Fdiff))/(Prob[I][J]*NC);
    }
  }  
  return([eval(log(NC)),LNCdiff]);
}

// Expectation for the index 
// expectation(Beta,Prob | index=[[0,0],[1,0]])
def expectation(Beta,Prob) {
  R1 = length(Beta[0]);
  R2 = length(Beta[1]);
  GM=gmvector(Beta,Prob | option_list=getopt());
  Expect=cBasistoE(GM,Beta,Prob);
  if (type(getopt(index)) >= 0) {
    IndexList = getopt(index);
    Ex=newmat(R1,R2);
    for (I=0; I<R1; I++){
      for (J=0; J<R2; J++){
	if (IndexList[I][J]==0){Ex[I][J]='*';}
	else{Ex[I][J]=Expect[I][J];}
      }
    }  
  }else{
    // Default IndexList
    IndexList=newmat(R1,R2);
    for (I=0; I<R1; I++) {
      for (J=0; J<R2; J++) {
	// IndexList[I*R2+J] = [I,J]; // ???
	IndexList[I][J] = 1;
      }
    }
    IndexList=matrix_matrix_to_list(IndexList);
    Ex=Expect;
  }
  return(Ex);
}

// setup for a distributed computation
def setup() {
#ifdef USE_MODULE
#else
    extern Ekn_plist;
    extern Ekn_IDL;
#endif

    if(getopt(report) != 1){
        if(type(getopt(nps)) >= 0){
    	    NPS = getopt(nps);
    	}else if(type(getopt(number_of_processes)) >= 0){
            NPS = getopt(number_of_processes);
        }else NPS = 1; //default

    	if(type(getopt(nprm)) >= 0){
            NPRM = getopt(nprm);
        }else if(type(getopt(number_of_primes)) >= 0){
            NPRM = getopt(number_of_primes);
        }else  NPRM = 10;  //default

    	if(type(getopt(fgp)) >= 0){
            FGP = getopt(fgp);
    	}else if(type(getopt(file_of_generated_primes)) >= 0){
            FGP = getopt(file_of_generated_primes);
    	}else  FGP = 0;//default

	if(type(getopt(minp)) >= 0){
	    MINP = getopt(minp);
	}else  MINP = 10^10;  //default

    	if(type(NPS) > 0){
            if(type(NPS) == 1){
	        if(type(Ekn_IDL) == 4)  shutdown(Ekn_IDL);
	    	Ekn_IDL = process(NPS|option_list=getopt());
	    }else  printf("Option nps is bad.\n");
    	}

    	if(type(NPRM) > 0){
            if(type(NPRM) == 7){
	        Ekn_plist = load_prime(NPRM);
	    }else if(type(NPRM) == 1){
	        if(type(MINP) == 1){
	            Ekn_plist = generate_p_set(MINP,NPRM);
		    if(type(FGP)==7){
		        save_prime(Ekn_plist,FGP);
		        printf("File name %a is written.\n",FGP);
		    }
 		    Ekn_plist = reverse(Ekn_plist);
	        }else    printf("Option minp is bad.\n");
	    }else{
	        printf("Option nprm is bad.\n");
	    }
        }
    }

    if(type(Ekn_IDL)==4)    printf("Number of processes = %a.\n",length(Ekn_IDL));
    else    printf("List of child processes is empty.\n");
    
    if(type(Ekn_plist)==4){
        printf("Number of primes = %a.\n",length(Ekn_plist));
	printf("Min of plist = %a.\n",Ekn_plist[0]);
    }else    printf("List of primes is empty\n");
    return;
}

def report(){
    setup(|report=1);
}

def cmle(U)
"It returns an approximate value of the conditional MLE for the table U. \
Options: see cBasistoEdiff.\
Example:   U=[[1,1,2,3],[1,3,1,1]]; M=gtt_ekn.cmle(U); M[2] is the probability. \
M[0] is U(input data), M[1] is maginal sums."
{
//    return(cmle_2(U|option_list=getopt()));
   return(cmle_3(U|option_list=getopt()));
}

def set_debug_level(Mode) {
  Ekn_debug=Mode;
}

def assert1(N) {
  if (N<2) return("N should be more than 1.");
  if (length(getopt()) == 0) printf("Try g_mat_fac_test_int: ");
  else printf("Try %a\n",getopt());
  T0=time();
  V1=gtt_ekn.gmvector([[36*N,13*N-1],[38*N-1,11*N]],
                       [[1,(1-1/N)/56],[1,1]]|option_list=getopt());
  T1=time();
  printf("Timing =%a (CPU) + %a (GC) = %a (total), real time=%a\n",TT0=T1[0]-T0[0],TT1=T1[1]-T0[1],TT0+TT1,T1[3]-T0[3]);
  printf("\nTry g_mat_fac_test_plain: ");
  T0=time();
  V0=gtt_ekn.gmvector([[36*N,13*N-1],[38*N-1,11*N]],
                       [[1,(1-1/N)/56],[1,1]]|plain=1);
  T1=time();
  printf("Timing =%a (CPU) + %a (GC) = %a (total)\n",TT0=T1[0]-T0[0],TT1=T1[1]-T0[1],TT0+TT1);
  printf("diff of both method = \n");
  return(V0-V1);
}

def assert2(N) {
  if (N<1) return("N should be more than 0.");
  if (N>1) printf("The second method will take time, e.g., N=2 ==> 1 min.\n");
  Marginal = [[130*N,170*N,353*N],[90*N,119*N,444*N]];
  P=[[17/100,1,10],[14/100,1,33/10],[1,1,1]];
  printf("Marginal=%a\nP=%a\n",Marginal,P);
  if (length(getopt()) == 0) printf("Try g_mat_fac_test_int: ");
  else printf("Try %a\n",getopt());
  T0=time();
  V1=gtt_ekn.expectation(Marginal,P|option_list=getopt())$
  T1=time();
  printf("Timing (int) =%a (CPU) + %a (GC) = %a (total), real time=%a\n",TT0=T1[0]-T0[0],TT1=T1[1]-T0[1],TT0+TT1,T1[3]-T0[3]);
  printf("\nTry g_mat_fac_test_plain: ");
  T0=time();
  V0=E=gtt_ekn.expectation(Marginal,P | plain=1);
  T1=time();
  printf("Timing (rational) =%a (CPU) + %a (GC) = %a (total)\n",TT0=T1[0]-T0[0],TT1=T1[1]-T0[1],TT0+TT1);
  printf("diff of both method = \n");
  return(V0-V1);
}

/* bench mark test. */
def prob1(R1,R2,Size) {
  if (R1 > R2) return("Should be R1<=R2.");
  if (type(getopt(factor))>0) Factor=getopt(factor);
  else Factor=1;
  if (type(getopt(factor_row))>0) Factor_row=getopt(factor_row);
  else Factor_row=1;
  Col=newvect(R1);
  Row=newvect(R2);
  Sum2=0;
  for (I=0; I<R2; I++) {
    Row[I] = number_floor(Size*Factor_row*(I+1));
    Sum2 += Row[I];
  }
  Sum=0;
  for (I=0; I<R1-1; I++) {
    Col[I] = Size*Factor*(I+1);
    Sum += Col[I];
  }
  Col[R1-1] = Sum2-Sum;
  if (Row[R2-1] <= 0) printf("Error: negative marginal sum.\n");
  P=newmat(R1,R2);
  for (I=0; I<R1; I++) P[I][0] = 1;
  for (J=1; J<R2; J++) P[R1-1][J] =1;
  Q=2;
  for (I=0; I<R1-1; I++) {
    for (J=1; J<R2; J++) {
       P[I][J] = 1/(Q=pari(nextprime,Q)); Q++;
    }
  }
  return [[vtol(Col),vtol(Row)],matrix_matrix_to_list(P)];
}

def set_ARule(Rule) { return(ARule=Rule); }
def set_XRule(Rule) { return(XRule=Rule); }

#ifdef USE_MODULE
endmodule$
#else
#endif


end$