module nk_toric;

localf toric_ideal$
localf test_toric_ideal$
localf test_toric_ideal2$
localf test_toric_ideal3$
localf test_toric_ideal4$
localf var_list$
localf test_var_list$
localf gr_w$
localf w_drlex_mat$
localf test_w_drlex_mat$
localf in_w$
localf test_in_w$
localf l_max$
localf l_to_p$
localf test_l_to_p$
localf in_w_ideal$

/* Groebner 道場より */
/* 
 * A は行列もしくは 2 重リスト                        
 * トーリックイデアル I_A を返す                      
 * e.g. 
 * toric_ideal([[1,1,0,0],[0,0,1,1],[1,0,1,0],[0,1,0,1]])
 *      --> [-x1*x4+x2*x3]
 */
def toric_ideal(A)
{
	if (type(A) == 6) {	
		M = size(A)[0];
		N = size(A)[1];
	} else if (type(A) == 4) {
		M = length(A);
		N = length(A[0]);
	}

	/* 変数リスト VT=[t0, ..., tM],VX=[x1, ..., xN] */
	VT = var_list("t", 0, M);		
	VX = var_list("x", 1, N);
	L = [];
	T = 1;
	for (I = 0; I < M + 1; I++)
		T *= VT[I];	
	T = T - 1;
	L = cons(T, L);	
	for (J = 0; J < N; J++) {
		Plus = 1;
		Minus = 1;
		for (I = 0; I < M; I++) 
			 if (A[I][J] > 0)
				Plus *= VT[I]^A[I][J];
			else if (A[I][J] < 0)
				Minus *= VT[I]^(-A[I][J]);
		L = cons(VX[J]*Minus - Plus, L);
	}
	print("ideal : ");
	print(L);
	/* t0, ..., tM > x1, ..., xM なる消去順序で GB 計算 */
	G = nd_gr(L, append(VT, VX), 0, [[0, M + 1], [0, N]]);	
	print("gb : ");
	print(G);

	/* G の各元から 変数 t* を含まないものを取り出す */
	Id = [];
	for (I = 0; I < length(G); I++) {
		Vars = vars(G[I]);
		for (J = 0; J < length(Vars); J++) {
			T = rtostr(Vars[J]);
			if (sub_str(T, 0, 0) == "t")
				break;
		}
		if (J == length(Vars))
			Id = cons(G[I], Id);
	}
	return reverse(Id);
}

def test_toric_ideal()
{
	A = newmat(2,3,[[1,1,1],[0,1,2]]);
	return toric_ideal(A);
}

def test_toric_ideal2()
{
	A = newmat(2,4,[[1,1,1,1],[0,1,3,4]]);
	return toric_ideal(A);
}

def test_toric_ideal3()
{
	A = newmat(3,4,[[1,1,1,1],[0,1,0,1],[0,0,1,1]]);
	return toric_ideal(A);
}

def test_toric_ideal4()
{
	A = newmat(6, 9, [[1,1,1,0,0,0,0,0,0],[0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,1,1,1],
	                  [1,0,0,1,0,0,1,0,0],[0,1,0,0,1,0,0,1,0],[0,0,1,0,0,1,0,0,1]]);
	return toric_ideal(A);
}

/* e.g. var_list("x", 1, 4) --> [x1,x2,x3,x4] */
def var_list(Name, I1, I2)
{
	V = newvect(I2 - I1 + 1);

	for (I = I1; I <= I2; I++)
		V[I - I1] = strtov(Name + rtostr(I));
	return vtol(V);
}

def test_var_list()
{
	return var_list("x", 1, 10);
}

/* 
 * W を非負整数ベクトルとして, 単項式順序 <_W 
 * (< は全次数逆辞書式順序) についての GB を返す
 */
def gr_w(Id, VL, W)
{
	Ord = w_drlex_mat(W);
	G = nd_gr(Id, VL, 0, Ord);
	return G;
}

/* 
 * W を非負整数ベクトルとして, 単項式順序 <_W 
 * (< は全次数逆辞書式順序) を表す行列を返す
 */
def w_drlex_mat(W)
{
	N = length(W);
	A = newmat(N + 1, N);
	for (I = 0; I < N; I++) {
		A[0][I] = W[I];
		A[1][I] = 1;
	}
	for (I = 2; I < N + 1; I++) 
		A[I][N + 1 - I] = -1;	
	return A;
}

def test_w_drlex_mat()
{
	return w_drlex_mat([0,1,1,1]);
}

/* 
 * W を非負整数ベクトルとして,  
 * イニシャルフォーム in_W(P) を返す
 * P : 多項式
 * VL: 変数リスト
 * W : 非負整数ベクトル
 */
def in_w(P, VL, W)
{
        if (P == 0) {
                return [0];
        }

        N  = length(W);
        DP = dp_ptod(P, VL);
        WL = [];
        ML = [];
        while (DP != 0) {
                V = dp_etov(DP);
                Weight = 0;
                for (I = 0; I < N; I++)
                        Weight += V[I] * W[I];
                WL = append(WL, [Weight]);
                ML = append(ML, [dp_hm(DP)]);
                DP = dp_rest(DP);
        }
        Max = l_max(WL);
        In = 0;
        for (I = 0; I < length(WL); I++)
                if (WL[I] == Max)
                        In += ML[I];
        In = dp_dtop(In, VL);
        return In;
}

def test_in_w()
{
	P = 3*x*y+2*x^2+x+y+z+3;
	W = [1,2,3];
	return in_w(P, [x,y,z], W);
}

/* L 中の元の最大値を返す */
def l_max(L)
{
        Len = length(L);
        if (Len == 0) {
                return 0;
        }
        Max = L[0];
        for (I = 1; I < Len; I++)
                if (Max < L[I])
                        Max = L[I];
        return Max;
}

/* 
 * リストから 2 項式へ変換 
 * e.g. l_to_p([[0,1,0,2],[3,0,2,0]],[x1,x2,x3,x4]);
 *      --> x2*x4^2-x1^3*x3^2
 */
def l_to_p(L, VL)
{
	Plus = L[0];
	Minus = L[1];
	N = length(Plus);
	P = 1;
	M = 1;
	for (I = 0; I < N; I++) {
		P *= VL[I]^Plus[I];	
		M *= VL[I]^Minus[I];
	}
	return P - M;
}

def test_l_to_p()
{
	return l_to_p([[0,1,2,3],[4,5,6,7]],[x0,x1,x2,x3]);
}

/*
 * 非負整数ベクトル W について, イニシャルフォームイデアル
 * in_W(I) を返す
 */ 
def in_w_ideal(Id, VL, W)
{
	G = gr_w(Id, VL, W);
	InW = map(in_w, G, VL, W);
	return InW;
}


endmodule;
end$
