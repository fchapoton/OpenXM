/* $OpenXM$ */

def genus(F){
    if(irr(F)=="reducible")
	return("F(x,y,z) is not irreducible");

    S=sum(wnbh(pre(F)));
    N=tdeg(F);

    G=1/2*((N-1)*(N-2)-S);
    return(G);
}

def sum(N_){
    S=0; L=length(N_);
    for(I=0; I<L; I++){
	S_=N_[I];
	N=S_[0]; R=S_[3][0];
	if(S_[3][1]==1)
	    S=S+N*R*(R-1);
	else
	    S=S+N*(R*(R-1)+sum(S_[4]));	
    }
    return(S);
}

def nbh(F){
    if(multi_div(F)=="multiple divisor")
	return("***Argument has multiple divisor***");

    N=pre(F);
    N_=wnbh(N);
    NN=arrange(N_);

    L=length(NN);
    for(I=0; I<L; I++)
	print(NN[I]);
}

def arrange(N_){
    NN=[]; L=length(N_);
    for(I=0; I<L; I++){
	S_=N_[I];
	if(S_[3][1]==-1)
	    V=newvect(4,[S_[0],S_[1],S_[3],sub_arrange(S_[4])]);

	if(S_[3][1]==1)
	    V=newvect(4,[S_[0],S_[1],S_[3],S_[4]]);

	NN=cons(V,NN);
    }
    return(NN);
}

def sub_arrange(N_){
    NN=[]; L=length(N_);
    for(I=0; I<L; I++){
	S_=N_[I];
	if(S_[3][1]==-1)
	    V=newvect(3,[S_[0],S_[3],sub_arrange(S_[4])]);

	if(S_[3][1]==1)
	    V=newvect(3,[S_[0],S_[3],S_[4]]);

	NN=cons(V,NN);
    }
    return(NN);
}

def wnbh(N){
    L=length(N);
    for(I=0; I<L; I++){
	S=N[I];
	if(S[3][1]==-1){
	    N_=dnbh(S);
	    S[4]=wnbh(N_);	
	}
    }
    N_=N;
    return(N_);
}

def dnbh(S){
    if(S[3][1]==-1){
	N=[]; Al=S[2];
	T=prep(S[4][0],S[4][1],Al);
	MP=monic(subst(T[1],x,1),y);
	F=af(MP,Al); L=length(F);
	T_=cremona(T[0]);
	for(I=0; I<L; I++){
	    F_=F[I];
	    if(F_[1]>=2){
		if((M=deg(F_[0],y))==1){
		    A=lzeroa(F_[0],y);
		}else{
		    A=newalg(F_[0]); Al=cons(A,Al);
		}

		P=[A,1,0];
		Ch=char_n(T_,P,Al);
		N=cons(newvect(5,[M,P,Al,[Ch[0],Ch[1]],Ch[2]]),N);
	    }
	}
    }
    return(N);
}

def char_n(F,P,Al){
    G=center(F,P,Al);
    H=subst(G,z,1);
    Hm=mhp(H);
    if(Hm[1]>=2){
	Hm_=subst(Hm[0],y,1);
	R=simpalg(res(x,Hm_,diff(Hm_,x)));
	Q=tdiv(Hm[0],y^2);
	if(Q!=0 || R==0){
	    Ch=-1; N=[G,Hm[0]];
	}else{
	    Ch=1; N=["terminal"];
	}
    }else{
	Ch=1; N=["terminal"];
    }
    return([Hm[1],Ch,N]);
}

def prep(F,Fm,Al){
    if(tdiv(Fm,x)!=0 || tdiv(Fm,y)!=0){
	F=simpalg(subst_(F,1/2*(x+y),1/2*(-x+y),z));
	F=ptozpa(F,Al);
	Fm=mhp(subst(F,z,1))[0];
    }

    while(tdiv(Fm,x)!=0 || tdiv(Fm,y)!=0){
	A=(1-S^2)/(1+S^2); B=(2*S)/(1+S^2);
	F=simpalg(subst_(F,A*x+B*y,-B*x+A*y,z));
	F=ptozpa(F,Al);
	Fm=mhp(subst(F,z,1))[0];
	S++;
    }

    return([F,Fm]);
}

def sing(F){
    if(multi_div(F)=="multiple divisor")
	return("***Argument has multiple divisor***");

    S=[];
    N=pre(F); L=length(N);
    for(I=0; I<L; I++)
	S=cons(N[I][1],S);

    return(S);
}

def pre(F){
    if(multi_div(F)=="multiple divisor")
	return("***Argument has multiple divisor***");

    CF=F;
    F=diff(CF,x);
    G=diff(CF,y);
    P=[];

    if(subst(F,x,1,y,0,z,0)==0 && subst(G,x,1,y,0,z,0)==0)
	P=cons([1,0,0],P);

    F0=subst(F,y,1,z,0); G0=subst(G,y,1,z,0);
    H=fctr(gcd(F0,G0)); L=length(H);
    for(I=1; I<L; I++){
	H_=H[I][0];
        if(deg(H_,x)==1)
	    P=cons([-coef(H_,0,x)/coef(H_,1,x),1,0],P);
	else
	    P=cons([newalg(H_),1,0],P);
    }

    F_=subst(F,z,1); G_=subst(G,z,1); H_=subst(diff(CF,z),z,1);
    M=deg(F_,y); N=deg(G_,y);
    A=coef(F_,M,y); B=coef(G_,N,y); C=gcd(A,B);
    R=fctr(gcd(res(y,F_,G_),res(y,F_,H_))); L=length(R);

    for(I=1; I<L; I++){
	X=R[I][0];
	if(srem(C,X)==0){
	    if(deg(X,x)==1){
		X=lzero(X,x);
		U=fctr(gcd(subst(F_,x,X),subst(G_,x,X)));
		K=length(U);
		for(J=1; J<K; J++){
		    T=U[J][0];
		    if(deg(T,y)==1)
			P=cons([X,lzero(T,y),1],P);
		    if(deg(T,y)>=2)
			P=cons([X,newalg(T),1],P);
		}
	    }else{
		Al=newalg(X);
		FF=simpalg(subst(F_,x,Al));
		GG=simpalg(subst(G_,x,Al));
		if(deg(FF,y)>=1 && deg(GG,y)>=1){
		    U=af(cr_gcda(monic(FF,y),monic(GG,y)),[Al]);
		    K=length(U);
		    for(J=0; J<K; J++){
			T=U[J][0];
			if(deg(T,y)==1)
			    P=cons([Al,lzeroa(T,y),1],P);
			else{
			    if(deg(T,y)!=0)
				P=cons([Al,newalg(T),1],P);
			}
		    }
		}
	    }
	}else{
	    if(deg(X,x)==1){
		X=lzero(X,x);
		U=fctr(gcd(subst(F_,x,X),subst(G_,x,X)));
		K=length(U);
		for(J=1; J<K; J++){
		    T=U[J][0];	
		    if(deg(T,y)==1)
			P=cons([X,lzero(T,y),1],P);
		    else
			P=cons([X,newalg(T),1],P);
		}	
	    }else{
		Al=newalg(X);
		FF=simpalg(subst(F_,x,Al));
		GG=simpalg(subst(G_,x,Al));
/* 
本来なら
	S=af(cr_gcda(monic(FF,y),monic(GG,y)),[Al]);
と書けばよいが、Asirのbugのため以下のように書く。
*/
if(FF==0)
    U=af(GG,[Al]);

if(GG==0)
    U=af(FF,[Al]);

if(FF!=0 && GG!=0)
    U=af(cr_gcda(monic(FF,y),monic(GG,y)),[Al]);
/* 以上 */
		K=length(U);
		for(J=0; J<K; J++){
		    T=U[J][0];
		    if(deg(T,y)==1)
			P=cons([Al,lzeroa(T,y),1],P);
		    else{
			if(deg(T,y)!=0)
			    P=cons([Al,newalg(T),1],P);
		    }
		}
	    }
	}
    }

    F=CF;
    N=[];
    L=length(P);
    for(I=0; I<L; I++){
	P_=P[I]; Al=algs(P_);
	Ch=char_s(F,P_,Al);
	if(Ch!=0)
	    N=cons(newvect(5,[number(P_),P_,algs(P_),[Ch[0],Ch[1]],Ch[2]]),N);
    }
    return(N);
}

def number(P){
    T=ctype(P);

    if(T==0)
	return(1);
    if(T=="x" || T=="xx")
	return(order(P[0]));
    if(T=="y")
	return(order(P[1]));
    if(T=="xy")
	return(order(P[0])*order(P[1]));
}

def order(A){
    F=defpoly(A);
    F_=algptorat(F); V=algptorat(A);
    return(deg(F_,V));
}

def algs(P){
    T=ctype(P);

    if(T==0)
	return([]);

    if(T=="x" || T=="xx")
	return([P[0]]);

    if(T=="y")
	return([P[1]]);

    if(T=="xy")
	return([P[1],P[0]]);
}

def ctype(P){
    X=P[0]; Y=P[1];

    if(ntype(X)==2){
	N=1; VX=algptorat(X);
    }else{
	N=0;
    }

    if(ntype(Y)==2){
	H=algptorat(Y);
	VY=vars(H)[0];
	if(N==1 && VY!=VX){
	    T="xy";
	}else{
	    if(N==0)
		T="y";
	    else
		T="xx";
	}
    }else{
	if(N==1)
	    T="x";
	else
	    T=0;
    }
    return(T);
}

def char_s(F,P,Al){
    G=center(F,P,Al);
    H=subst(G,z,1);
    Hm=mhp(H);
    if(Hm[1]>=2){
	Hm_=subst(Hm[0],y,1);
	R=simpalg(res(x,Hm_,diff(Hm_,x)));
	Q=tdiv(Hm[0],y^2);
	if(Q!=0 || R==0){
	    Ch=-1; N=[G,Hm[0]];		/*  non-ordinary-singularity の場合.  */
	}else{
	    Ch=1; N=["terminal"];	/*  ordinary-singularity の場合.  */
	}
	return([Hm[1],Ch,N]);
    }else{
	return(0);	/*  singularity ではない場合.  */
    }
}

/*
 Input: 斉次多項式 F(x,y,z),G(x,y,z).
 Output: 連立方程式F(x,y,z)=0,G(x,y,z)=0 の解。
*/

def intersect(F,G){
    if(gcd(F,G)!=1){
	return("***two curve have common components***");
    }

    P=[];

    if(subst(F,x,1,y,0,z,0)==0 && subst(G,x,1,y,0,z,0)==0)
	P=cons([1,0,0],P);

    F0=subst(F,y,1,z,0); G0=subst(G,y,1,z,0);
    H=fctr(gcd(F0,G0)); L=length(H);
    for(I=1; I<L; I++){		/* 本当に H[0][0] は必ず定数という仕様か？ */
	H_=H[I][0];
        if(deg(H_,x)==1)
	    P=cons([lzero(H_,x),1,0],P);
	else
	    P=cons([newalg(H_),1,0],P);
    }

    F_=subst(F,z,1); G_=subst(G,z,1);
    M=deg(F_,y); N=deg(G_,y);
    A=coef(F_,M,y); B=coef(G_,N,y); C=gcd(A,B);

    R=fctr(res(y,F_,G_)); L=length(R);

    for(I=1; I<L; I++){
	X=R[I][0];
	if(srem(C,X)==0){
	    if(deg(X,x)==1){
		X=lzero(X,x);
		S=fctr(gcd(subst(F_,x,X),subst(G_,x,X)));
		K=length(S);
		for(J=1; J<K; J++){
		    T=S[J][0];
		    if(deg(T,y)==1)
			P=cons([X,lzero(T,y),1],P);
		    if(deg(T,y)>=2)
			P=cons([X,newalg(T),1],P);
		}
	    }else{
		Al=newalg(X);
		FF=simpalg(subst(F_,x,Al));
		GG=simpalg(subst(G_,x,Al));
		if(deg(FF,y)>=1 && deg(GG,y)>=1){
		    S=af(cr_gcda(monic(FF,y),monic(GG,y)),[Al]);
		    K=length(S);
		    for(J=0; J<K; J++){
			T=S[J][0];
			if(deg(T,y)==1)
			    P=cons([Al,lzeroa(T,y),1],P);
			else{
			    if(deg(T,y)!=0)
				P=cons([Al,newalg(T),1],P);
			}
		    }
		}
	    }
	}else{
	    if(deg(X,x)==1){
		X=lzero(X,x);
		S=fctr(gcd(subst(F_,x,X),subst(G_,x,X)));
		K=length(S);
		for(J=1; J<K; J++){
		    T=S[J][0];	
		    if(deg(T,y)==1)
			P=cons([X,lzero(T,y),1],P);
		    else
			P=cons([X,newalg(T),1],P);
		}	
	    }else{
		Al=newalg(X);
		FF=simpalg(subst(F_,x,Al));
		GG=simpalg(subst(G_,x,Al));
/* 
本来なら
	S=af(cr_gcda(monic(FF,y),monic(GG,y)),[Al]);
と書けばよいが、Asirのbugのため以下のように書く。
*/
if(FF==0)
    S=af(GG,[Al]);

if(GG==0)
    S=af(FF,[Al]);

if(FF!=0 && GG!=0)
    S=af(cr_gcda(monic(FF,y),monic(GG,y)),[Al]);
/* 以上 */
		K=length(S);
		for(J=0; J<K; J++){
		    T=S[J][0];
		    if(deg(T,y)==1)
			P=cons([Al,lzeroa(T,y),1],P);
		    else{
			if(deg(T,y)!=0)
			    P=cons([Al,newalg(T),1],P);
		    }
		}
	    }
	}
    }
    return(P);
}

/*
 Input: 係数に代数的数を含む多項式F. F の主変数Var.
 Output: F を定数倍してVar に関するモニックな多項式に直す。
*/

def monic(F,Var){
    if(F==0){
	return(0);
    }else{
	N=deg(F,Var); A=coef(F,N,Var);
    	return(simpalg(F/A));
    }
}
end$
