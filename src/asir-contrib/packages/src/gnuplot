/* $OpenXM: OpenXM/src/asir-contrib/packages/src/gnuplot,v 1.8 2000/02/07 04:46:25 takayama Exp $ */

Gnuplot_proc = -1$
#define GNUPLOT_FIND_PROC(P)  P = getopt(proc);\
                          if (type(P) == -1) {\
                             P = gnuplot_find_proc();\
                          }

def gnuplot_find_proc() {
  extern Gnuplot_proc;
  if (Gnuplot_proc == -1) {
     A = ox_get_serverinfo();
     /* Look for ox_sm1_for_gnuplot. Not yet written */
     /* Start sm1 automatically if there is not ox_sm1 */
     Gnuplot_proc = gnuplot_start();
  }
  return(Gnuplot_proc);
}

/*&C-texi
@c DO NOT EDIT THIS FILE   oxgnuplot.texi
*/
/*&jp-texi
@node GNUPLOT 函数,,, Top
@chapter GNUPLOT 函数

この節では GNUPLOT の ox サーバ @code{ox_sm1_gnuplot}
とのインタフェース関数を解説する.
これらの関数はファイル  @file{gnuplot} で定義されている.
@code{gnuplot} は
@file{$(OpenXM_HOME)/lib/asir-contrib/} にある.
*/
/*&eg-texi
@node GNUPLOT Functions,,, Top
@chapter GNUPLOT Functions

This chapter describes  interface functions for
GNUPLOT ox server @code{ox_sm1_gnuplot}.
These interface functions are defined in the file @code{gnuplot}.
The file @file{gnuplot} is at @*
@file{$(OpenXM_HOME)/lib/asir-contrib}.
*/
/*&C-texi
@example
[nobuki@@yama doc]$ asir
This is Asir, Version 991116.
Copyright (C) FUJITSU LABORATORIES LIMITED.
3 March 1994. All rights reserved.
[155] load("xm");
1
xm Version 19991109. ox_help(0); ox_help("keyword"); for help message 
[255] gnuplot_start();
0
[257] gnuplot("plot sin(x**2);");
0
@end example
*/
/*&eg-texi
The function
@code{heat}(@var{dt},@var{step}) demonstrates our gnuplot interface.
It numerically solves the heat equation
@tex
$$   {{\partial u}\over{\partial t}} =  {{\partial^2 u}\over{\partial x^2}},
\quad u(t,0) = u(t,1) =1
$$
with the initial condition
$$  u(0,x) = x, \  (0 \leq x \leq 0.5), \quad
    u(1,x) = 1-x, \  (0.5 \leq x \leq 1)
$$
by the explicit scheme for $0 \leq t \leq \hbox{\it dt}*\hbox{\it step}$.
@end tex
The segment [0,1] is devided into @code{Heat_N} segments.
If the celebrated Courant-Friedrichs-Levi number
@var{dt}*@code{Heat_N}*@code{Heat_N} is less than or equal to 0.5,
then the explicit scheme is numerically stable.
One can observe the instability by changing CFL number.
@example
  Heat_N=20; heat(0.001,30);   (CFL number is 0.4)
  Heat_N=20; heat(0.003,30);   (CFL > 0.5 unstable)
@end example
*/
/*&jp-texi
関数
@code{heat}(@var{dt},@var{step}) はわれわれの GNUPLOT インタフェース関数のデモ
である.
この関数は熱伝導方程式
@tex
$$   {{\partial u}\over{\partial t}} =  {{\partial^2 u}\over{\partial x^2}},
\quad u(t,0) = u(t,1) =1
$$
を初期条件
$$  u(0,x) = x, \  (0 \leq x \leq 0.5), \quad
    u(1,x) = 1-x, \  (0.5 \leq x \leq 1)
$$
で陽的差分法を用いて
時間が $0 \leq t \leq \hbox{\it dt}*\hbox{\it step}$ の範囲で解く.
@end tex
区間 [0,1] は @code{Heat_N} 個に分割される.
有名な Courant-Friedrichs-Levi 数
@var{dt}*@code{Heat_N}*@code{Heat_N} が 0.5 以下であれば,
陽的差分スキームは安定である.
CFL を変えることにより, 不安定性が生じるのを観察できる.
@example
  Heat_N=20; heat(0.001,30);   (CFL number is 0.4)
  Heat_N=20; heat(0.003,30);   (CFL > 0.5 unstable)
@end example
*/
/*&C-texi
Author of @code{GNUPLOT}: Thomas Williams, Colin Kelley
*/

/*&jp-texi
@section 函数一覧
*/ 
/*&eg-texi
@section Functions
*/ 
/*&jp-texi
@menu
* gnuplot_start::
@end menu
@node gnuplot_start,,, GNUPLOT 函数
@subsection @code{gnuplot_start}
@findex gnuplot_start
@table @t
@item gnuplot_start()
::  Localhost で @code{ox_sm1_gnuplot} を起動する.
@end table

@table @var
@item return
整数
@end table

@itemize @bullet
@item Localhost で @code{ox_sm1_gnuplot} を起動する.
    起動された @code{ox_sm1_gnuplot} の識別番号を戻す.
@item @code{Xm_noX =1} としておくと, @code{ox_sm1_gnuplot} 用の debug window が開かない.
@item 識別番号は, @code{Gnuplot_proc} に格納される.
@end itemize
*/
/*&eg-texi
@menu
* gnuplot_start::
@end menu
@node gnuplot_start,,, GNUPLOT Functions
@subsection @code{gnuplot_start}
@findex gnuplot_start
@table @t
@item gnuplot_start()
::  Start  @code{ox_sm1_gnuplot} on the localhost.
@end table

@table @var
@item return
Integer
@end table

@itemize @bullet
@item Start @code{ox_sm1_gnuplot} on the localhost.
    It returns the descriptor of @code{ox_sm1_gnuplot}.
@item Set @code{Xm_noX = 1} to start @code{ox_sm1_gnuplot} without a debug window.
@item The descriptor is stored in @code{Gnuplot_proc}.
@end itemize
*/
/*&C-texi
@example
P = gnuplot_start();
@end example
*/
/*&jp-texi
@table @t
@item 参照
@code{ox_launch}, @code{gnuplot}
@end table
*/
/*&eg-texi
@table @t
@item Reference
@code{ox_launch}, @code{gnuplot}
@end table
*/
/*  Code for open gnuplot */
#define PROCESS_MAX  20
Gnuplot_pid = newvect(20) $
def gnuplot_start() {
  extern Xm_unix;
  if (ox_ostype()[0] == "windows" && Xm_unix == 0)
    return gnuplot_start_windows(0);
  else
    return gnuplot_start_unix();
}
def gnuplot_start_unix() {
  extern Gnuplot_pid;
  extern Xm_noX;
  extern Gnuplot_proc;
  extern Sm1_lib;
  if (Xm_noX) {
    P = ox_launch_nox(0,Sm1_lib+"/bin/ox_sm1_gnuplot");
  }else{
    P = ox_launch(0,Sm1_lib+"/bin/ox_sm1_gnuplot");
  }
  if (P < 0) error("ox_sm1_gnuplot is not found.");
  if (P >= PROCESS_MAX) error("Too many process. Increase PROCESS_MAX in xm.");
  T = 0;
  if (T == -1) {
    Gnuplot_pid[P] = -1;
    print(" Output to stdout and a file for debugging. ");
  }else{
    if (Gnuplot_pid[P] == 0) {
     sm1(P," [(parse) (gnuplot.sm1) pushfile] extension");
     sm1(P," plotstart.aux ");  /* path for gnuplot_forox
                                   is set to this function */
     sm1(P," gnuplot.pid ");
     Gnuplot_pid[P] = sm1_pop(P);
    }
  }
  ox_check_errors(P);
  Gnuplot_proc = P;
  return(P);
}

def gnuplot_start_windows(S) {
  error("The componet gnuplot has not yet been implemented on Windows(native).");
}

def gnuplot_isAlive(P) {
  extern Gnuplot_pid;
  if (Gnuplot_pid[P] == -1) return(0);
  sm1(P," [(getchild)] extension ");
  Gnuplot_pidList = sm1_pop(P);
  N = length(Gnuplot_pidList);
  for (I=0; I<N; I++) {
    if (Gnuplot_pidList[I] == Gnuplot_pid[P]) return(1);
    if (I == N-1) { 
      error("Error in gnuplot_isAlive. No gnuplot_forox"); 
    }
  }
}


/*&eg-texi
@menu
* gnuplot::
@end menu
@node gnuplot,,, GNUPLOT Functions
@subsection @code{gnuplot}
@findex gnuplot
@table @t
@item gnuplot(@var{s}|proc=@var{p})
::  Ask GNUPLOT to execute the command string @var{s}.
@end table

@table @var
@item return
Void
@item p
Number
@item s
String
@end table

@itemize @bullet
@item
 The server executes the gnuplot command @var{s}.  
  When an error occurs,
  the gnuplot itself terminates and ox_sm1_gnuplot server automatically 
  restarts gnuplot.
@item
    gnuplot does not accept a long polynomial.
@item
    gnuplot does not accept @code{^}. Use @code{**} instead.
@end itemize
*/
/*&jp-texi
@menu
* gnuplot::
@end menu
@node gnuplot,,, GNUPLOT 函数
@subsection @code{gnuplot}
@findex gnuplot
@table @t
@item gnuplot(@var{s}|proc=@var{p})
::  GNUPLOT にコマンド @var{s} を実行してもらう.
@end table

@table @var
@item return
なし
@item p
数
@item s
文字列
@end table

@itemize @bullet
@item
 サーバは GNUPLOT のコマンド @var{s} を実行する.  
 エラーがおきた場合 GNUPLOT 本体は終了してしまうが,
 @code{ox_sm1_gnuplot} は自動的に GNUPLOT 本体をリスタートする.
@item
   GNUPLOT は長い多項式をただしくうけつけない.
@item
   GNUPLOT は @code{^} をうけつけない. かわりに, @code{**} を使う.
@end itemize
*/
/*&C-texi
@example
[232] P = gnuplot_start();
0
*Plot 3 dimensional graph.
[233] gnuplot("splot x**2-y**2;"|proc=P);
0
*Plot 2 dimensional graph.
[234] gnuplot("plot [-pi:pi] [-2:2] cos(x);");
0
*Output a graph as a postscript figure.
[235] gnuplot_output(|file="hoge.eps");
0
[236] gnuplot("plot sin(x)*cos(x);");
0
[237] gnuplot(|file="x11");
0

*Plot 3 dimensional graph hiding unvisible lines.
[236] gnuplot("set hidden3d");
0
[237] gnuplot("splot (x**2+y**2)*sin(x**2+y**2)");
0
[238] gnuplot("set isosamples 50");
0
[239] gnuplot("splot (x**2+y**2)*sin(x**2+y**2)");

@end example
*/
/*&eg-texi
@table @t
@item Reference
    @code{ox_launch}, @code{gnuplot_start}, @code{rtostr}, 
    @code{gnuplot_plot_dots}
@item Reference Book
    Yabuki Michiro, Otake Tuyoshi; Tukai konasu GNUPLOT, Techno Press,
    in Japansese,  ISBN4-924998-11-7
@end table
*/
/*&jp-texi
@table @t
@item 参照
    @code{ox_launch}, @code{gnuplot_start}, @code{rtostr}, 
    @code{gnuplot_plot_dots}
@item 参考書
    矢吹道郎, 大竹つよし; 使いこなす GNUPLOT, テクノプレス,
    ISBN4-924998-11-7
@end table
*/


def gnuplot(S) {
  extern Gnuplot_pid;
  GNUPLOT_FIND_PROC(P) ;
  if (gnuplot_isAlive(P) == 1) {
    if (Gnuplot_pid[P] == -1) {
      print("$ "+S+" $"+" gnuplot pop ");
    }else{
      sm1(P,"$ "+S+" $"+" gnuplot pop ");
      ox_check_errors2(P);
    }
  }else{
    print("Gnuplot got an error by the previous command. Restarting gnuplot.");
    sm1(P," plotstart.aux  gnuplot.pid ");
    Gnuplot_pid[P] = sm1_pop(P);
    if (Gnuplot_pid[P] == 0) {
      error("Gnuplot_pid is 0. We could not restart open gnuplot.");
    }
    print(["New Gnuplot_pid is ",Gnuplot_pid[P]]);
    print("Trying your command again.");
    return(gnuplot(S|proc=P));
  }
}

def gnuplot_demo0() {
  print(" Type in ctrl-C, t, y, ox_reset(0); [not ox_sync(0);] ");
  for (I=0; I<500; I++) {
    gnuplot("plot cos(x+" + rtostr(I) + ");");
  }
}

/* File IO functions */
FileIsOpenInSm1 = newvect(PROCESS_MAX)$
def openfile(P,F,Mode) {
  extern FileIsOpenInSm1;
  sm1(P,"("+F+")" + " (" + Mode + ") file  /asir.fp set ");
  sm1(P," [(PrintDollar) 0] system_variable ");
  FileIsOpenInSm1[P] = 1;
}
def closefile(P) {
  extern FileIsOpenInSm1;
  sm1(P," asir.fp closefile ");
  FileIsOpenInSm1[P] = 0;
}  
def writeString(P,S) {
  sm1_push_int0(P,S);
  sm1(P," asir.fp 2 1 roll writestring ");
}
  
def gnuplot_clean() {
  shell("/bin/rm -rf /tmp/gnuplot-data-tmp.*");
}

def gnuplot_check_arg_plotDots(C,Style,Fname) {
  if (type(C) != 4) {
    error(Fname+": example:  gnuplot_plot_dots(0,[[1.2, 3.0], [3.4, 5]]<== list of lists,0)");
  }
  N = length(C);
  for (I=0; I<N; I++) {
    if (type(C[I]) != 4) {
      error(Fname+": example:  gnuplot_plot_dots(0,[[1.2, 3.0],<== list of two elements [3.4, 5]],0)");
    }
    if (length(C[I]) != 2) {
      error(Fname+": example:  gnuplot_plot_dots(0,[[1.2, 3.0],<== list of two elements [3.4, 5]],0)");
    }
    if (! (type(C[I][0]) == 0 || type(C[I][0]) == 1)) {
      error(Fname+": example:  gnuplot_plot_dots(0,[[1.2,<== give a number 3.0], [3.4, 5]],0)");
    }
  }
  return(1);
}

/*&eg-texi
@menu
* gnuplot_plot_dots::
@end menu
@node gnuplot_plot_dots,,, GNUPLOT Functions
@subsection @code{gnuplot_plot_dots}
@findex gnuplot_plot_dots
@table @t
@item gnuplot_plot_dots(@var{d},@var{s}|proc=@var{p})
::  Plot the dots @var{d} with the style @var{s}.
@end table

@table @var
@item return
Void
@item p
Number
@item d
List
@item s
String or 0
@end table

@itemize @bullet
@item
 Plot the dots @var{d} with the style @var{s}.
    @var{s} is a string of the form
      "style color point".
    Here,
       style can be lines, points, linespoints, impulses, dots, steps, 
       errorbars, boxes, boxerrorbars.
       color can be 1 (red), 2 (green), 3 (blue), 4, ... , 8.
       point can be a number from 1 to 8.
    The color and point field can be omitted.
@item
 When @var{d} == @code{[  ]}, the screen will be cleared.
@end itemize
*/
/*&jp-texi
@menu
* gnuplot_plot_dots::
@end menu
@node gnuplot_plot_dots,,, GNUPLOT 函数
@subsection @code{gnuplot_plot_dots}
@findex gnuplot_plot_dots
@table @t
@item gnuplot_plot_dots(@var{d},@var{s}|proc=@var{p})
::  点の集合 @var{d} をスタイル @var{s} でプロットする.
@end table

@table @var
@item return
なし
@item p
数
@item d
リスト
@item s
文字列 または 0
@end table

@itemize @bullet
@item
 点集合 @var{d} をスタイル @var{s} でプロットする.
    @var{s} は次のような文字列:
      "style color point".
    ここで
       style には lines, points, linespoints, impulses, dots, steps, 
       errorbars, boxes, boxerrorbars
       を選べる.
       color には 1 (red), 2 (green), 3 (blue), 4, ... , 8
       を選べる.
       point は 1 から 8 の数を入れる.
    color, point は省略してよい.
@item
  @var{d} == @code{[  ]} のときはスクリーンがまず消去される.
@end itemize
*/
/*&C-texi
@example
[239] P = gnuplot_start();
0
[240] gnuplot_plot_dots([ ],0);            
0
[241] for (I=0; I<10; I++) gnuplot_plot_dots([[I,I^2]]," lines ");
[242] A = [ ];
[]
[243] for (I=0; I<10; I++) A = append(A,[ [I,I^2]]);
[244] A;
[[0,0],[1,1],[2,4],[3,9],[4,16],[5,25],[6,36],[7,49],[8,64],[9,81]]
[245] gnuplot_plot_dots(A," lines ");
0
@end example
*/
/*&jp-texi
@table @t
@item 参照
    @code{gnuplot_start}, @code{plot "fileName" with options}(GNUPLOT command),
    @code{gnuplot_clean}, @code{gnuplot}
@end table
*/
/*&eg-texi
@table @t
@item Reference
    @code{gnuplot_start}, @code{plot "fileName" with options}(GNUPLOT command),
    @code{gnuplot_clean}, @code{gnuplot}
@end table
*/


/* For the backward compatibility */
def gnuplot_plotDots(C,Style) {
  return(gnuplot_plot_dots(C,Style));
}

/* gnuplot_plot_dots(0,[ [1.2, 3.0], [34,24.5] ],0); */
def gnuplot_plot_dots(C,Style) {
  extern Gnuplot_Roots;
  extern Gnuplot_pid;
  GNUPLOT_FIND_PROC(P);
  if (type(C) == 0) { C = [ ] ; }
  gnuplot_check_arg_plotDots(C,Style,"Error in gnuplot_plot_dots");
  Tfile = "/tmp/gnuplot-data-tmp."+rtostr(Gnuplot_pid[P])+".t";
  if (C == [ ]) {
    /* Clean the data file. */
    openfile(P,Tfile,"w");
    closefile(P);
    return(sm1_pop(P));
  }else{
    openfile(P,Tfile,"a");
    A = " ";
    for (I=0; I<length(C); I++) {
      A = A + rtostr(C[I][0])+ "   "+ rtostr(C[I][1])+ "\n"; 
      /* print(A); */
    }
    Gnuplot_Roots = C;
    writeString(P,A);
    closefile(P);
    /* draw */
    if ( type(Style) != 7 ) {
       gnuplot(" plot '"+ Tfile + "' ; "|proc=P);
    }else{
       gnuplot(" plot '"+ Tfile + "' with " + Style + " ; "|proc=P);
    }
    return;
  }
}

def complexToVec(A) {
 return([real(A),imag(A)]);
}

/* gnuplot_plotRoots(x^4-1) */
def gnuplot_plotRoots(F) {
  GNUPLOT_FIND_PROC(P);
  B = vtol(pari(roots,F));
  B = map(complexToVec,B);
  print(B);
  gnuplot_plot_dots([ ],0|proc=P);
  gnuplot_plot_dots(B,0|proc=P);
  return(B);
}


def gnuplot_demo2() {
  gnuplot(" plot sin(x); ");
  /* Do I need a wait ? */ 
  for (I=0 ; I<10000; I++) {
     fctr(x^2-1);
  }
  /* Do I need to flush the sm1 socket? */
  gnuplot_plot_dots([[1.2, 3.4]],0);
}

/** heat equation **/

/*  Texts/text-96/A5/text/heat.asir */
/*  1996, 4/20  熱伝導方程式を差分法で解く。   */
/*   初期条件は  a(x) = x (0<x<0.5 の範囲),  1-x ( 0.5<x<1 の範囲).  */

Heat_N = 20$     /* Mesh 分割数, Heat_N=5 */
/* K = 0.02;  時間差分 Kの例。 */
/* M = 3;     時間ステップ数 M の例。 */
/* heat(0.02,3); と実行する。*/
/* Ex: Heat_N=20; heat(0.001,30);   CFL = 0.4 */
/* Ex: Heat_N=20; heat(0.003,30);   CFL > 0.5 unstable */

def heat(K,M) {
  extern Heat_N ;
  H = 1.0/Heat_N;   /* 空間差分 */
  print("時間差分K=",0); print(K);
  print("CFL条件 K/(H*H) (<= 0.5): ",0); print(K/(H*H));

  A = newvect(Heat_N+1);
  B = newvect(Heat_N+1);

  A[0] = 0; A[Heat_N] = 0;
  /* 初期条件の設定 */
  for (Q=1; Q<Heat_N; Q++) {
     if (Q <= idiv(Heat_N,2)) {
        A[Q] = H*Q;
     }else{
        A[Q] = 1-H*Q;
     }
  }

  print("初期ベクトル: ",0); print(A);

  gnuplot_plot_dots([],0);
  for (P=1; P<=M; P++) {
    B[0] = 0; B[Heat_N]=0;
    for (Q=1; Q<Heat_N; Q++) {
      B[Q] = A[Q] + (K/(H*H))*(A[Q+1]-2*A[Q]+A[Q-1]);
    }
    print("Time=",0); print(P*K,0); print(":  ",0); print(B);
    /* code for DISPLAY  */
    C = [ ];
    for (I=0; I<Heat_N+1; I++) {
       C = append(C,[[I,B[I]]]);
    }
    /*gnuplot_plot_dots([ ],0); */
    gnuplot_plot_dots(C,"lines");
    /* or    gnuplot_plot_dots(C,0); */
     /*-------------------*/
    A = B;
  }
}

def gnuplot_output() {
  GNUPLOT_FIND_PROC(P) ;
  T = getopt(file); 
  if (type(T) == -1 || type(T) != 7) {
       print("Usage of gnuplot_output: gnuplot_output(|file=\"string\")")$
       print("                         gnuplot_output(|file=\"x11\")")$
       print("Output device is set to X11")$
	   gnuplot("set terminal x11" | proc=P);
       return(0);
  }
  if (T == "x11") {
       print("Output device is set to X11")$
	   gnuplot("set terminal x11" | proc=P);
	   return(0);
  }
  gnuplot("set terminal postscript eps color"| prec=P);
  gnuplot("set output \""+T+"\"" | prec=P);
  print("Graphic output of GNUPLOT will be written to "+T+" as a Poscript file.");
  return(0);
}


/*&eg-texi
@menu
* gnuplot_output::
@end menu
@node gnuplot_output,,, GNUPLOT Functions
@subsection @code{gnuplot_output}
@findex gnuplot_output
@table @t
@item gnuplot_output(|@var{file=s})
::  ask @code{GNUPLOT} to output graphic to the file @var{s} in the Postscript format.
@end table

@table @var
@item return
Void
@item s
String
@end table

@itemize @bullet
@item ask @code{GNUPLOT} to output graphic to the file @var{s} in the Postscript format.
@item When @code{s} is "x11" or this function is called without the argument, 
the output will be written to X11 display.
@end itemize
*/
/*&jp-texi
@menu
* gnuplot_output::
@end menu
@node gnuplot_output,,, GNUPLOT 関数
@subsection @code{gnuplot_output}
@findex gnuplot_output
@table @t
@item gnuplot_output(|@var{file=s})
::  @code{GNUPLOT} にファイル @var{s} へポストスクリプトで出力するように頼む.
@end table

@table @var
@item return
Void
@item s
String
@end table

@itemize @bullet
@item  @code{GNUPLOT} にファイル @var{s} へポストスクリプトで出力するように頼む.
@item @code{s} が "x11" または, この関数を引数無しでよぶと,
以後, X11 の display に graphics が出力される.
@end itemize
*/

/*&C-texi
@example
[273] gnuplot_output(|file="hoge.eps");
Graphic output of GNUPLOT will be written to hoge.eps as a Poscript file.
0
[274] gnuplot("plot tan(x)+sin(x);");
0
[275] gnuplot_output();
Usage of gnuplot_output: gnuplot_output(|file="string")
                         gnuplot_output(|file="x11")
Output device is set to X11
@end example
*/

/*&eg-texi
@table @t
@item Reference
    @code{gnuplot}
@end table
*/
/*&jp-texi
@table @t
@item 参照 
    @code{gnuplot}
@end table
*/

/* Replacing ^ by **  */
def gnuplot_to_gnuplot_format_old(F) {
    G = rtostr(F);
    GS=sm1_to_ascii_array(G);
    N = length(GS);
    GS = newvect(N,GS);
    GS2 = newvect(2*N);
    Times = sm1_to_ascii_array("*")[0];
    Power = sm1_to_ascii_array("^")[0];
    J = 0;
    for (I=0; I<N; I++) {
      GS2[J] = GS[I];
      if (GS[I] == Power) {
        GS2[J] = Times;
        J++;
        GS2[J] = Times;
      }
      J++;
    }
    /* print(GS2); */
    return(sm1_from_ascii_array(vtol(GS2)));
}
/* Replacing ^ by **  */
def gnuplot_to_gnuplot_format(F) {
  A = ctrl("fortran_output");
  ctrl("fortran_output",1);
  S = rtostr(F);
  ctrl("fortran_output",A);
  return(S);
}

def gnuplot_plot_function(F) {
  GNUPLOT_FIND_PROC(P) ;
  if (type(F) == 4) { /* In case of list */
    S = " ";
    for (I=0; I<length(F)-1; I++) {
      T = gnuplot_to_gnuplot_format(F[I]);
      S = S+T+", ";
    }
    S = S+ gnuplot_to_gnuplot_format(F[length(F)-1]);
    gnuplot("plot "+S | proc=P)	;
  }else {
    S = gnuplot_to_gnuplot_format(F);
    gnuplot("plot "+S | proc=P)	;
  }
  return(0);
}

/*&eg-texi
@menu
* gnuplot::
@end menu
@node gnuplot_plot_function,,, GNUPLOT Functions
@subsection @code{gnuplot_plot_function}
@findex gnuplot_plot_function
@table @t
@item gnuplot(@var{f}|proc=@var{p})
::  ask the @code{gnuplot} server to draw a graph of @var{f}
@end table

@table @var
@item return
Void
@item p
Number
@item f
Polynomial or a list of polynomials
@end table

@itemize @bullet
@item ask the @code{gnuplot} server to draw a graph of @var{f}
@end itemize
*/

/*&jp-texi
@menu
* gnuplot::
@end menu
@node gnuplot_plot_function,,, GNUPLOT 函数
@subsection @code{gnuplot_plot_function}
@findex gnuplot_plot_function
@table @t
@item gnuplot(@var{f}|proc=@var{p})
::  @code{gnuplot} サーバに @var{f} のグラフを書くように頼む.
@end table

@table @var
@item 戻り値
なし
@item p
数
@item f
多項式または多項式のリスト
@end table

@itemize @bullet
@item @code{gnuplot} サーバに @var{f} のグラフを書くように頼む.
@end itemize
*/
/*&C-texi

@example
[290] gnuplot_plot_function((x+sin(x))^2);
0
[291] gnuplot_plot_function([x,x^2,x^3]);
0
@end example

*/

/*&eg-texi
@table @t
@item Reference
    @code{gnuplot_to_gnuplot_format}
@end table
*/
/*&jp-texi
@table @t
@item 参照
    @code{gnuplot_to_gnuplot_format}
@end table
*/


end$

