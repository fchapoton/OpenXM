/* $OpenXM: OpenXM/src/asir-contrib/packages/src/oxrfc103.rr,v 1.2 2002/12/09 02:20:48 takayama Exp $ */

/* BUG: If you load glib, then you have to reset "register_handler"
*/

Xm_rfc103_reset=1$
Xm_rfc103_shared=0$
/* format [ [name,value], [name,value], .... ] */

def ox103_get_server_type(L) {
  return L[1][0][1];
}
def ox103_is_supported(L) {
  Name = ox103_get_server_type(L);
  if ((Name == "ox_asir") || (Name == "ox_sm1") ||
      (Name == "Ox_system=ox_sm1_ox_sm1_forAsir")) return 1;
  else return 0;
}
def ox103_reset_is_supported(L) {
  Name = ox103_get_server_type(L);
  if ((Name == "ox_asir") || (Name == "ox_sm1") || (Name == "ox_plot") ||
      (Name == "Ox_system=ox_sm1_ox_sm1_forAsir")) return 1;
  else return 0;
}

/*&usage:
  ox103_reset()
end: */
def ox103_reset() {
  extern Xm_rfc103_reset;
  if (Xm_rfc103_reset) {
    L = ox_get_serverinfo();
    for (I=0; I<length(L); I++) {
      if (ox103_reset_is_supported(L[I])) {
        ox_reset(L[I][0]);
      }
    }
    for (I=0; I<length(L); I++) {
      Name = ox103_get_server_type(L[I]);
      if (Name == "ox_plot") {
         /*  glib specific */
      }else if (Name == "ox_sm1") {
         /* sm1 specific */
      }
    }
  }
}
/*  ******   register_handler ******** */
register_handler(ox103_reset)$

/*&usage:
  ox103_set_shared_variable(Name,Value)
  example: ox103_set_shared_variable("Tlimit",30);
  ref: ox103_valueof_shared_variable
end: */
def ox103_set_shared_variable(Name,Value) {
  extern Xm_rfc103_shared;
  X = Xm_rfc103_shared;
  Found = 0;
  eval_str(Name+"="+rtostr(Value)); /* BUG: it does not work.
                                    Because Name is not declared as a extern*/
  if (X == 0) {
    Xm_rfc103_shared =[[Name,Value]];
  }else{
    L = newvect(length(X),X);
    for (I=0; I<length(X); I++) {
      if (Name == L[I][0]) {
        L[I] = [Name, Value];
        Found = 1; break;
      }  
    }
    if (Found) {
      Xm_rfc103_shared=vtol(L);
    }else{
      Xm_rfc103_shared = append(Xm_rfc103_shared,[[Name,Value]]);
    }
  }
  L = ox_get_serverinfo();
  for (I=0; I<length(L); I++) {
    if (ox103_is_supported(L[I])) {
      ox_cmo_rpc(L[I][0],"ox103_set_shared_variable",Name,Value);
    }
  }
  for (I=0; I<length(L); I++) {
    if (ox103_is_supported(L[I])) {
      print(ox_pop_cmo(L[I][0]));
      /* ox_pop_cmo(L[I][0]); check if it is error or not. */
    }
  }
  return [Name,Value];
}

/*&usage:
  ox103_set_all_shared_variable()
  ref: ox103_set_shared_variable
*/
def ox103_set_all_shared_variable() {
  extern Xm_rfc103_shared;
  X = Xm_rfc103_shared;
  if (X != 0) {
    N = length(X);
    for (I=0; I<N; I++) {
      eval_str(X[I][0]+"="+rtostr(X[I][1])); 
    }
    L = ox_get_serverinfo();
    for (I=0; I<length(L); I++) {
      if (ox103_is_supported(L[I])) {
        ox_push_cmo(L[I][0],Xm_rfc103_shared);
        ox_push_cmo(L[I][0],"Xm_rfc103_shared");
        ox_push_cmd(L[I][0],266); /* SM_setName 266 */
      }
    }
    for (I=0; I<length(L); I++) {
      if (ox103_is_supported(L[I])) {
        ox_cmo_rpc(I,"ox103_set_all_shared_variable");
      }
    }
    for (I=0; I<length(L); I++) {
      if (ox103_is_supported(L[I])) {
        print(ox_pop_cmo(I));
        /* ox_pop_cmo(I); check if it is error or not. */
      }
    }
  }
  return 1;
}

/*&usage:
  ox103_valueof_shared_variable(Name)
  ref: ox103_set_shared_variable
*/
def  ox103_valueof_shared_variable(Name) {
  extern Xm_rfc103_shared;
  X=Xm_rfc103_shared;
  for (I=0; I<length(X); I++) {
    if (X[I][0] == Name) {
      return X[I][1];
    }
  }
  return 0;
}


def ox103_test()  {
  A=ox_launch(0,"ox_asir");
  ox_launch(0,"ox_asir");
  ox_launch(0,"ox_plot");
  ox_execute_string(A,"ox_launch(0,\"ox_asir\");");
}
end$

