/* $OpenXM$ */
/* Old: Dmodule */

/*----------------------*/
/* package for D-module */
/*----------------------*/

#define _DEBUG_Dmodule_ 0

Odmodule_sm1_PID = -1$
Odmodule_Euler2D = [[1],[0,1],[0,1,1]]$

def odmodule_sm1_start() {
  extern Odmodule_sm1_PID;
  if (Odmodule_sm1_PID < 0) {
#if _DEBUG_Dmodule_
    print("starting ox_sm1_forAsir ...");
#endif
    Odmodule_sm1_PID = sm1.start();
#if _DEBUG_Dmodule_
    print("sm1 process number: ", 0); print(Odmodule_sm1_PID);
#endif
  }
  return Odmodule_sm1_PID;
}

def odmodule_sm1_restart() {
  extern Odmodule_sm1_PID;
  Odmodule_sm1_PID = sm1.start();
  return Odmodule_sm1_PID;
}

/* [x1,x2,...] -> [dx1,dx2,...] */
def odmodule_make_dv(V) {
  return odiff_make_dv(V);
}

/* [x1,x2,...] -> [tx1,tx2,...] */
/* I'm going to use this variable t* as euler operator. */
def odmodule_make_tv(V) {
  if (type(V) != 4) {
    error("parameter type error.");
  }
  Tv = [];
  for (I = 0; I < length(V); I++) {
    Tv = append(Tv, [strtov("t" + rtostr(V[I]))]);
  }
  return Tv;
}

/* [x1,x2,...] -> "x1,x2,..." */
def odmodule_var_tosm1(V) {
  if (type(V) != 4) {
    error("parameter type error.");
  }
  if (V == []) {
    return "";
  }
  V_str = rtostr(V[0]);
  for (I = 1; I < length(V); I++) {
    V_str += "," + rtostr(V[I]);
  }
#if _DEBUG_Dmodule_
  print("variables (sm1 format): ", 0); print(V_str);
#endif
  return V_str;
}

/* differential operators with polynomial coefficients -> sm1 string */
/* L_list: [ [[fa(V),[a1,...,an]],...], ... ], coefficient must be polynomial. */
def odmodule_d_op_tosm1(L_list, V) {
  return odiff_op_tosm1(L_list, V);
}

/* list form -> asir form */
def odmodule_d_op_toasir(L_list, V) {
  return odiff_op_toasir(L_list, V);
}

/* asir form -> list form */
def odmodule_d_op_fromasir(D_list, V) {
  return odiff_op_fromasir(D_list, V);
}

def odmodule_filt(V, W) {
  if (type(V) != 4 || type(W) != 4) {
    error("parameter type error.");
  }
  if (2*length(V) != length(W)) {
    error("a length of list is no match.");
  }
  V = append(V, odmodule_make_dv(V));
  Filt = [];
  for (I = 0; I < length(V); I++) {
    Filt = append(Filt, [V[I], W[I]]);
  }
  return Filt;
}

/* weight (0,...,0,1,...,1) */
def odmodule_order_filt(V) {
  OrderX = []; OrderD = [];
  for (I = 0; I < length(V); I++) {
    OrderX = append(OrderX, [V[I], 0]);
    OrderD = append(OrderD, [strtov("d" + rtostr(V[I])), 1]);
  }
  Order = append(OrderX, OrderD);
#if _DEBUG_Dmodule_
  print("order filtration: ", 0); print(Order);
#endif
  return Order;
}

/* weight (1,...,1,1,...,1) */
def odmodule_bernstein_filt(V) {
  OrderX = []; OrderD = [];
  for (I = 0; I < length(V); I++) {
    OrderX = append(OrderX, [V[I], 1]);
    OrderD = append(OrderD, [strtov("d" + rtostr(V[I])), 1]);
  }
  Order = append(OrderX, OrderD);
#if _DEBUG_Dmodule_
  print("bernstein filtration: ", 0); print(Order);
#endif
}

def odmodule_calc_w(E, W) {
  if (type(E) == 5) {
    E = vtol(E);
  }
  if (type(W) == 5) {
    W = vtol(W);
  }
  for (M = 0, I = 0; I < length(E); I++) {
    M += E[I]*W[I];
  }
  return M;
}

/* this function returns initial form of Poly with respect to weight W */
def odmodule_initial_form(Poly, W, V) {
  if (Poly == 0) {
    return 0;
  }
  Dpoly = dp_ptod(Poly, V);
  MaxW = odmodule_calc_w(dp_etov(dp_ht(Dpoly)), W);
  In = dp_dtop(dp_hm(Dpoly), V);
  Dpoly -= dp_hm(Dpoly);
  while (Dpoly != 0) {
    M = odmodule_calc_w(dp_etov(dp_ht(Dpoly)), W);
    if (MaxW < M) {
      MaxW = M;
      In = dp_dtop(dp_hm(Dpoly), V);
    }
    else if (MaxW == M) {
      In += dp_dtop(dp_hm(Dpoly), V);
    }
    Dpoly -= dp_hm(Dpoly);
  }
  return In;
}

def odmodule_min_form(Poly, W, V) {
  return odmodule_initial_form(Poly, -matrix_ltov(W), V);
}

/* a21*x^2*y+a11*x*y+a20*x^2+a01*y
   -> [a21*x^2, a11*x*y+a20*x^2, a01*y] */
def odmodule_ptogp(Poly, W, V) {
  GPoly = [];
  do {
    In = odmodule_initial_form(Poly, W, V);
    GPoly = append(GPoly, [In]);
    Poly -= In;
  } while (Poly != 0);
  return GPoly;
}

/* D_ideal: asir form, list form */
/* V: [x1,x2,...] */
def odmodule_ch_ideal(D_ideal, V) {
  Param = odiff_get_param(D_ideal, V);
#if _DEBUG_Dmodule_
  print("generic parameter: ", 0); print(Param);
#endif
  D_ideal = odiff_op_tosm1(D_ideal, V);
  Gb = sm1.gb([ D_ideal, odmodule_var_tosm1(append(V,Param)),
                [odmodule_order_filt(append(V,Param))] ]);
#if _DEBUG_Dmodule_
  print("sm1.gb: ", 0); print(Gb);
#endif
  return Gb[1];
}

def odmodule_ch_ideal_appell1(A, B1, B2, C, V) {
  return odmodule_ch_ideal(odiff_op_appell1(A, B1, B2, C, V), V);
}

def odmodule_ch_ideal_appell2(A, B1, B2, C1, C2, V) {
  return odmodule_ch_ideal(odiff_op_appell2(A, B1, B2, C1, C2, V), V);
}

def odmodule_ch_ideal_appell3(A1, A2, B1, B2, C, V) {
  return odmodule_ch_ideal(odiff_op_appell3(A1, A2, B1, B2, C, V), V);
}

def odmodule_ch_ideal_appell4(A, B, C1, C2, V) {
  return odmodule_ch_ideal(odiff_op_appell4(A, B, C1, C2, V), V);
}

def odmodule_ch_ideal_selberg2(A, B, C, S, V) {
  return odmodule_ch_ideal(odiff_op_selberg2(A, B, C, S, V), V);
}

def odmodule_ch_ideal_selberg2_1(A, B, K1, K2, V) {
  return odmodule_ch_ideal(odiff_op_selberg2_1(A, B, K1, K2, V), V);
}

def odmodule_ch_ideal_gkz(A, B, V) {
  return odmodule_ch_ideal(odiff_op_gkz(A, B, V), V);
}

/* elimination in polynomial ring */
def odmodule_poly_elimination(Ideal, V, Elim) {
  for (Var = [], I = 0; I < length(V); I++) {
    if (!odmodule_lookup(V[I], Elim)) {
      Var = append(Var, [V[I]]);
    }
  }
  GG = gr(Ideal, append(Elim, Var), 2);
  for (E_Ideal = [], I = 0; I < length(GG); I++) {
    Vars = vars(GG[I]);
    Flag = 1;
    for (J = 0; J < length(Elim); J++) {
      if (odmodule_lookup(Elim[J], Vars)) {
	Flag = 0;
	break;
      }
    }
    if (Flag == 1) {
      E_Ideal = append(E_Ideal, [GG[I]]);
    }
  }
  return E_Ideal;
}

/* this function returns singular locus of D-ideal. */
/* L_list: asir form, list form */
def odmodule_singular_locus(D_ideal, V) {
  Ch_ideal = odmodule_ch_ideal(D_ideal, V);
#if _DEBUG_Dmodule_
  print("characteristic ideal:",0);print(Ch_ideal);
#endif
  Dv = odiff_make_dv(V);
  UC_y = uc();
  for (F = 0, I = 0; I < length(Dv); I++) {
    F += UC_y^I*Dv[I];
  }
  UC_z = uc(); UC_w = uc();
  Elim = append([UC_w,UC_y,UC_z], Dv);
  Sing = odmodule_poly_elimination(append(Ch_ideal,[UC_z-F,1-UC_w*UC_z]),
                                  append(V, Elim), Elim);
  return Sing;
}

def odmodule_krull_dim(Poly_ideal, V) {
}

/* restriction to {t1=0,t2=0,...} */
/* D_ideal: asir form, list form */
/* Rest: [t1,t2,...] */
/* V: [x1,x2,...] */
def odmodule_restriction(D_ideal, V, Rest) {
  /* check if D_ideal have generic parameter. */
  Param = odiff_get_param(D_ideal, V);
#if _DEBUG_Dmodule_
  print("generic parameter: ", 0); print(Param);
#endif
  if (Param == []) {
    return odmodule_restriction_no_generic(D_ideal, V, Rest);
  }
  else {
    return odmodule_restriction_generic(D_ideal, Param, V, Rest);
  }
}

def odmodule_restriction_no_generic(D_ideal, V, Rest) {
  D_ideal = odiff_op_tosm1(D_ideal, V);
  D_ideal_str = "";
  for (I = 0; I < length(D_ideal); I++) {
    D_ideal_str += " (" + D_ideal[I] + ") ";
  }
  Rest_str = "";
  for (I = 0; I < length(Rest); I++) {
    Rest_str += " (" + rtostr(Rest[I]) + ") ";
  }
  V_str = "";
  for (I = 0; I < length(V); I++) {
    V_str += " (" + rtostr(V[I]) + ") ";
  }
  Cmd_str = "[ [" + D_ideal_str + "] [" + Rest_str + "] [[" + V_str + "] [ ]] 0 ] restriction";
#if _DEBUG_Dmodule_
  print("sm1 command string: ", 0); print(Cmd_str);
#endif
  sm1(odmodule_sm1_start(), Cmd_str);
  return sm1.pop(odmodule_sm1_start());
}

def odmodule_restriction_generic(D_ideal, Param, V, Rest) {
  D_ideal = odiff_op_tosm1(D_ideal, V);
  D_ideal_str = "";
  for (I = 0; I < length(D_ideal); I++) {
    D_ideal_str += " (" + D_ideal[I] + ") ";
  }
  Rest_str = "";
  for (I = 0; I < length(Rest); I++) {
    Rest_str += " (" + rtostr(Rest[I]) + ") ";
  }
  V_str = "";
  for (I = 0; I < length(V); I++) {
    V_str += " (" + rtostr(V[I]) + ") ";
  }
  for (I = 0; I < length(Param); I++) {
    V_str += " (" + rtostr(Param[I]) + ") ";
  }
  Cmd_str = "[ [" + D_ideal_str + "] [" + Rest_str + "] [[" + V_str + "] [ ]] 0 ] restriction";
#if _DEBUG_Dmodule_
  print("sm1 command string: ", 0); print(Cmd_str);
#endif
  sm1(odmodule_sm1_start(), Cmd_str);
  return sm1.pop(odmodule_sm1_start());
}

def odmodule_restriction_appell1(A, B1, B2, C, V, Rest) {
  return odmodule_restriction(odiff_op_appell1(A, B1, B2, C, V), V, Rest);
}

def odmodule_restriction_appell2(A, B1, B2, C1, C2, V, Rest) {
  return odmodule_restriction(odiff_op_appell2(A, B1, B2, C1, C2, V), V, Rest);
}

def odmodule_restriction_appell3(A1, A2, B1, B2, C, V, Rest) {
  return odmodule_restriction(odiff_op_appell3(A1, A2, B1, B2, C, V), V, Rest);
}

def odmodule_restriction_appell4(A, B, C1, C2, V, Rest) {
  return odmodule_restriction(odiff_op_appell4(A, B, C1, C2, V), V, Rest);
}

def odmodule_restriction_selberg2(A, B, C, S, V, Rest) {
  return odmodule_restriction(odiff_op_selberg2(A, B, C, S, V), V, Rest);
}

def odmodule_restriction_selberg2_1(A, B, K1, K2, V, Rest) {
  return odmodule_restriction(odiff_op_selberg2_1(A, B, K1, K2, V), V, Rest);
}

def odmodule_restriction_gkz(A, B, V, Rest) {
  return odmodule_restriction(odiff_op_gkz(A, B, V), V, Rest);
}

def odmodule_lookup(X, List) {
  return odiff_lookup(X, List);
}

/* odmodule_assign0(Rat, [x,y,z]); -> x=0,y=0,z=0 */
def odmodule_assign0(Rat, V) {
  if (type(Rat) > 3 || type(V) != 4) {
    error("parameter type error.");
  }
  for (I = 0; I < length(V); I++) {
    Rat = subst(Rat, V[I], 0);
  }
  return Rat;
}

/* odmodule_assign(Rat, [x,y,z], [1,2]); <-> x=1,y=2,z=0 */
def odmodule_assign(Rat, V, Value) {
  if (type(Rat) > 3 || type(V) != 4 || type(Value) != 4) {
    error("parameter type error.");
  }
  for (I = 0; I < length(V); I++) {
    if (I < length(Value)) {
      Rat = subst(Rat, V[I], Value[I]);
    }
    else {
      Rat = subst(Rat, V[I], 0);
    }
  }
  return Rat;
}

/* odmodule_elimination_order([x,y,z], [y,z])
   -> [ [dy,1,dz,0,dx,0,y,0,z,0,x,0],
        [dy,0,dz,1,dx,0,y,0,z,0,x,0],
        [dy,0,dz,0,dx,1,y,0,z,0,x,0],
        [dy,0,dz,0,dx,0,y,1,z,0,x,0],
        [dy,0,dz,0,dx,0,y,0,z,1,x,0],
        [dy,0,dz,0,dx,0,y,0,z,0,x,1] ] */
def odmodule_elimination_order(V, Elim) {
  if (type(V) != 4 || type(Elim) != 4) {
    error("parameter type error.");
  }
  Dv = odmodule_make_dv(V);
  VarOrderX = Elim;  
  VarOrderD = odmodule_make_dv(Elim);
  for (I = 0; I < length(V); I++) {
    if (!odmodule_lookup(V[I], Elim)) {
      VarOrderX = append(VarOrderX, [V[I]]);
      VarOrderD = append(VarOrderD, [Dv[I]]);
    }
  }
  VarOrder = append(VarOrderD, VarOrderX);
  ElimOrder = [];
  for (I = 0; I < length(VarOrder); I++) {
    Filt = [];
    for (J = 0; J < length(VarOrder); J++) {
      if (J == I) {
	Filt = append(Filt, [VarOrder[J], 1]);
      }
      else {
	Filt = append(Filt, [VarOrder[J], 0]);
      }
    }
    ElimOrder = append(ElimOrder, [Filt]);
  }
#if _DEBUG_Dmodule_
  print("elimination order :", 0); print(ElimOrder);
#endif
  return ElimOrder;
}

/* D_ideal: asir form, list form */
/* Elim: eliminated variables and values */
/* Elim: [[x1,...,xt],[a1,...,at]] -> restrict to {x1=a1,...,xt=at} */
def odmodule_elimination(D_ideal, V, Elim) {
  /* check if D_ideal have generic parameter. */
  Param = odiff_get_param(D_ideal, V);
#if _DEBUG_Dmodule_
  print("generic parameter: ", 0); print(Param);
#endif
  D_ideal = odiff_op_tosm1(D_ideal, V);
#if _DEBUG_Dmodule_
  print("D-ideal: ", 0); print(D_ideal);
#endif
  Gb1 = sm1.gb([ D_ideal, odmodule_var_tosm1(append(V, Param)),
	         odmodule_elimination_order(append(V, Param), Elim[0]) ]);
#if _DEBUG_Dmodule_
  print("Gb1: ", 0); print(Gb1);
#endif
  Gb2 = [];
  D_Elim = odmodule_make_dv(Elim[0]);
  for (I = 0; I < length(Gb1[0]); I++) {
    Vars = vars(Gb1[0][I]);
    Flag = 0;
    for (J = 0; J < length(D_Elim); J++) {
      if (odmodule_lookup(D_Elim[J], Vars)) {
	Flag = 1;
	break;
      }
    }
    if (Flag == 0) {
      Gb2 = append(Gb2, [Gb1[0][I]]);
    }
  }
#if _DEBUG_Dmodule_
  print("Gb2: ", 0); print(Gb2);
#endif
  R_Gb = [];
  for (I = 0; I < length(Gb2); I++) {
    if ((Poly = odmodule_assign(Gb2[I], Elim[0], Elim[1])) != 0) {
      R_Gb = append(R_Gb, [Poly]);
    }
  }
#if _DEBUG_Dmodule_
  print("elimination D-ideal: ", 0); print(R_Gb);
#endif
  if (R_GB == []) {
    return [0];
  }
  else {
    return R_Gb;
  }
}

def odmodule_elimination_appell1(A, B1, B2, C, V, Elim) {
  return odmodule_elimination(odiff_op_appell1(A, B1, B2, C, V), V, Elim);
}

def odmodule_elimination_appell2(A, B1, B2, C1, C2, V, Elim) {
  return odmodule_elimination(odiff_op_appell2(A, B1, B2, C1, C2, V), V, Elim);
}

def odmodule_elimination_appell3(A1, A2, B1, B2, C, V, Elim) {
  return odmodule_elimination(odiff_op_appell3(A1, A2, B1, B2, C, V), V, Elim);
}

def odmodule_elimination_appell4(A, B, C1, C2, V, Elim) {
  return odmodule_elimination(odiff_op_appell4(A, B, C1, C2, V), V, Elim);
}

def odmodule_elimination_appell4s(R_A, R_B, R_C1, R_C2, V, Elim, Flag) {
  Res_list = [];
  for (A = R_A[0]; A <= R_A[1]; A += R_A[2]) {
    for (B = R_B[0]; B <= R_B[1]; B += R_B[2]) {
      for (C1= R_C1[0]; C1 <= R_C1[1]; C1 += R_C1[2]) {
	for (C2= R_C2[0]; C2 <= R_C2[1]; C2 += R_C2[2]) {
	  Res = odmodule_elimination_appell4(A, B, C1, C2, V, Elim);
	  print([[A,B,C1,C2],[Res]]);
	  if (Flag) {
	    Res_list = append(Res_list, [ [[A, B, C1, C2],[Res]] ]);
	  }
	}
      }
    }
  }
  return Res_list;
}

def odmodule_elimination_selberg2(A, B, C, S, V, Elim) {
  return odmodule_elimination(odiff_op_selberg2(A, B, C, S, V), V, Elim);
}

def odmodule_elimination_selberg2_1(A, B, K1, K2, V, Elim) {
  return odmodule_elimination(odiff_op_selberg2_1(A, B, K1, K2, V), V, Elim);
}

def odmodule_elimination_gkz(A, B, V, Elim) {
  return odmodule_elimination(odiff_op_gkz(A, B, V), V, Elim);
}

/* (V[0] dV[0])^N -> V[0]^N dV[0]^N + ... */
def odmodule_euler2d(N, V) {
  extern Odmodule_Euler2D;
  if (N < 0) {
    error("parameter range error.");
  }
  /* extent a table */
  if (N >= length(Odmodule_Euler2D)) {
    for (I = length(Odmodule_Euler2D); I <= N; I++) {
      List = [0];
      for (J = 1; J < I; J++) {
	List = append(List, [Odmodule_Euler2D[I-1][J-1]+J*Odmodule_Euler2D[I-1][J]]);
      }
      List = append(List, [Odmodule_Euler2D[I-1][I-1]]);
      Odmodule_Euler2D = append(Odmodule_Euler2D, [List]);
    }
  }
  /* calculate by using a table */
  Coef = Odmodule_Euler2D[N];
  Dv = odmodule_make_dv(V);
  D = 0;
  for (I = 0; I < length(Coef); I++) {
    D += Coef[I]*V[0]^I*Dv[0]^I;
  }
  return D;
}

/* Param: List, [a,b,c] */
/* Return: [[a->a+1,a->a-1],[b->b+1,b->b-1],[c->c+1,c->c-1]] */
def odmodule_contiguity_hg1(Param, V) {
  if (length(V) != 1) {
    error("a length of List V is wrong.");
  }
  A = Param[0]; B = Param[1]; C = Param[2];
  return [ [ [[V[0],[1]],[A,[0]]],[[V[0]*(1-V[0]),[1]],[C-A-B*V[0],[0]]] ],
           [ [[V[0],[1]],[B,[0]]],[[V[0]*(1-V[0]),[1]],[C-B-A*V[0],[0]]] ],
           [ [[1-V[0],[1]],[C-A-B,[0]]],[[V[0],[1]],[C-1,[0]]] ] ];
}

def odmodule_contiguity_sol_hg1(Sol, Param, V) {
  C = odmodule_contiguity_hg1(Param, V);
  C_Sol = [ odiff_acts(C[0], Sol, V),
            odiff_acts(C[1], Sol, V),
	    odiff_acts(C[2], Sol, V) ];
  return C_Sol;
}

def odmodule_contiguity_param_only(F,V) {
  Dv = odmodule_make_dv(V);
  if (deg(F,V[0]) != 0) return(0);
  if (deg(F,V[1]) != 0) return(0);
  if (deg(F,Dv[0]) != 0) return(0);
  if (deg(F,Dv[1]) != 0) return(0);
  return(F);
}

def odmodule_contiguity_generic_appell4(Param, V) {
  Dv = odmodule_make_dv(V);
  Var = append(V, vars(Param));
  Weight = [[Dv[0],1,Dv[1],1,V[0],1,V[1],1]];
  D_list = odiff_op_toasir(odiff_op_appell4(Param[0],Param[1],Param[2],Param[3],V),V);
  Cont_list = [];
  D = [V[0]*Dv[0]+V[1]*Dv[1]+Param[0],
       V[0]*Dv[0]+V[1]*Dv[1]+Param[1],
       V[0]*Dv[0]+Param[2]-1,
       V[1]*Dv[1]+Param[3]-1];

  for (II = 0; II < length(D); II++) {
    F = append([D[II]],D_list);
    G = sm1.syz([F,Var,Weight]);
    Gb = map(first,G[1][0]);
    Cont  = G[1][1];
    Ans = [ ];
    for (I=0; I<length(Gb); I++) {
      if (odmodule_contiguity_param_only(Gb[I],V) != 0) {
	Ans = append(Ans,[ [Gb[I],Cont[I][0]] ]);
	/* print(sm1.mul(C[I],F,[x,y,a,b,c,cp])); */ /* check ! */
      }
    }
    Cont_list = append(Cont_list, [[D[II],Ans[0]]]);
  }
  return Cont_list;
}

def odmodule_contiguity_appell4(Param, V) {
  if (length(V) != 2) {
    error("a length of List V is wrong.");
  }
  A = Param[0]; B = Param[1]; C1 = Param[2]; C2 = Param[3];
  /* if (A == 0 || A == C1 || A == C2 || A == C1+C2-1) {
    print("contiguity of A is not isomorphism.");
  }
  if (B == 0 || B == C1 || B == C2 || B == C1+C2-1) {
    print("contiguity of B is not isomorphism.");
  }
  if (A == C1 || B == C1 || A == C1+C2-1 || B == C1+C2-1) {
    print("contiguity of C1 is not isomorphism.");
  }
  if (A == C1 || B == C1 || A == C1+C2-1 || B == C1+C2-1) {
    print("contiguity of C2 is not isomorphism.");
  } */
  Dv = odiff_make_dv(V);
  D_A = [ /* A -> A+1 */ V[0]*Dv[0]+V[1]*Dv[1]+A,
          /* A -> A-1 */ 4*V[1]*V[0]^2*Dv[0]^2+(((-8*(A-1)+4*C1+4*C2-8)*V[1]*V[0]^2+((8*(A-1)-4*C1-4*C2+16)*V[1]^2+(8*(A-1)-4*C1-4*C2+8)*V[1])*V[0])*Dv[1]+(4*(A-1)^2+(-4*C1-8*C2+12)*(A-1)+(4*C2-4)*C1+4*C2^2-12*C2+8)*V[0]^2+((12*(A-1)^2+(-12*C1-8*C2+32)*(A-1)+4*B+4*C1^2+(4*C2-16)*C1-8*C2+24)*V[1]-4*(A-1)^2+(4*C1+8*C2-12)*(A-1)+(-4*C2+4)*C1-4*C2^2+12*C2-8)*V[0])*Dv[0]+((-8*(A-1)+4*C1+4*C2-8)*V[1]^2*V[0]+(8*(A-1)-4*C1-4*C2+12)*V[1]^3+(-8*(A-1)+4*C1+4*C2-12)*V[1]^2)*Dv[1]^2+((4*(A-1)^2+(-8*B-4*C1-8*C2+4)*(A-1)+(4*C1+4*C2-8)*B+4*C2*C1+4*C2^2-8*C2)*V[1]*V[0]+(12*(A-1)^2+(8*B-12*C1-8*C2+40)*(A-1)+(-4*C1-4*C2+12)*B+4*C1^2+(4*C2-20)*C1-12*C2+32)*V[1]^2+(-4*(A-1)^2+(8*C1-4*C2-12)*(A-1)-4*C1^2+12*C1+4*C2^2-8*C2-8)*V[1])*Dv[1]+(4*B*(A-1)^2+(-4*C1-8*C2+12)*B*(A-1)+((4*C2-4)*C1+4*C2^2-12*C2+8)*B)*V[0]+(12*B*(A-1)^2+(-12*C1-8*C2+32)*B*(A-1)+(4*C1^2+(4*C2-16)*C1-8*C2+20)*B)*V[1]+4*(A-1)^3+(-8*C1-8*C2+16)*(A-1)^2+(4*C1^2+(12*C2-20)*C1+4*C2^2-20*C2+20)*(A-1)+(-4*C2+4)*C1^2+(-4*C2^2+16*C2-12)*C1+4*C2^2-12*C2+8 ];
  D_B = [ /* B -> B+1 */ V[0]*Dv[0]+V[1]*Dv[1]+B,
          /* B -> B-1 */ 4*V[1]*V[0]^2*Dv[0]^2+(((-8*(B-1)+4*C1+4*C2-8)*V[1]*V[0]^2+((8*(B-1)-4*C1-4*C2+16)*V[1]^2+(8*(B-1)-4*C1-4*C2+8)*V[1])*V[0])*Dv[1]+(4*(B-1)^2+(-4*C1-8*C2+12)*(B-1)+(4*C2-4)*C1+4*C2^2-12*C2+8)*V[0]^2+((4*A+12*(B-1)^2+(-12*C1-8*C2+32)*(B-1)+4*C1^2+(4*C2-16)*C1-8*C2+24)*V[1]-4*(B-1)^2+(4*C1+8*C2-12)*(B-1)+(-4*C2+4)*C1-4*C2^2+12*C2-8)*V[0])*Dv[0]+((-8*(B-1)+4*C1+4*C2-8)*V[1]^2*V[0]+(8*(B-1)-4*C1-4*C2+12)*V[1]^3+(-8*(B-1)+4*C1+4*C2-12)*V[1]^2)*Dv[1]^2+(((-8*(B-1)+4*C1+4*C2-8)*A+4*(B-1)^2+(-4*C1-8*C2+4)*(B-1)+4*C2*C1+4*C2^2-8*C2)*V[1]*V[0]+((8*(B-1)-4*C1-4*C2+12)*A+12*(B-1)^2+(-12*C1-8*C2+40)*(B-1)+4*C1^2+(4*C2-20)*C1-12*C2+32)*V[1]^2+(-4*(B-1)^2+(8*C1-4*C2-12)*(B-1)-4*C1^2+12*C1+4*C2^2-8*C2-8)*V[1])*Dv[1]+(4*(B-1)^2+(-4*C1-8*C2+12)*(B-1)+(4*C2-4)*C1+4*C2^2-12*C2+8)*A*V[0]+(12*(B-1)^2+(-12*C1-8*C2+32)*(B-1)+4*C1^2+(4*C2-16)*C1-8*C2+20)*A*V[1]+4*(B-1)^3+(-8*C1-8*C2+16)*(B-1)^2+(4*C1^2+(12*C2-20)*C1+4*C2^2-20*C2+20)*(B-1)+(-4*C2+4)*C1^2+(-4*C2^2+16*C2-12)*C1+4*C2^2-12*C2+8 ];
  D_C1 = [ /* C1 -> C1+1 */ (((-A-B+2*(C1+1)+C2-3)*V[1]*V[0]+(-A-B+2*(C1+1)+C2-3)*V[1]^2+(A+B-2*(C1+1)-C2+3)*V[1])*Dv[1]+((B-(C1+1)-C2+2)*A+(-(C1+1)-C2+2)*B+(C1+1)^2+(2*C2-4)*(C1+1)+C2^2-4*C2+4)*V[0]+(-A^2+(-B+3*(C1+1)+C2-5)*A-B^2+(3*(C1+1)+C2-5)*B-3*(C1+1)^2+(-2*C2+10)*(C1+1)+3*C2-8)*V[1]+(-B+(C1+1)+C2-2)*A+((C1+1)+C2-2)*B-(C1+1)^2+(-2*C2+4)*(C1+1)-C2^2+4*C2-4)*Dv[0]+(-2*A-2*B+4*(C1+1)+2*C2-6)*V[1]^2*Dv[1]^2+(-A^2+((C1+1)-C2-2)*A-B^2+((C1+1)-C2-2)*B+(3*C2+1)*(C1+1)+2*C2^2-5*C2-1)*V[1]*Dv[1]+(B-(C1+1)-C2+2)*A^2+(B^2+(-3*(C1+1)-2*C2+5)*B+2*(C1+1)^2+(3*C2-7)*(C1+1)+C2^2-5*C2+6)*A+(-(C1+1)-C2+2)*B^2+(2*(C1+1)^2+(3*C2-7)*(C1+1)+C2^2-5*C2+6)*B-(C1+1)^3+(-2*C2+5)*(C1+1)^2+(-C2^2+6*C2-8)*(C1+1)+C2^2-4*C2+4,
           /* C1 -> C1-1 */ V[0]*Dv[0]+C1-1 ];
  D_C2 = [ /* C2 -> C2+1 */ (-2*A-2*B+2*C1+4*(C2+1)-6)*V[0]^2*Dv[0]^2+(((-A-B+C1+2*(C2+1)-3)*V[0]^2+((-A-B+C1+2*(C2+1)-3)*V[1]+A+B-C1-2*(C2+1)+3)*V[0])*Dv[1]+(-A^2+(-C1+(C2+1)-2)*A-B^2+(-C1+(C2+1)-2)*B+2*C1^2+(3*(C2+1)-5)*C1+(C2+1)-1)*V[0])*Dv[0]+((-A^2+(-B+C1+3*(C2+1)-5)*A-B^2+(C1+3*(C2+1)-5)*B+(-2*(C2+1)+3)*C1-3*(C2+1)^2+10*(C2+1)-8)*V[0]+((B-C1-(C2+1)+2)*A+(-C1-(C2+1)+2)*B+C1^2+(2*(C2+1)-4)*C1+(C2+1)^2-4*(C2+1)+4)*V[1]+(-B+C1+(C2+1)-2)*A+(C1+(C2+1)-2)*B-C1^2+(-2*(C2+1)+4)*C1-(C2+1)^2+4*(C2+1)-4)*Dv[1]+(B-C1-(C2+1)+2)*A^2+(B^2+(-2*C1-3*(C2+1)+5)*B+C1^2+(3*(C2+1)-5)*C1+2*(C2+1)^2-7*(C2+1)+6)*A+(-C1-(C2+1)+2)*B^2+(C1^2+(3*(C2+1)-5)*C1+2*(C2+1)^2-7*(C2+1)+6)*B+(-(C2+1)+1)*C1^2+(-2*(C2+1)^2+6*(C2+1)-4)*C1-(C2+1)^3+5*(C2+1)^2-8*(C2+1)+4,
           /* C2 -> C2-1 */ V[1]*Dv[1]+C2-1 ];
  return [ odiff_op_fromasir(D_A, V),
           odiff_op_fromasir(D_B, V),
           odiff_op_fromasir(D_C1, V),
           odiff_op_fromasir(D_C2, V) ];
}

/* Sol(a,b,c1,c2)->[ [Sol(a+1,b,c1,c2),Sol(a-1,b,c1,c2)],
                     [Sol(a,b+1,c1,c2),Sol(a,b-1,c1,c2)],
                     [Sol(a,b,c1+1,c2),Sol(a,b,c1-1,c2)],
                     [Sol(a,b,c1,c2+1),Sol(a,b,c1,c2-1)] ] */
def odmodule_contiguity_sol_appell4(Sol, Param, V) {
  C = odmodule_contiguity_appell4(Param, V);
  C_Sol = [ odiff_acts(C[0], Sol, V),
            odiff_acts(C[1], Sol, V),
            odiff_acts(C[2], Sol, V),
            odiff_acts(C[3], Sol, V) ];
  return C_Sol;
}

def odmodule_contiguity_selberg2(Param, V) {
  if (length(V) != 2) {
    error("a length of List V is wrong.");
  }
  A = Param[0]; B = Param[1]; C = Param[2]; S = Param[3];
}

end$
