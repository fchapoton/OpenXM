/* -*- mode: C -*- */
/* $OpenXM$ */

/*&usage begin:
hermit_hermitian_form(MF, DualRule, Basename)
hermit_hermitian_form({MF}, {DualRule}, {Basename}) returns
an invaliant hermitian form for monodromy matrices.

description:
We call a matrix H a hermitian form if
    Dual(M)*H*Trans(M) == H
for all monodromy matrices M.

This program requires some arguments;
MF        a family of monodromy matrices,
DualRule  a rule for replacing parameters,
Prefix    a basename for indefinites.

example:
[0] H = hermit_hermitian_form([A,B.C], [[a,1/a],[c,1/c],[g,1/g]], "h");

author: K.Ohara
end:
*/

def hermit_hermitian_form(MF, DualRule, Prefix) {
    if (type(MF) == 4) {
        Len = length(MF);
    }else if (type(MF) == 5) {
        Len = size(MF);
    }else {
        error("type mismatched.");
    }
	H = hermit_indefinite(Prefix, size(MF[0]));

    for(Eqs=[], I=0; I<Len; I++) {
        Eqs = append(Eqs, hermit_concat(base_replace(MF[I], DualRule)
                          *H*matrix_transpose(MF[I])-H));
    }
    return base_replace(H, poly_solve_linear(Eqs, hermit_concat(H)));
}

/* Example: hermit_indefinite("h", [2,2]) */
def hermit_indefinite(Prefix, Size) {
	/* Sepatator="_"; */
	Sepatator="";
    Row = Size[0];
    Col = Size[1];
    X = newmat(Row,Col);
    for (I=0; I<Row; I++) {
        for (J=0; J<Col; J++) {
            X[I][J]=strtov(Prefix+Separator+rtostr(I)+Separator+rtostr(J));
        }
    }
    return X;
}

def hermit_concat(L) {
    if (type(L) == 4) {
        Len = length(L);
    }else if (type(L) == 5) {
        Len = size(L);
    }else if (type(L) == 6) {
        Len = size(L)[0];
    }
    for(CL=[], I=0; I<Len; I++) {
        CL = append(CL, (type(L[I])==5)? vtol(L[I]): L[I]);
    }
    return CL;
}

/*
Example:

A = g*matrix_list_to_matrix(
[[1, 1-g , 0 ],
 [0, g*g , 0 ],
 [0, -(g-1)*g, 1]])$

B = c*matrix_list_to_matrix(
[[1, 0, 0 ],
 [0, 1, 1-c ],
 [0, 0, c*g]])$

C = a*g*matrix_list_to_matrix([
[g, 0, 0],
[(a-1)*g*g,a*g*g,0],
[-(a-1)*g*g,-(a*g-1)*g,1]
])$

MM = [A,B,C]$
D = [[a,1/a],[c,1/c],[g,1/g]]$
H = hermit_hermitian_form(MM,D,"h")$
print_xdvi_form(poly_factor(H));
*/

end$
