/*	$Id$	*/

def test( Algorithm, Test, N )
{
	if( Test == cyclic ){
		Equations = cyclic(N);
		Vars = cdr( vars(cyclic(N)) );
		Deg = length( Vars );
	} else if( Test == katsura ){
		Equations = katsura(N);
		Vars = cdr( vars(katsura(N)) );
		Deg = length( Vars );
	} else if( Test == ecyclic ){
		Tmp = ncyclic(N);
		Equations = Tmp[0];
		Vars = Tmp[1];
		Deg = length( Vars );
	} else if( Test == res112 ){
		F0 = a1*x + a2*y + a3$
		F1 = b1*x + b2*y + b3$
		F2 = c1*x^2 + c2*y^2 + c3 + c4*x*y + c5*x + c6*y$
		Equations = [F0,F1,F2];
		Vars = [x,y];
		Deg = 2;
	} else if( Test == res122 ){
		F0 = a1*x + a2*y + a3$
		F1 = b1*x^2 + b2*y^2 + b3 + b4*x*y + b5*x + b6*y;
		F2 = c1*x^2 + c2*y^2 + c3 + c4*x*y + c5*x + c6*y;
		Equations = [F0,F1,F2];
		Vars = [x,y];
		Deg = 2;
	} else if( Test == res222 ){
		F0 = a1*x^2 + a2*y^2 + a3 + a4*x*y + a5*x + a6*y;
		F1 = b1*x^2 + b2*y^2 + b3 + b4*x*y + b5*x + b6*y;
		F2 = c1*x^2 + c2*y^2 + c3 + c4*x*y + c5*x + c6*y;
		Equations = [F0,F1,F2];
		Vars = [x,y];
		Deg = 2;
	} else if( Test == res113 ){
		F0 = a1*x + a2*y + a3$
		F1 = b1*x + b2*y + b3$
		F2 = c1*x^3 + c2*x^2*y +c3*x*y^2 + c4*y^3 + c5*x^2 + c6*x*y + c7*y^2 + c8*x + c9*y + c10$
		Equations = [F0,F1,F2];
		Vars = [x,y];
		Deg = 2;
	} else if( Test == res123 ){
		F0 = a1*x + a2*y + a3$
		F1 = b1*x^2 + b2*y^2 + b3 + b4*x*y + b5*x + b6*y;
		F2 = c1*x^3 + c2*x^2*y +c3*x*y^2 + c4*y^3 + c5*x^2 + c6*x*y + c7*y^2 + c8*x + c9*y + c10$
		Equations = [F0,F1,F2];
		Vars = [x,y];
		Deg = 2;
	} else if( Test == res223 ){
		F0 = a1*x^2 + a2*y^2 + a3 + a4*x*y + a5*x + a6*y;
		F1 = b1*x^2 + b2*y^2 + b3 + b4*x*y + b5*x + b6*y;
		F2 = c1*x^3 + c2*x^2*y +c3*x*y^2 + c4*y^3 + c5*x^2 + c6*x*y + c7*y^2 + c8*x + c9*y + c10$
		Equations = [F0,F1,F2];
		Vars = [x,y];
		Deg = 2;
	} else if( Test == nagashima ){
		Equations = [x1+x2+x3+x4,x1^2+x2^2-3*x3^2+x4,3*x1+2*x2-3*x3^2+2*x4,x2*x1-x4*x3+2*x1*x3+x2,u0+u1*x1+u2*x2+u3*x3+u4*x4];
		Vars = [x1,x2,x3,x4];
		Deg = 4;
	} else {
		print("I don't know ",0);print(Test);
		return 0;
	}		

	gauger.clear();
	if( Algorithm == bres ){
		print("bres: deg=",0);print(Deg);
		gauger.check();
		R = bres( Equations, Vars );
		gauger.check();
		Time = gauger.gettime();
		print("time",0);print( gauger.diff( Time[1], Time[0] ) );
	} else if( Algorithm == mres ){
		RSC = getopt(rsc);
		print("mres: deg=",0);print(Deg);
		R = mres( Equations, Vars |rsc=RSC );
		Time = gauger.gettime();
		if( type(RSC) != (-1) && RSC == 1  ){
			print("listup",0);print( gauger.diff( Time[4], Time[3] ) );
			print("const",0);print( gauger.diff( Time[3], Time[2] ) );
			print("RSC",0);print( gauger.diff( Time[2], Time[1] ) );
			print("subtotal",0);print( gauger.diff( Time[4], Time[1] ) );
			print("det",0);print( gauger.diff( Time[1], Time[0] ) );
			print("total",0);print( gauger.diff( Time[4], Time[0] ) );
		} else {
			print("listup",0);print( gauger.diff( Time[3], Time[2] ) );
			print("const",0);print( gauger.diff( Time[2], Time[1] ) );
			print("subtotal",0);print( gauger.diff( Time[3], Time[1] ) );
			print("det",0);print( gauger.diff( Time[1], Time[0] ) );
			print("total",0);print( gauger.diff( Time[3], Time[0] ) );
		}
	} else if( Algorithm == sres ){
		print("sres: deg=",0);print(Deg);
		V = getopt(v);
		if( type( V )!= 4 ){
			V = [];
			for(I=0;I<Deg;I++){
				V = cons( I+11, V );
			}
			V = reverse(V);
		}
		print("V=",0);print(V);
		R = sres( Equations, Vars|v= V );
		Time = gauger.gettime();
		print("np",0);print( gauger.diff( Time[5], Time[4] ) );
		print("msum&v-dist&sort",0);print( gauger.diff( Time[4], Time[3] ) );
		print("mixedvol",0);print( gauger.diff( Time[3], Time[2] ) );
		print("const",0);print( gauger.diff( Time[2], Time[1] ) );
		print("subtotal",0);print( gauger.diff( Time[5], Time[1] ) );
		print("det",0);print( gauger.diff( Time[1], Time[0] ) );
		print("total",0);print( gauger.diff( Time[5], Time[0] ) );
	} else if( Algorithm == dres ){
		print("dres: deg=",0);print(Deg);
		R = dres( Equations, Vars );
		Time = gauger.gettime();
		print("delta const",0);print( gauger.diff( Time[4], Time[3] ) );
		print("Decomp.",0);print( gauger.diff( Time[3], Time[2] ) );
		print("RSC",0);print( gauger.diff( Time[2], Time[1] ) );
		print("subtotal",0);print( gauger.diff( Time[4], Time[1] ) );
		print("det",0);print( gauger.diff( Time[1], Time[0] ) );
		print("total",0);print( gauger.diff( Time[4], Time[0] ) );
	} else {
		print("I don't know ",0);print(Algorithm);
		R = "";
	}

	return R;
}

def ncyclic( N )
{
	A = cyclic( N );
	Vars = reverse( vars( cyclic( N ) ) );
	Lastval = car( Vars );
	B = map( subst, A, Lastval, 1 );
	B = reverse( cdr( B ) );
	Vars = cdr( reverse( cdr( Vars ) ) );

	return [ B, Vars ];
}

def specialize( List, Vars )
{
	R = [];
	UC = [];

	while( List != [] ){
		F = car(List);

		D = dp_ptod( F, Vars );
		G = 0;
		while( D != 0 ){
			UC = cons( strtov( "s"+rtostr(++J) ), UC );
/*			UC = cons( uc(), UC );*/
			G += dp_hm( D ) * UC[0];
			D = dp_rest( D );
		}

		R = cons( dp_dtop( G, Vars ), R );
		List = cdr( List );
	}

	return [ reverse(R), UC ];
}

def unspecialize( List, UC )
{
	while( UC != [] ){
		List = subst( List, UC[0], 1 );
		UC = cdr( UC );
	}

	return List;
}

end$
