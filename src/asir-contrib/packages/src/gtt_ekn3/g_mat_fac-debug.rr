/*
  $OpenXM: OpenXM/src/asir-contrib/packages/src/gtt_ekn3/g_mat_fac-debug.rr,v 1.3 2019/04/03 00:45:05 takayama Exp $
*/
/*  g_mat_fac-debug.rr  
  based on gtt_ekn3/g_mat_fac.rr,v 1.4 2019/03/29 07:00:10 takayama Exp  */
#define USEMODULE
#ifdef USEMODULE
module gtt_ekn3$
localf mytiming$ // defined in ekn_eval-timing.rr
localf crt_debug$
localf crt_time_reset$
localf crt_time_get$
static Ekn_debug$
static CRT_msg$
static CRT_time_modp_itor$
static CRT_time_chinese_itor$
static CRT_time_do_itor$
static CRT_time_long$
static CRT_time$
CRT_msg=0$
CRT_time_long=[]$
CRT_time=0$
#else
extern Ekn_debug$
extern CRT_msg$
CRT_msg=0$
extern CRT_time_modp_itor$
extern CRT_time_chinese_itor$
extern CRT_time_do_itor$
extern CRT_time_long$
extern CRT_time$
CRT_time_long=[]$
CRT_time=0$
#endif

def crt_debug(L) { CRT_msg=L; }
def crt_time_reset() { CRT_time_long=[]; CRT_time=0;}  // debug by test-time-crt-5.rr
def crt_time_get() { return [CRT_time,CRT_time_long]; } 

def process(N){
  if (type(getopt(sub_progs))>0) {
    Sub_progs=getopt(sub_progs);
  }else Sub_progs=["gtt_ekn3.rr","gtt_ekn3/childprocess.rr"];

    Ret = newvect(N);
    for(I=0;I<N;I++){
       if (Ekn_debug || (type(getopt(x))>0)) Ret[I] = ox_launch();
       else Ret[I] = ox_launch_nox();
       for (J=0; J<length(Sub_progs); J++) {
         ox_rpc(Ret[I],"load",Sub_progs[J]);
       }
    }
    Ret = vtol(Ret);
    return(Ret);
}

/*for debug*/
def setup_x(N){
  if (type(getopt(sub_progs))>0) {
    Sub_progs=getopt(sub_progs);
  }else Sub_progs=["gtt_ekn3.rr","gtt_ekn3/childprocess.rr"];
    Ret = newvect(N);
    for(I=0;I<N;I++){
       Ret[I] = ox_launch();
       for (J=0; J<length(Sub_progs); J++) {
         ox_rpc(Ret[I],"load",Sub_progs[J]);
       }
    }
    Ret = vtol(Ret);
    return(Ret);
}

def shutdown(List){
    L = length(List);
    for(I=0;I<L;I++)  ox_shutdown(List[I]);
}

def generate_p_set(MIN,N){
	Ret = [];
	P = MIN;
	for(I=0;I<N;I++){
	    P = pari(nextprime,P+1);
	    Ret = cons(P,Ret);
	}
	return(Ret);
}

def generate_p_set_(MIN,MAX){
	Ret = [];
	P = MIN;
	for(I=0;P<MAX;I++){
	    P = pari(nextprime,P+1);
	    Ret = cons(P,Ret);
	}
	print("generate "+rtostr(I)+" primes.");
	return(Ret);
}

def save_prime(P,FileName){
	output(FileName);
	L = length(P);
	for(I=0;I<L;I++)  print(P[I]);
	output();
}

def load_prime(FileName){
	F = access(FileName);
	if(F == 1){
	    F = open_file(FileName);
	    Ret = [];
	    while((T = get_line(F)) != 0){
	        T = eval_str(T);
	        Ret = cons(T,Ret);
	    }
	    close_file(F);
	    return(Ret);
	}else{
	    print(FileName + " is not exist.");
	    return(-1);
	}
}

def preparation_F(F){
    L = length(F);
    DF = dn(F[0]);

    for(I=1;I<L;I++)  DF = ilcm(DF,dn(F[I]));

    NF = F*DF;
    return([NF,DF]);
}

def mlcm(F,G){
    GCD = gcd(F,G);
    return(red(F*G/GCD));
}

def dnlcm(F){
    Ret = 1;
    Deg = deg(F,a);
    for(I=Deg;I>=0;I--){
	C = coef(F,I,a);
	if(C != 0)  Ret = ilcm(Ret,dn(C));
    }
    return(Ret);
}

def preparation_Mat(Mat){
    Size = size(Mat);
    Row = Size[1];
    Col = Size[0];
    DMat = 1;

    for(I=0;I<Col;I++){
	for(J=0;J<Row;J++)   DMat = mlcm(DMat,dn(Mat[I][J]));
    }
    NMat = Mat*DMat;
    for(I=0;I<Col;I++){
	for(J=0;J<Row;J++)   NMat[I][J] = red(NMat[I][J]);
    }

    D2 = 1;
    for(I=0;I<Col;I++){
	for(J=0;J<Row;J++)  D2 = ilcm(D2,dnlcm(NMat[I][J]));
    }
    D2 *= dnlcm(DMat);
    NMat *= D2;
    DMat *= D2;

    return([NMat,DMat]);
}

def preparation(F,Mat,S,E,Inc,Var){
    NewMat = subst(Mat,Var,S+Inc*a);
    NewF = preparation_F(F);
    NewMat = preparation_Mat(NewMat);
    E = (E-S)/Inc;
    return([NewF[0],NewF[1],NewMat[0],NewMat[1],E]);
}

def nextP_itor(ID,F,DF,Mat,DNMat,P,E){
    Modp_interval=1;
    if (type(getopt(modp_interval))>0) Modp_interval=getopt(modp_interval);
    // printf("nextP_itor, Modp_interval=%a\n",Modp_interval);
    ox_rpc(ID,"g_mat_fac_modp_itor",F,DF,Mat,DNMat,E,car(P),Modp_interval);
    ox_push_cmd(ID,258);
    return(cdr(P));
}

def rm_list(List,N){
    Ret = [];
    while(List != []){
    	 T = car(List);
	 if(T != N)  Ret = cons(T,Ret);
	 List = cdr(List);
    }
    return(Ret);
}

def nextData_itor(Data,ID){
    if (CRT_msg) printf("ID=%a, chinese(%a,%a)\n",ID,number_eval(Data[0]),number_eval(Data[1]));
    ox_rpc(ID,"chinese",Data[0],Data[1]);
    ox_push_cmd(ID,258);
    return(cdr(cdr(Data)));
}

def to_vect(L) {
    Data0=L[0];
    if (type(Data0)==4) Data0=matrix_list_to_matrix(Data0);
    if (type(Data0)<4) Data0=newvect(1,[Data0]);
    return [Data0,L[1]];
}

/* これは分散計算してる */
def chinese_itor(Data,IDList){
    Data=map(to_vect,Data);
    List = [];
    Ret =[];
    L = length(IDList);

    if(length(Data) == 1) return(Data[0]);
    for(I=0;I<L&&length(Data)>1;I++){
	Data = nextData_itor(Data,IDList[I]); // chinese を子供で実行.
         /* chinese([V1,M1],[V2,M2]) --> [V,M]  M=M1*M2, V mod M1=V1, V mod M2=V2
             ただし gcd(M1,M2)=1 だと思われる.
         */
	List = cons(IDList[I],List);
    }

    LD = length(Data);
    LR = 0;
    while(List != []){
    	E = ox_select(List);
	while(E != []){
	    Ret = cons(ox_get(car(E)),Ret); // chinese の結果をもらう.
            if (CRT_msg) printf("Ret=[vec,M]=...\n"); 
	    LR++;
	    if(LD+LR > 1){
	        if(LD <= 1){
		    if(LD == 1)  Ret = cons(car(Data),Ret);
		    Data = Ret;
		    Ret = [];
		    LD = length(Data);
		    LR = 0;
		}
	        Data = nextData_itor(Data,car(E));
		LD -= 2;
	    }else{
	        List = rm_list(List,car(E));
	    }
	    E = cdr(E);
	}
    }
    return(Ret[0]);
}


def modp_itor(F,DF,Mat,DNMat,E,P,IDList){
    List = [];
    Data = [];
    for(I=0;I<length(IDList) && P!=[];I++){
	P = nextP_itor(IDList[I],F,DF,Mat,DNMat,P,E | option_list=getopt());
	List = cons(IDList[I],List);
    }

    while(List != []){
    	 EList = ox_select(List);
	 while(EList != []){
	      ID = car(EList);
	      T = ox_get(ID);
	      if(T != 0)  Data = cons(T,Data);
	      if(P != []){
	          P = nextP_itor(ID,F,DF,Mat,DNMat,P,E | option_list=getopt());
	      }else{
	          List = rm_list(List,ID);
	      }
	      EList = cdr(EList);
	 }
    }
    return(Data);
}

/* これも分散計算 */
def do_itor(Data,L,IDList){
    if (CRT_msg) printf("do_itor(length(Data)=%a,L=%a,length(IDList)=%a\n",
           length(Data),L,length(IDList));
    Ret = newvect(L);
    Q = Data[1];
    Q2 = isqrt(ishift(Q,1)+1);
    Ys = Data[0];
    List = [];

    for(C=0,I=0;C<L && I<length(IDList);C++,I++){
    	ox_rpc(IDList[I],"itor",Ys[C],Q,Q2,C);
	ox_push_cmd(IDList[I],258);
	List = cons(IDList[I],List);
    }

    while(List != []){
    	E = ox_select(List);
	while(E != []){
	    T = ox_get(car(E));
	    Ret[T[1]] = T[0];
	    if(C < L){
	        ox_rpc(car(E),"itor",Ys[C],Q,Q2,C);
		C++;
		ox_push_cmd(car(E),258);
	    }else{
	        List = rm_list(List,car(E));
	    }
	    E = cdr(E);
	}
    }
    return(Ret);
}

def g_mat_fac_itor(F,Mat,S,E,Inc,Var,P,IDList){
    TMP = preparation(F,Mat,S,E,Inc,Var);
    E = TMP[4];
    DNMat = TMP[3];
    NMMat = TMP[2];
    DNF = TMP[1];
    NMF = TMP[0];

    if (CRT_msg) printf("length(P)=%a\n",length(P));
    printf("modp_interval=%a\n",getopt(modp_interval));
    printf("itor=%a\n",getopt(itor));

    T0=time(); Data = modp_itor(NMF,DNF,NMMat,DNMat,E,P,IDList|option_list=getopt()); T1=time();
    CRT_time_modp_itor=mytiming(T0,T1); printf("modp_itor=%a\n",CRT_time_modp_itor);

    T0=time(); Data = chinese_itor(Data,IDList); T1=time();
    CRT_time_chinese_itor=mytiming(T0,T1); printf("chinese_itor=%a\n",CRT_time_chinese_itor);

    if (type(getopt(itor))<=0) {
      CRT_time_long=cons([CRT_time_modp_itor,CRT_time_chinese_itor,0],CRT_time_long);
      CRT_time += CRT_time_modp_itor[3];
      return Data[0]; ///
    }
    L = length(F);
    T0=time(); Ret = do_itor(Data,L,IDList); T1=time();
    CRT_time_do_itor=mytiming(T0,T1); printf("do_itor=%a\n",CRT_time_do_itor);
    CRT_time_long=cons([CRT_time_modp_itor,CRT_time_chinese_itor,CRT_time_do_itor],CRT_time_long);
    CRT_time += CRT_time_modp_itor[3];
    for(I=0;I<L;I++){
        if(F[I] == "failure")  printf("Use bigger number of primes or bigger prime\n");
    }

    return(Ret);
}

def g_mat_fac_int(F,Mat,S,E,Inc,Var){
    TMP = preparation(F,Mat,S,E,Inc,Var);
    DNMat = TMP[3];
    NMMat = TMP[2];
    DNF = TMP[1];
    NMF = TMP[0];
    E = TMP[4];

    for(I=0;I<=E;I++){
        NMF = subst(NMMat,a,I)*NMF;
        DNF *= subst(DNMat,a,I);
    }
    return(NMF/DNF); 
}

#ifdef USEMODULE
endmodule$
#endif

end$