/* $OpenXM$ */
// 2017.02.19 from tatibana version.
import("names.rr")$
//import("gtt_ekn.rr")$
// demo: gtt_ekn.cmle_test2();  (math.kobe wake up/bed time)
import("tk_approx-r.rr")$
module gtt_ekn3$
localf mle_init$
localf myabs$
localf move$
localf dataset$
localf ux$
localf jinv$
localf jinv_v2$
localf jinv_orig$
localf oddsvect$
localf next$
localf go_next$
localf abs_max$
localf cmle_3_v1$
localf cmle_3$
localf has_negative_elem$
localf cmle_test1$
localf cmle_test2$
localf cmle_test2b$
localf cmle_test2c$
localf cmle_test3$
localf cmle_test1c$
localf normalize$
localf denormalize$
localf denormalize2$

localf test111$
localf test222$
localf cmle_test4$
localf cmle_test5$
localf cmle_test5_female$
localf cmle_test5_male$
localf cmle_test5_ans$
localf cmle_test5b$
localf swap_row$
localf swap_col$

/* imported from ekn/Prog/cmle.rr 
localf next_2$
localf cmle_options$
localf cmle_1$
localf cmle_2$
*/

static CMLE_debug$
static CMLE_err$
static CMLE_relerr$
static CMLE_eVect$
static CMLE_Ediff$

def mle_init() {
  CMLE_debug=1$
  CMLE_err=10^(-10)$
  CMLE_relerr=10^(-10)$
  CMLE_eVect=0$
}

def myabs(N){
        if(N < 0)  return(-N);
        return(N);
}

def move(M,Ep,Digit){
        S = size(M);
        R1 = S[0];
        R2 = S[1];
        Ret = newmat(R1,R2);
        D = 10^Digit;
        for(I=0;I<R1-1;I++){
            for(J=1;J<R2;J++){
                        NM = nm(M[I][J]);
                        DN = dn(M[I][J]);
                        Ret[I][J] = Ep*idiv((D*NM),DN)/D;
                }
        }
        return(Ret);
}

def dataset(U){
        R1 = length(U);
        R2 = length(U[0]);

        P = newmat(R1,R2);
        N = R1 - 1;

        for(I=0;I<R1;I++){
                for(J=0;J<R2;J++)  P[I][J] = U[N][0]*U[I][J]/(U[N][J]*U[I][0]);
        }
        
        B1 = newvect(R1);
        B2 = newvect(R2);

        for(I=0;I<R1;I++){
            for(J=0;J<R2;J++){
                B1[I] += U[I][J];
                        B2[J] += U[I][J];
            }
        }
        B = [vtol(B1),vtol(B2)];
        return([newmat(R1,R2,U),B,P]);
}

def ux(U,P){
        S = size(P);
        Ret = newmat(S[0],S[1]);
        for(I=1;I<S[0];I++){
                for(J=1;J<S[1];J++){Ret[I][J] = U[I][J]*P[0][0]*P[I][J]/(P[0][J]*P[I][0]);}
        }
        return(Ret);
}

def jinv(Ediff){
  S = size(Ediff);
  DD = S[0]; D1=DD-1;
  NN = S[1]; N1=NN-1;
  R=(DD-1)*(NN-1);
  Jac = newmat(R,R);
  for (I=0; I<R; I++) {
    for (J=0; J<R; J++) {
      II=idiv(I,N1); JJ=I%N1+1;
      KK=idiv(J,N1); LL=J%N1+1;
      Jac[I][J] = Ediff[II][JJ][KK][LL-1];  
    }
  }
  //  printf("Jac=%a\n",Jac); bsave(Jac,"tt.ab");
  // matrix_inverse(Jac);  // changed to matrix_inverse_singular(Jac); 2017.09.24
  return matrix_inverse_singular(Jac);
}

def jinv_v2(Ediff){
  S = size(Ediff);
  DD = S[0]; D1=DD-1;
  NN = S[1]; N1=NN-1;
  R=(DD-1)*(NN-1);
  Jac = newmat(R,R);
  for (I=0; I<R; I++) {
    for (J=0; J<R; J++) {
      II=idiv(I,N1); JJ=I%N1+1;
      KK=idiv(J,N1); LL=J%N1+1;
      Jac[I][J] = Ediff[II][JJ][LL][KK];  // not [KK][LL]
    }
  }
  matrix_inverse(Jac);
}

def jinv_orig(M){
        S = size(M);
        R1 = S[0] - 1;
        R2 = S[1] - 1;
        R = R1*R2;
        Jac = newmat(R,R);
        Tmp = newvect(R);

        Fn = 0;
        for(I=0;I<R1;I++){
                for(J=1;J<S[1];J++){Tmp[Fn++] = M[I][J];}
        }

        for(I=0;I<R;I++){
                J2 = 0;
                for(J=0;J<R1;J++){//R1
                        for(K=0;K<R2;K++){Jac[I][J2++] = Tmp[I][J][K];}
                }
        }

        return(matrix_inverse(Jac));
}

def oddsvect(E){
        S = size(E);
        R1 = S[0] - 1;
        R2 = S[1] - 1;
        R = R1*R2;
        Ret = newvect(R);

        I2 = 0;
        for(I=0;I<R1;I++){
                for(J=1;J<S[1];J++){Ret[I2++] = E[I][J];}
        }

        return(Ret);
}

def next(E,N){
        S = size(E);
        Ret = newmat(S[0],S[1]);

        T1 = jinv(N);
        T2 = oddsvect(E);
        Oddsvect = T1*T2;
        I2 = 0;
        for(I=0;I<S[0]-1;I++){
                for(J=1;J<S[1];J++)  Ret[I][J] = Oddsvect[I2++];
        }

        return(Ret);
}


def go_next(UsubE,R1,R2,Prec){
    for(I=0;I<R1;I++){
        for(J=0;J<R2;J++){
            if(myabs(UsubE[I][J]) > Prec)  return(1);
        }
    }
    return(0);
}

def abs_max(Step) {
  if (type(Step) != 6) error("abs_max: not implemented.");
  Size=size(Step);
  Max=0;
  for (I=0; I<Size[0]; I++) {
    for (J=0; J<Size[0]; J++) {
      //      V=number_abs(Step[I][J]);  // number_abs seems to be buggy. Try cmle_test2() with this line.  See mydebug.rr
      if (Step[I][J] < 0) V=-Step[I][J]; else V=Step[I][J];
      if (V > Max) Max=V;
      // if (Max > 10) debug(); 
    }
  }
  return(Max);
}

def cmle_3_v1(U){
  Prec_step = 1/10^2;
  if (type(getopt(eps)) < 0) Eps=Prec_step;
  else { Eps = getopt(eps); Prec_step=Eps; }
    Data = dataset(U);
    UM = Data[0];
    Beta = Data[1];
    P = Data[2];

    Prec = 1/10^5;
    //    Count = 10;
    Count = 50;
    CMLE_eVect=newvect(Count);
    Digit = 10;
    StepSize = 1;

    S = size(UM);
    R1 = S[0];
    R2 = S[1];

    for(I=0;I<Count;I++){
        if (CMLE_debug) printf("gtt_ekn3.gmvector(Beta=%a,P=%a);\n",Beta,P);
        GM = gtt_ekn3.gmvector(Beta,P);
        if (CMLE_debug) printf("gtt_ekn3.cBasistoE(GM=...,Beta,P);\n");
        UsubE = UM - gtt_ekn3.cBasistoE(GM,Beta,P);
        if (CMLE_debug) {
          printf("UsubE=%a, max(UsubE)=%a\n",tk_approx_r.number_eval(UsubE),Amax=tk_approx_r.number_eval(abs_max(UsubE))); 
          CMLE_eVect[I]=Amax;
        }
        if(go_next(UsubE,R1,R2,Prec) == 0)  return([UM,Beta,P]);
        if (CMLE_debug) printf("gtt_ekn3.cBasistoEdiff(GM,Beta,P);\n",GM);
        Ediff = gtt_ekn3.cBasistoEdiff(GM,Beta,P);
        CMLE_Ediff=Ediff;  // for debug
        Step = move(next(UsubE,Ediff),StepSize,Digit);
        if (Amax=abs_max(Step) > Prec_step*2) Step=(Step/Amax)*Prec_step;
        if (CMLE_err || CMLE_relerr) {
          P = map(tk_approx_r.cont_frac,P + Step,CMLE_err,CMLE_relerr); 
          if (CMLE_debug) printf("P(truncated)=%a\n",P);
        }
    }
    printf("P might not be correct.\n");
    return([UM,Beta,P]);
}

/* 2017.03.10 */
def cmle_3(U)
"Options: cmle_stepsize[11/10],  cmle_maxtry[50], cmle_auto[5](if it is zero, auto stepsize enlarging is turned off)"
{
  Prec_step = 1/10^2;
  if (type(getopt(eps)) < 0) Eps=Prec_step;
  else { Eps = getopt(eps); Prec_step=Eps; }

  // StepSize = 10^Digit;
  if (type(getopt(cmle_stepsize)) < 0) StepSize = 11/10; /* default value */
  else { StepSize=getopt(cmle_stepsize); }

  if (type(getopt(cmle_maxtry)) < 0) Count=50;
  else { Count=getopt(cmle_maxtry); }

  if (type(getopt(cmle_auto)) < 0) Fine_max=5; 
  else { Fine_max=getopt(cmle_auto); }

  U = matrix_list_to_matrix(U);
    TTT = normalize(U);
    U=TTT[0]; Col=TTT[1]; Row=TTT[2]; U=matrix_matrix_to_list(U);
    Data = dataset(U);
    UM = Data[0];
    Beta = Data[1];
    P = Data[2];

    Prec = 1/10^5;
    CMLE_eVect=newvect(Count);
    Digit = 10;
    Retry=0; Prev_P=0; Prev_Amax=10^20;
    Fine=0; 

    S = size(UM);
    R1 = S[0];
    R2 = S[1];

    for(I=0;I<Count;I++){
        if (CMLE_debug) printf("gtt_ekn3.gmvector_0(Beta=%a,P=%a);\n",Beta,P);
        GM = gtt_ekn3.gmvector_0(Beta,P|option_list=getopt());
        if (CMLE_debug) printf("gtt_ekn3.cBasistoE_0(GM=...,Beta,P);\n");
        UsubE = UM - gtt_ekn3.cBasistoE_0(GM,Beta,P|option_list=getopt());
        Amax=abs_max(UsubE);
        if (CMLE_debug) {
          printf("UsubE=%a, max(UsubE)=%a\n",number_eval(UsubE),Amax=number_eval(abs_max(UsubE))); 
          CMLE_eVect[I]=Amax;
        }
        if (Amax > Prev_Amax) {
          P = Prev_P;  // throw away this P.
          Step = Step/2; StepSize = StepSize/2; Fine=0; Retry++;
          if (CMLE_debug) printf("Retry with Stepsize=%a=%a\n",StepSize,deval(StepSize));
          if (Retry > Count) break;
          if (CMLE_err || CMLE_relerr) {
            P = map(tk_approx_r.cont_frac,P + Step,CMLE_err,CMLE_relerr); 
            if (CMLE_debug) printf("P(truncated)=%a\n",P);
          }else {P = P+Step;}
          continue;
        }else{
          Prev_P = P;  // keep this P.
          Prev_Amax = Amax; Fine++; Retry=0;
          if (Fine_max && (Fine > Fine_max)) {
             StepSize = StepSize*3/2;
             if (CMLE_debug) printf("New StepSize=%a=%a\n",StepSize,deval(StepSize));
             Fine=0;
          }
        }

        if(go_next(UsubE,R1,R2,Prec) == 0)  return([UM,Beta,P]);
        if (CMLE_debug) printf("gtt_ekn3.cBasistoEdiff_0(GM,Beta,P);\n",GM);
        Ediff = gtt_ekn3.cBasistoEdiff_0(GM,Beta,P|option_list=getopt());
        CMLE_Ediff=Ediff;  // for debug
        Step = move(next(UsubE,Ediff),StepSize,Digit);

        while (has_negative_elem(P+Step)) {
           Step = Step/2; StepSize = StepSize/2;
        }
        if (CMLE_debug) printf("StepSize=%a\n",StepSize);
        if (CMLE_err || CMLE_relerr) {
          P = map(tk_approx_r.cont_frac,P + Step,CMLE_err,CMLE_relerr); 
          if (CMLE_debug) printf("P(truncated)=%a\n",P);
        }else {P = P+Step;}
    }
    printf("P might not be correct.\n");
    return([denormalize(UM,Col,Row),denormalize2(Beta,Col,Row),denormalize(P,Col,Row)]);
}
def has_negative_elem(P) {  
   P = matrix_list_to_matrix(P);
   for (I=0; I<size(P)[0]; I++) {
     for (J=0; J<size(P)[1]; J++) {
        if (P[I][J] < 0) return(1);
     }
   }
   return(0);
}

/*
def next_2(E,N,OptJac,Digit){
	S = size(E);
	Ret = newmat(S[0],S[1]);

	T1 = jinv(N,OptJac);
	T2 = dhgfvect(E);
	Stepvect = T1*T2;
	I2 = 0;
	for(I=0;I<S[0]-1;I++){
		for(J=1;J<S[1];J++)  Ret[I][J] = Stepvect[I2++];
	}
	if(OptJac != "rational")  Ret = map(rats2,Ret,Digit);
	return(Ret);
}
def cmle_options(){
    if(type(getopt(prec)) >= 0){
    	Prec = getopt(prec);
    }else Prec = 1/10^5;
    if(type(getopt(count)) >= 0){
        Count = getopt(count);
    }else Count = 10;
    if(type(getopt(digit)) >= 0){
    	Digit = getopt(digit);
    }else Digit = 10;
    if(type(getopt(stepsize)) >= 0){
        StepSize = getopt(stepsize);
    }else StepSize = 1;
    if(type(getopt(crt)) >= 0){
        CRT = getopt(crt);
    }else CRT = 0;
    if(type(getopt(optjac)) >= 0){
        OptJac = getopt(optjac);
    }else OptJac = "double";
    return([Prec,Count,Digit,StepSize,CRT,OptJac]);
}

def cmle_1(U){
    Data = dataset(U);
    if(Data == 0)  return(0);
    UM = Data[0];
    Beta = Data[1];
    P = Data[2];

    OPT = cmle_options(|option_list=getopt());
    Prec = OPT[0];
    Count = OPT[1];
    Digit = OPT[2];
    StepSize = OPT[3];
    CRT = OPT[4];
    OptJac = OPT[5];

    S = size(UM);
    R1 = S[0];
    R2 = S[1];

    print(P);
    for(I=0;I<Count;I++){
	GM = gtt_ekn3.gmvector(Beta,P|crt=CRT);
	UsubE = UM - gtt_ekn3.cBasistoE(GM,Beta,P);
	if(go_next(UsubE,R1,R2,Prec) == 0)  return([UM,Beta,P]);
	Ediff = gtt_ekn3.cBasistoEdiff(GM,Beta,P);
	Step = next_2(UsubE,Ediff,OptJac,Digit);
	Step = move(Step,StepSize,Digit);
	P = P + Step; 
    }
    printf("P might not have expected\n");
    return([UM,Beta,P]);
}

def cmle_2(U){
    D = cmle_1(U|option_list=getopt());
    if(D == 0)  return(0);
    CT = D[0];
    P = D[2];

    S = size(P);
    Ret = newmat(S[0],S[1]);
    N = 0;
    for(I=0;I<S[0];I++){
        for(J=0;J<S[1];J++){
	    N += CT[I][J];
	    Ret[I][J] = CT[I][J];
	}
    }
    Ret /= N;
    K = S[0]-1;
    L = S[1];
    for(I=0;I<K;I++){
        for(J=1;J<S[1];J++)  Ret[I][J] = P[I][J]*Ret[I][0]*Ret[K][J]/Ret[K][0];
    }
    return([CT,D[1],Ret,P]);
}
*/

def cmle_test1() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  U=[[1,6,123],[3,22,145],[86,91,176]];
  CMLE_debug=1;
  return(cmle_3(U));
}
def cmle_test1c() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  U=[[0,6,123],[3,22,145],[86,91,176]];
  P=matrix_ij(3,0,1); U=newmat(3,3,U); U=P*U*P;
  U=matrix_matrix_to_list(U); printf("U=%a\n",U);
  CMLE_debug=1;
  return(cmle_3(U|by_g=1));
}

def cmle_test2() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  /*
   0 2 5
   3 1 4
   1 3 3
  */
  U=[[1,2,5],[3,1,4],[1,3,3]];
  CMLE_debug=1;
  return(cmle_3(U));
}
def cmle_test2b() {
  /*  col-1<->col-2, row-1<->row-2
   1 3 4
   2 0 5
   3 1 3
  */
  U=[[1,3,4],[2,1,5],[3,1,3]];
  CMLE_debug=1;
  return(cmle_3(U));
}
def cmle_test2c() {
  /*  col-1<->col-2, row-1<->row-2
   1 3 4
   2 0 5
   3 1 3
  */
  U=[[1,3,4],[2,0,5],[3,1,3]];
  CMLE_debug=1;
  //  return(cmle_3(U));  // bug: it falls into infinite loop.
  return(cmle_3(U|by_g=1)); // bug: invmatp is singular. fixed 2017.09.24 
}

def cmle_test3() {
  // cf. tk_fd.rr  hfdtest2();
  //  U=[[1,1,2,1],[1,3,1,1]];
  // tk_fd.fdah_poly(-7,[-4,-3,-4],-4,tk_fd.yvars(4) | approx=10);
  U=[[1,1,2,3],[1,3,1,1]];
  CMLE_debug=1;
  return(cmle_3(U));
}


def test111() {
  /* approx mle for cmle_test1c */
  M=[[ 1, 273/1892, 13195/3872 ],
     [ 1, 0, 3731/352 ],
     [ 1, 1, 1 ]];
  M=matrix_list_to_matrix(M);
  P=matrix_ij(3,0,1);
  number_eval(P*M*P);
}
def test222() {
  /* approx mle for cmle_test2c */
  M=[[ 1, 9, 4 ],
     [ 1, 0, 5/2 ],
     [ 1, 1, 1 ]];
  M=matrix_list_to_matrix(M);
  P=matrix_ij(3,0,1);
  number_eval(P*M*P);
}

def cmle_test4() {  // 2017.10.16
  /*  
   0 3 9
   0 3 1
   1 1 1
  */
  U=[[3,3,1],[9,1,1]];
  CMLE_debug=1;
  return(gtt_ekn3.cmle_3(U|by_g=1)); 
}

/* gen_data.rr 2017.11.17 */
def cmle_test5() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  U=[[1,6,123],[3,22,145],[86,91,176]];
  CMLE_debug=1;
  return(gtt_ekn3.cmle_3(U|by_g=1));
}
def cmle_test5_female() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  /*  col-1<->col-2, row-1<->row-2 */
  // U=[[0,4,95],[3,18,98],[51,59,105]];
  U=[[18,3,98],[4,0,95],[59,51,105]];
  CMLE_debug=1;
  return(gtt_ekn3.cmle_3(U|by_g=1));
}
def cmle_test5_male() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  /*  col-1<->col-2 */
  // U=[[1,2,28],[0,4,47],[35,32,71]];
  U=[[2,1,28],[4,0,47],[32,35,71]];
  CMLE_debug=1;
  return(gtt_ekn3.cmle_3(U|by_g=1));
}

extern C_data$
def cmle_test5_ans() {
  C_female=[[0,4,95],[3,18,98],[51,59,105]];
  //出力. P_female=[[1,66529/344084,295388/96889],[1,0,1417991/106845],[1,1,1]];
  // 入れ替えたもの.
  P_female=[[0,1,1417991/106845],[66529/344084,1,295388/96889],[1,1,1]];
  printf("count female=\n%a\n",newmat(3,3,number_eval(C_female)));
  printf("cmle  female=\n%a\n\n",newmat(3,3,number_eval(P_female)));

  C_male=[[1,2,28],[0,4,47],[35,32,71]];
  // P_male=[[1,94832/206981,2385997/381347],[1,0,1603831/305375],[1,1,1]];
  P_male=[[94832/206981,1,2385997/381347],[0,1,1603831/305375],[1,1,1]];
  printf("count male=\n%a\n",newmat(3,3,number_eval(C_male)));
  printf("cmle  male=\n%a\n\n",newmat(3,3,number_eval(P_male)));

  C_all=[[1,6,123],[3,22,145],[86,91,176]];
//  P_all=[[1,644866/113855,12904014/215675],[1,1632327/235925,3397111/144423],[1,1,1]];  // by test5
  
  P_all=  // by test5b
[[ 1, 49819/282171, 537946/50925 ],
 [ 1, 4374/30263, 439387/129243 ],
 [ 1, 1, 1 ]];
  P_all = matrix_matrix_to_list(swap_col(P_all,0,1));
  printf("count all=\n%a\n",newmat(3,3,number_eval(C_all)));
  printf("cmle  all=\n%a\n",newmat(3,3,number_eval(P_all)));
  C_data=[C_all,C_male,C_female]; C_data=map(matrix_list_to_matrix,C_data);
  return([P_all,P_male,P_female]);
}

// 2017.11.22
def cmle_test5b() {
  printf("make_2wayTable(  ,[0,1],[6,7])\n");
  // 1-column <--> 2-column
  U=[[6,1,123],[22,3,145],[91,86,176]];
  CMLE_debug=1;
  return(gtt_ekn3.cmle_3(U|by_g=1));
}
def swap_row(Mat,P,Q) {
  Mat = matrix_list_to_matrix(Mat);
  New=matrix_clone(Mat);
  M=size(Mat)[0]; N=size(Mat)[1];
  for (I=0; I<N; I++) {
    New[P][I] = Mat[Q][I];
    New[Q][I] = Mat[P][I];    
  }
  return(New);
}
def swap_col(Mat,P,Q) {
  Mat = matrix_list_to_matrix(Mat);
  New=matrix_clone(Mat);
  M=size(Mat)[0]; N=size(Mat)[1];
  for (I=0; I<M; I++) {
    New[I][Q] = Mat[I][P];
    New[I][P] = Mat[I][Q];    
  }
  return(New);
}

def normalize(Mat) {
  S=size(Mat);
  M=S[0]; N=S[1];
  Col=-1;
  for (I=0; I<M; I++) {
    if (Mat[I][0] == 0) {
      Col=1;
      Mat=swap_col(Mat,0,Col); 
      break;
    }
  }
  Row=-1;
  for (J=0; J<N; J++) {
    if (Mat[M-1][J] == 0) {
        Row=0;
	Mat=swap_row(Mat,M-1,Row);
        break;
    }
  }
  printf("[Mat,Col,Row]=\n%a\n",[Mat,Col,Row]);
  return([Mat,Col,Row]);
} 
def denormalize(Mat,Col,Row) {
  if (Row>=0) Mat=swap_row(Mat,M-1,Row);
  if (Col>=0) Mat=swap_col(Mat,0,Col);
  return(Mat);
}
def denormalize2(Beta,Col,Row) {
  Beta_col=matrix_list_to_matrix(Beta[0]);
  Beta_row=matrix_list_to_matrix(Beta[0]);
  if (Row>=0) {T=Beta_row[M-1]; Beta_row[M-1]=Beta_row[Row]; Beta_row[Row]=T;}
  if (Col>=0) {T=Beta_col[0]; Beta_col[0]=Beta_col[Col]; Beta_col[Col]=T;}
  return([matrix_matrix_to_list(Beta_col),matrix_matrix_to_list(Beta_row)]);
}

endmodule$
gtt_ekn3.mle_init()$


end$
