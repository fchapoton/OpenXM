/* $OpenXM: OpenXM/src/asir-contrib/packages/src/gtt_ekn3/ekn_eval-timing.rr,v 1.2 2019/04/01 01:31:53 takayama Exp $ */
/* ekn_eval.rr to take the timing data 
Example:
 import("gtt_ekn3.rr")$
 load("gtt_ekn3/ekn_eval-timing.rr")$
 N=20$ Margin=[[4*N,4*N,4*N],[2*N,5*N,5*N]]$
 P=[[1,1/2,1/3],[1,1/11,1/13],[1,1,1]]$
 T0=time()$ gtt_ekn3.expectation(Margin,P)$ T1=time()$ 
 print(gtt_ekn3.mytiming(T0,T1))$
 print(gtt_ekn3.get_time_initial_poly())$
 print(gtt_ekn3.get_time_contiguity())$
 print(gtt_ekn3.get_time_g_mat_fac())$
*/

#define USE_MODULE

load("gtt_ekn3/ekn_pfaffian_8.rr")$
#define USE_MODULE

#ifdef USE_MODULE
module gtt_ekn3;
static Ekn_debug$

static Ekn_time_g_mat_fac$
static Ekn_time_initial_poly$
static Ekn_time_contiguity$
static Ekn_use_cache$
Ekn_use_cache=0$

localf get_time_g_mat_fac$
localf get_time_initial_poly$
localf get_time_contiguity$
localf mytiming$
localf ekn_use_cache$
#else
extern Ekn_debug$

extern Ekn_time_g_mat_fac$
extern Ekn_time_initial_poly$
extern Ekn_time_contiguity$
static Ekn_use_cache$
Ekn_use_cache=0$
#endif

def get_time_g_mat_fac() { return Ekn_time_g_mat_fac; }
def get_time_initial_poly() { return Ekn_time_initial_poly; }
def get_time_contiguity() { return Ekn_time_contiguity; }
//def mytiming(T0,T1) { return matrix_list_to_matrix(T1)-matrix_list_to_matrix(T0); }
def ekn_use_cache(L) { 
  if (L==0) shell("rm -f tmp/tmp-conti.ab");
  return Ekn_use_cache=L; 
}

/* By Strategy 2 */
def ekn_cBasis_2(Beta, X){
#ifdef USE_MODULE
#else
  extern XRule;
#endif
  Ekn_mesg=1;
  P=length(Beta[0]); 
  Q=length(Beta[1]);
  K=P-1;
  N=Q-1;
  
  if (K == 0){return(matrix(1,1,[[1/factorial_prod(Beta[1])]])); }
  if (N == 0){return(matrix(1,1,[[1/factorial_prod(Beta[0])]])); }
  
  XRuleTemp=XRule;
  XRule=xRule_num(X,K,N);  // <- global
  AR=alphaRule_num(initialAlpha(K,N),K,N);
  T0=time();
  Start=initialPoly(P,Q);
  T1=time();  Ekn_time_initial_poly=mytiming(T0,T1);
  printf("initialPoly of path=2: %a s\n",Ekn_time_initial_poly);
  S=base_replace(pfaffian_basis(Start,K,N),append(AR,XRule));

  AlphaE = marginaltoAlpha_list(Beta);
  T0=time();
  CL=contiguity_mat_list_2(AlphaE,K,N);
  T1=time();  Ekn_time_contiguity=mytiming(T0,T1);
  printf("contiguity_mat_list_2 of path=2: %a s\n",Ekn_time_contiguity);
  Var=car(CL);

  T0=time();
  for (C=cdr(CL); C!=[]; C=cdr(C)){
    B=car(C);
    Mat=B[0]; 
    Step=B[1];
    if (Step > 0){S = g_mat_fac_test(S,Mat,0,Step-1,1,Var|option_list=getopt()); }
    else{S = g_mat_fac_test(S,Mat,0,Step+1,-1,Var|option_list=getopt()); }
    // printf("%a %a %a\n",Step, Mat[0],S[0][0]);
  }
  T1=time(); Ekn_time_g_mat_fac=mytiming(T0,T1);
  printf("g_mat_fac of path=2: %a s\n",Ekn_time_g_mat_fac);
  XRule=XRuleTemp;
  return(S); 
}
/* test
   Beta = [[5,3,5],[1,7,5]]$
   X = [[1,1/7,1/5],[1,1/2,1/3],[1,1,1]]$
   S1=ekn_cBasis_1(Beta,X);
   S2=ekn_cBasis_2(Beta,X);
   S1-S2;
 */
/* 1x2 & 3x1
  S12=ekn_cBasis_2([[5],[2,3]],[[1/2,1/3]]);
  ltop(S12[0][0],[[5],[2,3]],[[p1,p2]],0,1);
  S31=ekn_cBasis_2([[3,3,2],[8]],[[1/2],[1/3],[1/5]]);
  ltop(S31[0][0],[[3,3,2],[8]],[[q1],[q2],[q3]],2,0);
 */

/*********** modify  ********************************/
/* By Strategy 3 */
def ekn_cBasis_3(Beta, X){
  Ekn_mesg=1;
  P=length(Beta[0]); 
  Q=length(Beta[1]);
  K=P-1;
  N=Q-1;
  
  if (K == 0){return(matrix(1,1,[[1/factorial_prod(Beta[1])]])); }
  if (N == 0){return(matrix(1,1,[[1/factorial_prod(Beta[0])]])); }
  
  XR=xRule_num(X,K,N); 
  AlphaE = marginaltoAlpha_list(Beta);
  SA=initialAlpha_3(AlphaE,K,N);
  AR=alphaRule_num(SA,K,N);
  T0=time();
  Start=initialPoly_3(Beta);
  T1=time();  Ekn_time_initial_poly=mytiming(T0,T1);
  printf("initialPoly of path=3: %a [CPU(s),0,*,real(s)]\n",Ekn_time_initial_poly);

  S=base_replace(pfaffian_basis(Start,K,N),append(AR,XR));

  if (access("tmp/tmp-conti.ab") && Ekn_use_cache) {
    CL=bload("tmp/tmp-conti.ab");
    printf("contiguity_mat_list_3 : cached data tmp/tmp-conti.ab is used.\n");
  }else {
    T0=time();
    CL=contiguity_mat_list_3(AlphaE,K,N|xrule=XR);
    if (EKn_use_cache) bsave(CL,"tmp/tmp-conti.ab"); 
    T1=time();  Ekn_time_contiguity=mytiming(T0,T1);
    printf("contiguity_mat_list_3 of path=3: %a [CPU(s),0,*,real(s)]\n",Ekn_time_contiguity);
  }

  Var=car(CL);
  T0=time();
  for (C=cdr(CL); C!=[]; C=cdr(C)){
    B=car(C);
    Mat=B[0]; 
    Step=B[1];
    if (length(C) > 1) {
      S = g_mat_fac_test(S,Mat,0,Step+1,-1,Var|option_list=getopt()); 
    }else {
      S = g_mat_fac_test(S,Mat,0,Step+1,-1,Var|
            option_list=base_rebuild_opt(append(getopt(),[["itor",1]]))); ///
    }  
  }
  T1=time(); Ekn_time_g_mat_fac=mytiming(T0,T1);
  printf("g_mat_fac of path=3: %a [CPU(s),0,*,real(s)]\n",Ekn_time_g_mat_fac);
  return(S); 
}
/************ modify end *******************************/

#ifdef USE_MODULE
endmodule;
#endif
end$
