/* $OpenXM$ */
/* cf. misc-2002/03/RisaCon-ohp */
#define jv_adapted_to_fixed(A,B,C,D) taka_jv_adapted_to_fixed(A,B,C,D)
#define jv_ij_to_n(I,J,M) taka_jv_ij_to_n(I,J,M)
#define jv_put_line(Fp,S) taka_jv_put_line(Fp,S) 
#define jv_gen_obj(Fname,Data) taka_jv_gen_obj(Fname,Data) 
#define jv_adapted_y_to_obj(Data,Yrange,Hy) taka_jv_adapted_y_to_obj(Data,Yrange,Hy) 
#define jvtest1() taka_jv_test1()
/*
taka_jv_plot3d(F,Xrange,Yrange)
taka_jv_tabledata_to_jvdata(Table)
*/

extern Taka_jv_BIG $
Taka_jv_BIG = 10000 $
def jv_adapted_to_fixed(Data,X0,X1,H) {
  N = length(Data);
  F = [];
  for (I=0; I<N-1; I++) {
    P = Data[I];
    PP = Data[I+1];
    if (I==0) Range=[-Taka_jv_BIG,Data[1][0]];
    else if (I==(N-2)) Range=[Data[I][0],Taka_jv_BIG];
    else Range=[Data[I][0],Data[I+1][0]];
    if (PP[0]-P[0] != 0) {
      L = (x-P[0])*(PP[1]-P[1])/(PP[0]-P[0]) + P[1];
      F = cons([Range,L],F);
    }
  }
  F = reverse(F);
  N = length(F);
  V = [];
  I = 0;
  for (X=X0; X<=X1; X += H) {
    while (I<N) {
     Range = F[I][0];
     if ((X >= Range[0]) && (X <= Range[1])) break;
     I++;
    }
    V=cons([X,subst(F[I][1],x,X)],V);
  }
  return reverse(V);
}


def jv_ij_to_n(I,J,M) {
  return (1+I+J*M);
}

def jv_put_line(Fp,S) {
  S = strtoascii(S);
  for (I=0; I<length(S); I++) {
    put_byte(Fp,S[I]);
  }
  put_byte(Fp,10);
}

def jv_gen_obj(Fname,Data) {
  Fp = open_file(Fname,"w");
  N = length(Data[0]);
  for (I=0; I<N; I++) {
    V = Data[0][I];
    S = "v "+rtostr(V[0])+" "+rtostr(V[1])+" "+rtostr(V[2]);
    jv_put_line(Fp,S);
  }
  N = length(Data[1]);
  for (I=0; I<N; I++) {
    V = Data[1][I];
    jv_put_line(Fp,V);
  }
  close_file(Fp);
}

def jv_adapted_y_to_obj(Data,Yrange,Hy) {
  M = length(Data);
  N = number_ceiling((Yrange[1]-Yrange[0])/Hy);
  Ftable = newmat(M,N);
  XYtable = newmat(M,N);
  for (I=0; I<M; I++) {
   DataY = Data[I][0];
   X = Data[I][1];
   DataY = jv_adapted_to_fixed(DataY,Yrange[0],Yrange[1],Hy);
   for (J=0; J<N; J++) {
     XYtable[I][J] = [X,DataY[J][0]];
     Ftable[I][J]  = DataY[J][1];
   }
  }
  
  /* Vertex coordinates V */
  V = [];
  for (J=0; J<N; J++) {
   for (I=0; I<M; I++) {
     V = cons([XYtable[I][J][0],XYtable[I][J][1],Ftable[I][J]],V);
   }
  }
  V = reverse(V);

  /* Normal vector Nv */
  /* We do not necessary need it */
  

  /* Faces */
  Face = [];
  for (J=0; J<N-1; J++) {
   for (I=0; I<M-1; I++) {
     S = "f "+ rtostr(jv_ij_to_n(I,J,M))+"/"+rtostr(jv_ij_to_n(I,J,M))+" "
             + rtostr(jv_ij_to_n(I+1,J+1,M))+"/"+rtostr(jv_ij_to_n(I+1,J+1,M))+" "
             + rtostr(jv_ij_to_n(I,J+1,M))+"/"+rtostr(jv_ij_to_n(I,J+1,M))+" ";
     Face = cons(S,Face);
     S = "f "+ rtostr(jv_ij_to_n(I,J,M))+"/"+rtostr(jv_ij_to_n(I,J,M))+" "
             + rtostr(jv_ij_to_n(I+1,J,M))+"/"+rtostr(jv_ij_to_n(I+1,J,M))+" "
             + rtostr(jv_ij_to_n(I+1,J+1,M))+"/"+rtostr(jv_ij_to_n(I+1,J+1,M))+" ";
     Face = cons(S,Face);
   }
  }
  Face = reverse(Face);

  return [V,Face];  
  
}

def jvtest1() {
  Data = [ ];
  for (X=-3; X<3; X += 0.3) {
    D = [];
    for (I=-3; I<3; I += deval(random()/10/(2^32-1))+0.1) {
      D = cons([I,eval(sin(I)*cos(X))],D);
    }
    D = reverse(D);
    D2 = jv_adapted_to_fixed(D,-3,3,0.3);
    /* taka_plot_auto(D2); */
    Data = cons([D2,X],Data);
  }
  Data = reverse(Data);
  print(Data);
  Jdata = taka_jv_adapted_y_to_obj(Data,[-3,3],0.3);
  jv_gen_obj("taka_jv_test.obj",Jdata);
  return Jdata;
}

def taka_jv_plot3d(F,Xrange,Yrange) {
  Opt = getopt();
  /* Set default values */
  DX = eval(exp(0)*(Xrange[1]-Xrange[0])/20);
  DY = eval(exp(0)*(Yrange[1]-Yrange[0])/20);
  V1 = x; V2 = y;
  /* 
    Todo:  get DX and DY 
  */
  Data = [ ];
  for (X=Xrange[0]; X<Xrange[1]; X += DX) {
    D = [];
    for (Y=Yrange[0]; Y<Yrange[1]; Y += DY) {
      D = cons([Y,eval(base_replace(F,[[V1,X],[V2,Y]]))],D);
    }
    D = reverse(D);
    D2 = jv_adapted_to_fixed(D,Yrange[0],Yrange[1],DY);
    Data = cons([D2,X],Data);
  }
  Data = reverse(Data);
  /* print(Data); */
  Jdata = taka_jv_adapted_y_to_obj(Data,[Xrange[0],Xrange[1]],DX);
  return Jdata;
}
/*
  taka_jv_gen_obj("taka_jv_test.obj",Jdata);
*/

/* Table data is in the form
  [ [x0, y0, z0],
    [x1, y1, z1],
    ....
  ]
*/
def taka_jv_tabledata_to_jvdata(Table) {
  Opt = getopt();
  /* Todo: NOT YET WRITTEN */
  /* Set default values */
  DX = eval(exp(0)*(Xrange[1]-Xrange[0])/20);
  DY = eval(exp(0)*(Yrange[1]-Yrange[0])/20);
  V1 = x; V2 = y;
  /* 
    Todo:  get DX and DY 
  */
  Data = [ ];
  for (X=Xrange[0]; X<Xrange[1]; X += DX) {
    D = [];
    for (Y=Yrange[0]; Y<Yrange[1]; Y += DY) {
      D = cons([Y,eval(base_replace(F,[[V1,X],[V2,Y]]))],D);
    }
    D = reverse(D);
    D2 = jv_adapted_to_fixed(D,Yrange[0],Yrange[1],DY);
    Data = cons([D2,X],Data);
  }
  Data = reverse(Data);
  /* print(Data); */
  Jdata = taka_jv_adapted_y_to_obj(Data,[Xrange[0],Xrange[1]],DX);
  return Jdata;
}

end$
