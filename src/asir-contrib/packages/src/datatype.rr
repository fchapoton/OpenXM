/* $OpenXM: OpenXM/src/asir-contrib/packages/src/datatype.rr,v 1.3 2001/08/20 06:40:34 takayama Exp $ */

#include "tags.h"

/* Objects in the category base */
struct base_field {
  Tag,
  Type
}$
def new_base_filed() {
  A = newstruct(base_field);
  A -> Tag = BASE_FIELD;
  return A;
}
def new__base_filed(T) {
  A = new_base_field();
  A -> Type = T;
  return A;
}

struct base_identity {
  Tag,
  Left,
  Right,
  Condition
}$
def new_base_identity() {
  A = newstruct(base_identity);
  A->Tag = BASE_IDENTITY;
  return A;
}
def new__base_identity(L,R,C) {
  A = new__base_identity();
  A->Left = L;
  A->Right = R;
  A->Condition = C;
  return A;
}


/*
  Example:  
    L = newstruct(base_rule);
    L->Rule = [[x,1/x],[y,1/y]];
*/
struct base_rule {
  Tag,
  Rule
}$
def new_base_rule() {
  A = newstruct(base_rule);
  A->Tag = BASE_RULE;
  return A;
}
def new__base_rule(R) {
  A = new_base_rule();
  A->Rule = R;
  return A;
}

struct base_text {
  Tag,
  Type, /* Type is "tex" or "html" ... */
  S   /* Sentence */
}$
def new_base_text() {
  A = newstruct(base_text);
  A->Tag = BASE_TEXT;
  return A;
}
def new__base_text(T,S) {
  A = new_base_text();
  A->Type = T;
  A->S = S;
  return A;
}



/* Objects in the category poly */

struct poly_factored_polynomial {
  Tag, /* Tentative */
  F
}$
def new_poly_factored_polynomial() {
  A = newstruct(poly_factored_polynomial);
  A->Tag = POLY_FACTORED_POLYNOMIAL;
  return A;
}
def new__poly_factored_polynomial(F) {
  A = new_poly_factored_polynomial();
  A->F = F;
  return A;
}

struct poly_factored_rational {
  Tag, 
  Numerator, Denominator
}$
def new_poly_factored_rational() {
  A = newstruct(poly_factored_rational);
  A->Tag = POLY_FACTORED_RATIONAL ;
  return A;
}
def new__poly_factored_rational(F,G) {
  A = new_poly_factored_rational();
  A->Numerator = F;
  A->Denominator = G;
  return A;
}

struct poly_ideal {
  Tag,
  Ring,
  Generators,  /* List of native poly or dpoly. */
  Grobner      /* 1 or 0,  is it already Grobner basis? */
}$

def new_poly_ideal() {
  A = newstruct(poly_ideal);
  A->Tag = POLY_IDEAL;
  return A;
}
def new__poly_ideal(R,F,G) {
  A = new_poly_ideal();
  A->Ring = R;
  A->Generators = F;
  A->Grobner = G;
  return A;
}

struct poly_polynomial {
  Tag,
  Ring,  
  F  /*  native poly, dpoly, quote  
      or struct factored_polynomial */
}$
def new_poly_polynomial() {
  A = newstruct(poly_polynomial);
  A->Tag = POLY_POLYNOMIAL;
  return A;
}
def new__poly_polynomial(R,F) {
  A = new_poly_polynomial();
  A->Ring = R;
  A->F = F;
  return A;
}


struct poly_ring {
  Tag,
  Variables,  
  Order,
  K,  /* base_field */
  Weyl
}$

def new_poly_ring() {
  A = newstruct(poly_ring);
  A->Tag = POLY_RING;
  return A;
}

def new__poly_ring(V,O,K,W) {
  A = new_poly_ring();
  A->Variables = V;
  A->Order = O;
  A->K = K;
  A->Weyl = W;
  return A;
}

end$

