/* $OpenXM: OpenXM/src/asir-contrib/testing/noro/new_rewrite.rr,v 1.1 2005/12/11 07:24:30 noro Exp $ */

/*
 * test functions for rewriting by rules 
 *
 * usage : qt_rewrite(Expr,Rules,0|1|2) 0 : do not expand, 1 : expand 
 *
 */

/* commutativity */
#if 0
Rc0=[`_X*_Y,`!qt_is_number(_X) && nqt_comp(_X,_Y)<0,`_Y*_X]$
#else
Rc0=[`_X*_Y,`nqt_comp(_Y*_X,_X*_Y)>0,`_Y*_X]$
#endif
Rcomm = [Rc0]$

/* alternativity */
Ra0=[`X*Y,`qt_is_var(X) && qt_is_var(Y) && nqt_comp(Y,X)>0,`-Y*X]$
Ra1=[`X^N,`eval_quote(N)>=2,`0]$
Ra2=[`X*X,`0]$
Ralt = [Ra0,Ra1,Ra2]$

/* simplifier of exp() */
Re1=[`exp(_X)*exp(_Y),`exp(_X+_Y)]$
Re2=[`exp(_X)^_K,`exp(_K*_X)]$
Re3=[`exp(0),`1]$
Re4=[`exp(_N*p*i),`qt_is_integer(_N) && eval_quote(_N)%2==0,`1]$
Rexp = [Re1,Re2,Re3,Re4]$

R5=[`(_V^_N)^_M,`_V^(_N*_M)]$

/* integration */
Ri1=[`int(_F+_G,_X),`int(_F,_X)+int(_G,_X)]$
Ri2=[`int(_N*_F,_X),`qt_is_number(_N),`_N*int(_F,_X)]$
Ri3=[`int(_F,_X),`qt_is_number(_F), `_F*_X]$
Ri4=[`int(_X^_N,_X),`qt_is_number(_N) && eval_quote(_N)!=-1,`_X^(_N+1)/(_N+1)]$
Ri5=[`int(_X^(-1),_X),`log(_X)]$
Ri6=[`int((_A*_X+_B)^(-1),_X),`1/_A*log(_A*_X+_B)]$
Rint = [Ri1,Ri2,Ri3,Ri4,Ri5,Ri6]$

/* derivation */
Rd0=[`d(_N*_X),`qt_is_number(_N),`_N*d(_X)]$
Rd1=[`d(X+Y),`d(X)+d(Y)]$
Rd2=[`d(X*Y),`d(X)*Y+X*d(Y)]$
Rd3=[`d(_N),`qt_is_number(_N),`0]$
Rd=[Rd0,Rd1,Rd2,Rd3]$

/* representing an expression as a polynomial w.r.t. x */
/* T = qt_rewrite(qt_rewrite(Expr,[Ru0],1),[Ru1],0) */
Ru0=[`x^_N*_X,`_X*x^_N]$
Ru1=[`_F*x^_N+_G*x^_N,`(_F+_G)*x^_N]$
#define O_LIST 4
#define O_QUOTE 17

ctrl("print_quote",2)$

def normalize_rule(R,Expand)
{
	return map(qt_normalize,R,Expand);
}

def qt_rewrite(F,Rules,Expand)
{
	F = qt_normalize(F,Expand);
	Rules = map(normalize_rule,Rules,Expand);

	/* rewrite chidren */
	F00 = F0 = F;
	while ( 1 ) {
		FA = quote_to_funargs(F);
		for ( R = [FA[0]], T = cdr(FA); T != []; T = cdr(T) ) {
			E = car(T); TE = type(E);
			if ( TE == O_QUOTE )
				E1 = qt_rewrite(E,Rules,Expand);
			else if ( TE == O_LIST )
				E1 = map(qt_rewrite,E,Rules,Expand);
			else
				E1 = E;
			R = cons(E1,R);
		}
		F = qt_normalize(funargs_to_quote(reverse(R)),Expand);
		if ( F == F0 ) break;
		else F0 = F;
	}
	F0 = F;
	while ( 1 ) {
		for ( T = Rules; T != []; T = cdr(T) ) {
			F1 = nqt_match_rewrite(F,car(T),Expand);
			if ( F1 != F ) {
				F = F1; break;
			}
		}
		if ( F == F0 ) break;
		else F0 = F;
	}
	if ( F00 == F ) return F;
	else return qt_normalize(qt_rewrite(F,Rules,Expand),Expand);
}
end$

