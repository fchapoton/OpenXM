@comment $OpenXM: OpenXM/src/asir-doc/int-parts/port.texi,v 1.1 2001/04/23 05:45:35 noro Exp $
@chapter 移植

@code{risa} は大部分 C により書かれているが, 多倍長演算部の一部はアセ
ンブラにより記述されている. また, メモリ管理部は, セグメントの配置により
パラメタの調整が必要で, 結果として OS に依存する. その他, 細かい点でい
くつか機種依存する部分がある. ここでは, 移植の際に必要な作業について述
べる. 

@section 多倍長演算部

多倍長演算部で, アセンブラを用いている部分は @samp{asm} というディレク
トリにまとめられている. アセンブラが必要になる理由は, 多倍長数の表現で, 
1桁を半語長より大きくとると, 乗除算で, 倍長演算が必要になるが, 通常
の C 言語では倍長演算をサポートしていないためである. 用意すべき函数は
次の 5つである. 

@example
int dm(a1,a2,pu)           t = a1*a2; *pu = t/BASE; return t%BASE;
int a1,a2,*pu;

int dmb(base,a1,a2,pu)     t = a1*a2; *pu = t/base; return t%base;
int base,a1,a2,*pu;

int dma(a1,a2,a3,pu)       t = a1*a2+a3; *pu =t/BASE; return t%BASE;
int a1,a2,a3,*pu;

int dmab(base,a1,a2,a3,pu) t = a1*a2+a3; *pu = t/base; return t%base;
int base,a1,a2,a3,*pu;

int dmar(a1,a2,a3,d)       t = a1*a2+a3; return t%d;
int a1,a2,a3,d;
@end example

これらを書くことにより, 多倍長演算部は完成する. 現在の版では, 

@table @code
@item 680X0 用 
@code{asm3.s (SUN3およびNeXT), asma.s(apollo), asmn.s(NEWS)}
@item sparc 用 
@code{asm4.s}
@item VAX 用 
@code{asmv.s}
@item MIPS 用 
@code{asmm.s}
@end table

が用意されている. ターゲットの CPU がこれらに対応する場合には, これら
をそのまま, あるいは多少変更して使用することができる. 

さらに, @samp{asm/@{ddM.c,ddN.c@}} では, 上記函数のインライン展開も使
用できる. 現在の所, CPU が @code{680X0}, @code{VAX} であるマシンのいく
つかで実現されている. これは, @code{gcc} の インライン @code{asm} の機
能を用いているため, @code{gcc} が使用可能であることが必要である. また, 
@code{mips}, @code{sparc} など, 所謂 RISC CPU では インライン展開の効
果が薄いと考えられるため行なっていない. @code{680X0} を CPU に持つマシ
ンに対し インライン展開を行なうようにする場合, @samp{include/inline.h} 
を変更する必要がある. @samp{inline.h} では, @code{680X0} 用として, 
@code{sun} および @code{motorola} の アセンブラ用の二つのマクロを用意
している. ターゲットのマシンのアセンブラがどちらのアセンブラを用
いているかにより, いずれかのマクロを選択するように @code{#if} の部分
に変更/追加を行なう. 

@section メモリ管理

GC においては, レジスタ, スタック, 静的領域からのマーキングを行なう. 
特に, レジスタは, 機種依存なので, この部分は機種毎に書く必要がある. 
これは, @samp{gc/mach_dep.c} に集められている. ただし, @code{mips} に
ついては @code{mips} の C コンパイラが, @code{asm} 文を許していないた
め, @samp{gc/mips_mach_dep.s} として分離されている. ここに納められてい
ない機種に対しては, 他機種用の部分を参照して書くことになる. 
@samp{gc/runtime.h} の先頭部分に, 機種別の定義を行なう部分があ
る. ここで定義されたシンボルにより @samp{mach_dep.c} の機種別の 
函数が選ばれるので, 対応がきちんと取れるようにする. 
@samp{gc/runtime.h} には, 多くのパラメタが定義されている. これらの内大
部分は CPU, OS に無関係だが, @code{STACKTOP} と @code{DATASTART} の 2
つのパラメタだけは機種毎に調整する必要がある. これらは次のような意味を
持つ. 

@itemize @bullet
@item 
STACKTOP
stack の上限. これは通常 @code{USRSTACK} などの名前で 
@samp{/usr/include/machine/vmparam.h} に定義されている. 

@item
DATASTART
静的データ領域の下限. 少なくとも @code{etext} (プログラム領域の上限) より上であ
るが, これは機種によって様々に異なる. @code{etext} と静的データ領域の下限が連
続していない場合, @code{DATASTART} を実際の下限より下にとると アクセス違反
となる場合もあるので, 何らかの方法で正しい値を調べて設定する必要がある. 
@end itemize

以上により GC は動作するはずである. 

@section alloca()

函数内で作業領域として使用されるメモリはスタックから取るのが望ましい. 
通常これは @code{alloca()} により実現されるが, マシンによっては 
@code{alloca()} を @code{malloc()} を使って実現しているものもある. こ
のような場合, GC の関係でトラブルの原因となるので @code{alloca()} の代
わりに @code{gc_malloc()} を使う必要がある. この選択は, 
@samp{include/ca.h} で @code{ALLOCA()} なるマクロを定義することにより
行なわれる. よって, ターゲットマシンの @code{alloca()} がどのように実
現されているかを調べ, それがスタックを使っているならば 

@example 
#define ALLOCA(d) alloca(d) 
@end example 

@noindent
 malloc() を使っているならば, 

@example
#define ALLOCA(d) alloca(d) 
@end example

@noindent
とする. 
